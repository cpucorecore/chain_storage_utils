package com.ancun.chain_storage.contracts;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class NFT extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "910390fd5b505050565b6000610af06002611722565b905090565b610b06610b0061151a565b82611737565b610b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3c90613f53565b60405180910390fd5b610b50838383611815565b505050565b6000610ba882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061182e90919063ffffffff16565b905092915050565b8160001415610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90613f93565b60405180910390fd5b80518214610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e90613dd3565b60405180910390fd5b6000809050600090505b82811015610c8c576000610c5e828661184890919063ffffffff16565b9050610c7e8682858581518110610c7157fe5b6020026020010151610d08565b508080600101915050610c41565b5050505050565b610cae838383604051806020016040528060008152506111d0565b505050565b610cbc8161189d565b50565b6000600c54905090565b6000610cd4826114fd565b9050919050565b600080610cf28360026119d790919063ffffffff16565b50905080915050919050565b6000600b54905090565b610d128383611a06565b610d1c8282611a24565b505050565b610d2a81611a98565b50565b6000610d5d82604051806060016040528060298152602001614231602991396002611ab29092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6e90613e53565b60405180910390fd5b610ebe600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ad1565b9050919050565b80600a60006101000a81548160ff02191690831515021790555050565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f7a5780601f10610f4f57610100808354040283529160200191610f7a565b820191906000526020600020905b815481529060010190602001808311610f5d57829003601f168201915b5050505050905090565b6000610f8e612a5d565b600d600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16151515158152505090508060400151611021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101890613d73565b60405180910390fd5b8060000151915050919050565b80600c8190555050565b61104061151a565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a590613db3565b60405180910390fd5b80600560006110bb61151a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661116861151a565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111ad9190613cb6565b60405180910390a35050565b6000600a60009054906101000a900460ff16905090565b6111e16111db61151a565b83611737565b611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121790613f53565b60405180910390fd5b61122c84848484611ae6565b50505050565b606061123d826114fd565b61127c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127390613f13565b60405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113255780601f106112fa57610100808354040283529160200191611325565b820191906000526020600020905b81548152906001019060200180831161130857829003601f168201915b505050505090506060611336610d64565b905060008151141561134c5781925050506113b0565b600082511115611381578082604051602001611369929190613b67565b604051602081830303815290604052925050506113b0565b8061138b856115db565b60405160200161139c929190613b67565b604051602081830303815290604052925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000611453612a5d565b600d600084815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905080604001516114e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dd90613d73565b60405180910390fd5b8060200151915050919050565b80600b8190555050565b6000611513826002611b4290919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661159583610d2d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60606000821415611623576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061171d565b600082905060005b6000821461164d578080600101915050600a828161164557fe5b04915061162b565b60608167ffffffffffffffff8111801561166657600080fd5b506040519080825280601f01601f1916602001820160405280156116995781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461171557600a84816116ba57fe5b0660300160f81b828280600190039350815181106116d457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161170d57fe5b0493506116a8565b819450505050505b919050565b600061173082600001611b5c565b9050919050565b6000611742826114fd565b611781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177890613e13565b60405180910390fd5b600061178c83610d2d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117fb57508373ffffffffffffffffffffffffffffffffffffffff166117e384610741565b73ffffffffffffffffffffffffffffffffffffffff16145b8061180c575061180b81856113b5565b5b91505092915050565b611820838383611b6d565b61182981611d84565b505050565b600061183d8360000183611de6565b60001c905092915050565b600080828401905083811015611893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188a90613d53565b60405180910390fd5b8091505092915050565b60006118a882610d2d565b90506118b681600084611e53565b6118c1600083611522565b600060086000848152602001908152602001600020805460018160011615610100020316600290049050146119105760086000838152602001908152602001600020600061190f9190612a80565b5b61196182600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061202e90919063ffffffff16565b5061197682600261204890919063ffffffff16565b5081600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000806000806119ea8660000186612062565b915091508160001c8160001c8090509350935050509250929050565b611a208282604051806020016040528060008152506120e5565b5050565b611a2d826114fd565b611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6390613ed3565b60405180910390fd5b80600860008481526020019081526020016000209080519060200190611a93929190612ac8565b505050565b8060099080519060200190611aae929190612ac8565b5050565b6000611ac5846000018460001b84612140565b60001c90509392505050565b6000611adf82600001",
        "",
        "",
        "6e206e6f74206265207a65726f000000000000000000006000830152602082019050919050565b6000613b0e6018836140be565b91507f292d6c6173745472616e7366657254696d657374616d702800000000000000006000830152601882019050919050565b613b4a81614145565b82525050565b6000613b5c82846130c6565b915081905092915050565b6000613b738285613130565b9150613b7f8284613130565b91508190509392505050565b6000613b96826132ad565b9150613ba28285613130565b9150613bad826131c7565b9150613bb98284613130565b91508190509392505050565b6000613bd082613935565b9150613bdc8286613130565b9150613be782613b01565b9150613bf38285613130565b9150613bfe826135ab565b9150613c0a8284613130565b9150613c158261326d565b9150819050949350505050565b6000613c2d826139db565b9150613c398284613130565b9150613c44826136b7565b915081905092915050565b6000602082019050613c64600083018461306f565b92915050565b6000608082019050613c7f6000830187613060565b613c8c602083018661306f565b613c996040830185613b41565b8181036060830152613cab818461308d565b905095945050505050565b6000602082019050613ccb600083018461307e565b92915050565b60006020820190508181036000830152613ceb81846130f7565b905092915050565b60006020820190508181036000830152613d0c81613161565b9050919050565b60006020820190508181036000830152613d2c81613207565b9050919050565b60006020820190508181036000830152613d4c81613313565b9050919050565b60006020820190508181036000830152613d6c81613353565b9050919050565b60006020820190508181036000830152613d8c81613393565b9050919050565b60006020820190508181036000830152613dac816133d3565b9050919050565b60006020820190508181036000830152613dcc81613439565b9050919050565b60006020820190508181036000830152613dec81613479565b9050919050565b60006020820190508181036000830152613e0c816134df565b9050919050565b60006020820190508181036000830152613e2c81613545565b9050919050565b60006020820190508181036000830152613e4c816135eb565b9050919050565b60006020820190508181036000830152613e6c81613651565b9050919050565b60006020820190508181036000830152613e8c816136f7565b9050919050565b60006020820190508181036000830152613eac8161375d565b9050919050565b60006020820190508181036000830152613ecc8161379d565b9050919050565b60006020820190508181036000830152613eec81613803565b9050919050565b60006020820190508181036000830152613f0c81613869565b9050919050565b60006020820190508181036000830152613f2c816138cf565b9050919050565b60006020820190508181036000830152613f4c81613975565b9050919050565b60006020820190508181036000830152613f6c81613a1b565b9050919050565b60006020820190508181036000830152613f8c81613a81565b9050919050565b60006020820190508181036000830152613fac81613ac1565b9050919050565b6000602082019050613fc86000830184613b41565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613ff157600080fd5b8060405250919050565b600067ffffffffffffffff82111561401257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561403a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561406657600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006140d482614125565b9050919050565b60006140e682614125565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561417c578082015181840152602081019050614161565b8381111561418b576000848401525b50505050565b6000601f19601f8301169050919050565b6141ab816140c9565b81146141b657600080fd5b50565b6141c2816140ed565b81146141cd57600080fd5b50565b6141d9816140f9565b81146141e457600080fd5b50565b6141f081614145565b81146141fb57600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220bda6331336347947cb2f52ef85362e0defa77e2f34f8dc42080ac15b5b722ca464736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "",
        "5b6000613ae86021836140ad565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b613b4a81614145565b82525050565b6000613b5c82846130c6565b915081905092915050565b6000613b738285613130565b9150613b7f8284613130565b91508190509392505050565b6000613b9682613611565b9150613ba28284613130565b9150613bad82613a5b565b915081905092915050565b6000613bc3826137dd565b9150613bcf8285613130565b9150613bda826136f7565b9150613be68284613130565b91508190509392505050565b6000613bfd826139db565b9150613c098286613130565b9150613c1482613a1b565b9150613c208285613130565b9150613c2b82613247565b9150613c378284613130565b9150613c4282613439565b9150819050949350505050565b6000602082019050613c64600083018461306f565b92915050565b6000608082019050613c7f6000830187613060565b613c8c602083018661306f565b613c996040830185613b41565b8181036060830152613cab818461308d565b905095945050505050565b6000602082019050613ccb600083018461307e565b92915050565b60006020820190508181036000830152613ceb81846130f7565b905092915050565b60006020820190508181036000830152613d0c81613161565b9050919050565b60006020820190508181036000830152613d2c816131c7565b9050919050565b60006020820190508181036000830152613d4c81613207565b9050919050565b60006020820190508181036000830152613d6c81613287565b9050919050565b60006020820190508181036000830152613d8c816132c7565b9050919050565b60006020820190508181036000830152613dac8161332d565b9050919050565b60006020820190508181036000830152613dcc81613393565b9050919050565b60006020820190508181036000830152613dec816133d3565b9050919050565b60006020820190508181036000830152613e0c81613479565b9050919050565b60006020820190508181036000830152613e2c816134df565b9050919050565b60006020820190508181036000830152613e4c81613545565b9050919050565b60006020820190508181036000830152613e6c816135ab565b9050919050565b60006020820190508181036000830152613e8c81613651565b9050919050565b60006020820190508181036000830152613eac81613691565b9050919050565b60006020820190508181036000830152613ecc81613737565b9050919050565b60006020820190508181036000830152613eec81613777565b9050919050565b60006020820190508181036000830152613f0c81613843565b9050919050565b60006020820190508181036000830152613f2c816138a9565b9050919050565b60006020820190508181036000830152613f4c8161390f565b9050919050565b60006020820190508181036000830152613f6c81613975565b9050919050565b60006020820190508181036000830152613f8c81613a9b565b9050919050565b60006020820190508181036000830152613fac81613adb565b9050919050565b6000602082019050613fc86000830184613b41565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613ff157600080fd5b8060405250919050565b600067ffffffffffffffff82111561401257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561403a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561406657600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006140d482614125565b9050919050565b60006140e682614125565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561417c578082015181840152602081019050614161565b8381111561418b576000848401525b50505050565b6000601f19601f8301169050919050565b6141ab816140c9565b81146141b657600080fd5b50565b6141c2816140ed565b81146141cd57600080fd5b50565b6141d9816140f9565b81146141e457600080fd5b50565b6141f081614145565b81146141fb57600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea2646970667358221220bdc7ff4231cc0a7fca0eb6667e196aeb8672fb73117541afdf5ab4a42c386e6d64736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"issueTransferAllowed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferInterval_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"name\":\"batchMintWithTokenURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkTokenTransferState\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lastTransferTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"issueTransferAllowed_\",\"type\":\"bool\"}],\"name\":\"setIssueTransferAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransferCount_\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferInterval_\",\"type\":\"uint256\"}],\"name\":\"setTransferInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_BATCHMINTWITHTOKENURIS = "batchMintWithTokenURIs";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CHECKTOKENTRANSFERSTATE = "checkTokenTransferState";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISSUETRANSFERALLOWED = "issueTransferAllowed";

    public static final String FUNC_LASTTRANSFERTIMESTAMP = "lastTransferTimestamp";

    public static final String FUNC_MAXTRANSFERCOUNT = "maxTransferCount";

    public static final String FUNC_MINTWITHTOKENURI = "mintWithTokenURI";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_SETISSUETRANSFERALLOWED = "setIssueTransferAllowed";

    public static final String FUNC_SETMAXTRANSFERCOUNT = "setMaxTransferCount";

    public static final String FUNC_SETTRANSFERINTERVAL = "setTransferInterval";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERCOUNT = "transferCount";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFERINTERVAL = "transferInterval";

    public static final Event APPROVAL_EVENT =
            new Event(
                    "Approval",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT =
            new Event(
                    "ApprovalForAll",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT =
            new Event(
                    "Transfer",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Uint256>(true) {}));
    ;

    protected NFT(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses =
                new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalEvent(
            String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeApprovalEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses =
                new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(
            String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList =
                extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses =
                new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEvent(
            String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI, BINARY, topic0, fromBlock, toBlock, otherTopics, callback);
    }

    public void subscribeTransferEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI, BINARY, topic0, callback);
    }

    public TransactionReceipt approve(String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approve(String to, BigInteger tokenId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_APPROVE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public BigInteger balanceOf(String owner) throws ContractException {
        final Function function =
                new Function(
                        FUNC_BALANCEOF,
                        Arrays.<Type>asList(new Address(owner)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String baseURI() throws ContractException {
        final Function function =
                new Function(
                        FUNC_BASEURI,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt batchMintWithTokenURIs(
            String to, BigInteger startTokenId, BigInteger amount, List<String> tokenURIs) {
        final Function function =
                new Function(
                        FUNC_BATCHMINTWITHTOKENURIS,
                        Arrays.<Type>asList(
                                new Address(to),
                                new Uint256(startTokenId),
                                new Uint256(amount),
                                tokenURIs.isEmpty()
                                        ? DynamicArray.empty("string[]")
                                        : new DynamicArray<Utf8String>(
                                                org.fisco.bcos.sdk.abi.Utils.typeMap(
                                                        tokenURIs, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] batchMintWithTokenURIs(
            String to,
            BigInteger startTokenId,
            BigInteger amount,
            List<String> tokenURIs,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_BATCHMINTWITHTOKENURIS,
                        Arrays.<Type>asList(
                                new Address(to),
                                new Uint256(startTokenId),
                                new Uint256(amount),
                                tokenURIs.isEmpty()
                                        ? DynamicArray.empty("string[]")
                                        : new DynamicArray<Utf8String>(
                                                org.fisco.bcos.sdk.abi.Utils.typeMap(
                                                        tokenURIs, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBatchMintWithTokenURIs(
            String to, BigInteger startTokenId, BigInteger amount, List<String> tokenURIs) {
        final Function function =
                new Function(
                        FUNC_BATCHMINTWITHTOKENURIS,
                        Arrays.<Type>asList(
                                new Address(to),
                                new Uint256(startTokenId),
                                new Uint256(amount),
                                tokenURIs.isEmpty()
                                        ? DynamicArray.empty("string[]")
                                        : new DynamicArray<Utf8String>(
                                                org.fisco.bcos.sdk.abi.Utils.typeMap(
                                                        tokenURIs, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, List<String>> getBatchMintWithTokenURIsInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_BATCHMINTWITHTOKENURIS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, List<String>>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public TransactionReceipt burn(BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_BURN,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] burn(BigInteger tokenId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_BURN,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBurn(BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_BURN,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getBurnInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_BURN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public void checkTokenTransferState(BigInteger tokenId) throws ContractException {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public Boolean exists(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_EXISTS,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String getApproved(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETAPPROVED,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isApprovedForAll(String owner, String operator) throws ContractException {
        final Function function =
                new Function(
                        FUNC_ISAPPROVEDFORALL,
                        Arrays.<Type>asList(new Address(owner), new Address(operator)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean issueTransferAllowed() throws ContractException {
        final Function function =
                new Function(
                        FUNC_ISSUETRANSFERALLOWED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger lastTransferTimestamp(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_LASTTRANSFERTIMESTAMP,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger maxTransferCount() throws ContractException {
        final Function function =
                new Function(
                        FUNC_MAXTRANSFERCOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt mintWithTokenURI(String to, BigInteger tokenId, String tokenURI) {
        final Function function =
                new Function(
                        FUNC_MINTWITHTOKENURI,
                        Arrays.<Type>asList(
                                new Address(to), new Uint256(tokenId), new Utf8String(tokenURI)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mintWithTokenURI(
            String to, BigInteger tokenId, String tokenURI, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_MINTWITHTOKENURI,
                        Arrays.<Type>asList(
                                new Address(to), new Uint256(tokenId), new Utf8String(tokenURI)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMintWithTokenURI(
            String to, BigInteger tokenId, String tokenURI) {
        final Function function =
                new Function(
                        FUNC_MINTWITHTOKENURI,
                        Arrays.<Type>asList(
                                new Address(to), new Uint256(tokenId), new Utf8String(tokenURI)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getMintWithTokenURIInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_MINTWITHTOKENURI,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public String name() throws ContractException {
        final Function function =
                new Function(
                        FUNC_NAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String ownerOf(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_OWNEROF,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(
            String from, String to, BigInteger tokenId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(
            String from, String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSafeTransferFromAddressAddressUint256Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt safeTransferFrom(
            String from, String to, BigInteger tokenId, byte[] _data) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from),
                                new Address(to),
                                new Uint256(tokenId),
                                new DynamicBytes(_data)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(
            String from,
            String to,
            BigInteger tokenId,
            byte[] _data,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from),
                                new Address(to),
                                new Uint256(tokenId),
                                new DynamicBytes(_data)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(
            String from, String to, BigInteger tokenId, byte[] _data) {
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from),
                                new Address(to),
                                new Uint256(tokenId),
                                new DynamicBytes(_data)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, byte[]>
            getSafeTransferFromAddressAddressUint256BytesInput(
                    TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SAFETRANSFERFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, byte[]>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (byte[]) results.get(3).getValue());
    }

    public TransactionReceipt setApprovalForAll(String operator, Boolean approved) {
        final Function function =
                new Function(
                        FUNC_SETAPPROVALFORALL,
                        Arrays.<Type>asList(new Address(operator), new Bool(approved)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(
            String operator, Boolean approved, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETAPPROVALFORALL,
                        Arrays.<Type>asList(new Address(operator), new Bool(approved)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String operator, Boolean approved) {
        final Function function =
                new Function(
                        FUNC_SETAPPROVALFORALL,
                        Arrays.<Type>asList(new Address(operator), new Bool(approved)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETAPPROVALFORALL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(
                (String) results.get(0).getValue(), (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt setBaseURI(String baseURI_) {
        final Function function =
                new Function(
                        FUNC_SETBASEURI,
                        Arrays.<Type>asList(new Utf8String(baseURI_)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setBaseURI(String baseURI_, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBASEURI,
                        Arrays.<Type>asList(new Utf8String(baseURI_)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBaseURI(String baseURI_) {
        final Function function =
                new Function(
                        FUNC_SETBASEURI,
                        Arrays.<Type>asList(new Utf8String(baseURI_)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetBaseURIInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBASEURI,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setIssueTransferAllowed(Boolean issueTransferAllowed_) {
        final Function function =
                new Function(
                        FUNC_SETISSUETRANSFERALLOWED,
                        Arrays.<Type>asList(new Bool(issueTransferAllowed_)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setIssueTransferAllowed(
            Boolean issueTransferAllowed_, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETISSUETRANSFERALLOWED,
                        Arrays.<Type>asList(new Bool(issueTransferAllowed_)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetIssueTransferAllowed(Boolean issueTransferAllowed_) {
        final Function function =
                new Function(
                        FUNC_SETISSUETRANSFERALLOWED,
                        Arrays.<Type>asList(new Bool(issueTransferAllowed_)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getSetIssueTransferAllowedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETISSUETRANSFERALLOWED,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public TransactionReceipt setMaxTransferCount(BigInteger maxTransferCount_) {
        final Function function =
                new Function(
                        FUNC_SETMAXTRANSFERCOUNT,
                        Arrays.<Type>asList(new Uint256(maxTransferCount_)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxTransferCount(BigInteger maxTransferCount_, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMAXTRANSFERCOUNT,
                        Arrays.<Type>asList(new Uint256(maxTransferCount_)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxTransferCount(BigInteger maxTransferCount_) {
        final Function function =
                new Function(
                        FUNC_SETMAXTRANSFERCOUNT,
                        Arrays.<Type>asList(new Uint256(maxTransferCount_)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxTransferCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMAXTRANSFERCOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setTransferInterval(BigInteger transferInterval_) {
        final Function function =
                new Function(
                        FUNC_SETTRANSFERINTERVAL,
                        Arrays.<Type>asList(new Uint256(transferInterval_)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTransferInterval(BigInteger transferInterval_, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETTRANSFERINTERVAL,
                        Arrays.<Type>asList(new Uint256(transferInterval_)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTransferInterval(BigInteger transferInterval_) {
        final Function function =
                new Function(
                        FUNC_SETTRANSFERINTERVAL,
                        Arrays.<Type>asList(new Uint256(transferInterval_)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetTransferIntervalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETTRANSFERINTERVAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String symbol() throws ContractException {
        final Function function =
                new Function(
                        FUNC_SYMBOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger tokenByIndex(BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_TOKENBYINDEX,
                        Arrays.<Type>asList(new Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger tokenOfOwnerByIndex(String owner, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_TOKENOFOWNERBYINDEX,
                        Arrays.<Type>asList(new Address(owner), new Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String tokenURI(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_TOKENURI,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger totalSupply() throws ContractException {
        final Function function =
                new Function(
                        FUNC_TOTALSUPPLY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger transferCount(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_TRANSFERCOUNT,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transferFrom(String from, String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_TRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferFrom(
            String from, String to, BigInteger tokenId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_TRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function =
                new Function(
                        FUNC_TRANSFERFROM,
                        Arrays.<Type>asList(
                                new Address(from), new Address(to), new Uint256(tokenId)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferFromInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_TRANSFERFROM,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue());
    }

    public BigInteger transferInterval() throws ContractException {
        final Function function =
                new Function(
                        FUNC_TRANSFERINTERVAL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public static NFT load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NFT(contractAddress, client, credential);
    }

    public static NFT deploy(
            Client client,
            CryptoKeyPair credential,
            String name_,
            String symbol_,
            Boolean issueTransferAllowed_,
            BigInteger maxTransferCount_,
            BigInteger transferInterval_)
            throws ContractException {
        String encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new Utf8String(name_),
                                new Utf8String(symbol_),
                                new Bool(issueTransferAllowed_),
                                new Uint256(maxTransferCount_),
                                new Uint256(transferInterval_)));
        return deploy(
                NFT.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse {
        public TransactionReceipt.Logs log;

        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
