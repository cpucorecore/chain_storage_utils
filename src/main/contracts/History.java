package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class History extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508686612b49565b90506000611cf38260600151611ce560018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015611d2a5781602001602082028038833980820191505090505b50905060008090505b8360400151811015611dc157600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818401815481101515611d8d57fe5b90600052602060002001548282815181101515611da657fe5b90602001906020020181815250508080600101915050611d33565b5080836020015184608001511494509450505050935093915050565b6000600680549050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f1d6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f0a5780601f10611edf57610100808354040283529160200191611f0a565b820191906000526020600020905b815481529060010190602001808311611eed57829003601f168201915b5050505050612a7d90919063ffffffff16565b901515611f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5791906135aa565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612058606060405190810160405280602181526020016138d56021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120455780601f1061201a57610100808354040283529160200191612045565b820191906000526020600020905b81548152906001019060200180831161202857829003601f168201915b5050505050612a7d90919063ffffffff16565b90151561209b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209291906135aa565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000612168612f64565b6121c6601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020805490508686612b49565b905060006121f882606001516121ea60018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b90506060826040015160405190808252806020026020018201604052801561222f5781602001602082028038833980820191505090505b50905060008090505b83604001518110156122d757601160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000208184018154811015156122a357fe5b906000526020600020015482828151811015156122bc57fe5b90602001906020020181815250508080600101915050612238565b508083602001518460800151149450945050505094509492505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124276040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124145780601f106123e957610100808354040283529160200191612414565b820191906000526020600020905b8154815290600101906020018083116123f757829003601f168201915b5050505050612a7d90919063ffffffff16565b90151561246a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246191906135aa565b60405180910390fd5b5060008090505b6004805490508110156125c257600060048281548110151561248f57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125139190613552565b60206040518083038186803b15801561252b57600080fd5b505afa15801561253f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125639190810190613035565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050612471565b50565b600060066080604051908101604052804281526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185600181111561260357fe5b815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360018111156126ac57fe5b02179055506060820151816002015550509050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555060086000838152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b60008060008060068054905085111515156127ff57600080fd5b600060068681548110151561281057fe5b9060005260206000209060030201905080600001548160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260010160149054906101000a900460ff1683600201549450945094509450509193509193565b6060600061287d612f64565b6128ca600f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508686612b49565b905060006128fc82606001516128ee60018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156129335781602001602082028038833980820191505090505b50905060008090505b83604001518110156129ca57600f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081840181548110151561299657fe5b906000526020600020015482828151811015156129af57fe5b9060200190602002018181525050808060010191505061293c565b5080836020015184608001511494509450505050935093915050565b6000806000806000600a805490508611151515612a0257600080fd5b6000600a87815481101515612a1357fe5b9060005260206000209060050201905080600001548160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600201548360030160009054906101000a900460ff168460040154955095509550955095505091939590929450565b606082826040516020018083805190602001908083835b602083101515612ab95780518252602082019150602081019050602083039250612a94565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515612b0c5780518252602082019150602081019050602083039250612ae7565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b612b51612f64565b612b59612f64565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480612b965750600084145b15612ba45780915050612c92565b60328411612bb25783612bb5565b60325b8160600181815250508060600151816040018181525050612be3816060015186612d5790919063ffffffff16565b8160200181815250506000612c05826060015187612da190919063ffffffff16565b90506000811115612c3257612c2860018360200151612deb90919063ffffffff16565b8260200181815250505b6001841115612c4657838260800181815250505b816020015182608001511115612c655781602001518260800181815250505b81602001518260800151148015612c7c5750600081115b15612c8c5780826040","0181815250505b81925050505b9392505050565b6000612cdb83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e42565b905092915050565b600080831415612cf65760009050612d51565b60008284029050828482811515612d0957fe5b04141515612d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d43906135ec565b60405180910390fd5b809150505b92915050565b6000612d9983836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e9f565b905092915050565b6000612de383836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612f04565b905092915050565b6000808284019050838110151515612e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2f906135cc565b60405180910390fd5b8091505092915050565b60008383111582901515612e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e8391906135aa565b60405180910390fd5b5060008385039050809150509392505050565b600080831182901515612ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edf91906135aa565b60405180910390fd5b5060008385811515612ef657fe5b049050809150509392505050565b60008083141582901515612f4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4591906135aa565b60405180910390fd5b508284811515612f5a57fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000612fa082356137f0565b905092915050565b6000612fb482516137f0565b905092915050565b6000612fc88235613802565b905092915050565b6000612fdc823561380c565b905092915050565b6000612ff08235613825565b905092915050565b6000613004823561383e565b905092915050565b60006020828403121561301e57600080fd5b600061302c84828501612f94565b91505092915050565b60006020828403121561304757600080fd5b600061305584828501612fa8565b91505092915050565b6000806000806080858703121561307457600080fd5b600061308287828801612f94565b945050602061309387828801612fbc565b93505060406130a487828801612ff8565b92505060606130b587828801612ff8565b91505092959194509250565b6000806000606084860312156130d657600080fd5b60006130e486828701612f94565b93505060206130f586828701612fd0565b925050604061310686828701612fbc565b9150509250925092565b6000806000806080858703121561312657600080fd5b600061313487828801612f94565b945050602061314587828801612ff8565b935050604061315687828801612fd0565b925050606061316787828801612fbc565b91505092959194509250565b6000806000806080858703121561318957600080fd5b600061319787828801612f94565b94505060206131a887828801612ff8565b93505060406131b987828801612fe4565b92505060606131ca87828801612fbc565b91505092959194509250565b6000806000606084860312156131eb57600080fd5b60006131f986828701612f94565b935050602061320a86828701612ff8565b925050604061321b86828701612ff8565b9150509250925092565b60006020828403121561323757600080fd5b600061324584828501612fbc565b91505092915050565b60008060006060848603121561326357600080fd5b600061327186828701612fbc565b935050602061328286828701612ff8565b925050604061329386828701612ff8565b9150509250925092565b6000602082840312156132af57600080fd5b60006132bd84828501612ff8565b91505092915050565b6132cf81613772565b82525050565b60006132e08261372c565b8084526020840193506132f283613712565b60005b828110156133245761330886835161339a565b61331182613758565b91506020860195506001810190506132f5565b50849250505092915050565b600061333b82613737565b80845260208401935061334d8361371f565b60005b8281101561337f576133638683516134d6565b61336c82613765565b9150602086019550600181019050613350565b50849250505092915050565b61339481613784565b82525050565b6133a381613790565b82525050565b6133b281613848565b82525050565b6133c18161386c565b82525050565b6133d08161387e565b82525050565b60006133e18261374d565b8084526133f5816020860160208601613890565b6133fe816138c3565b602085010191505092915050565b600061341782613742565b80845261342b816020860160208601613890565b613434816138c3565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6134df816137e6565b82525050565b60006020820190506134fa60008301846132c6565b92915050565b6000602082019050818103600083015261351a81846132d5565b905092915050565b6000604082019050818103600083015261353c8185613330565b905061354b602083018461338b565b9392505050565b6000602082019050613567600083018461339a565b92915050565b600060208201905061358260008301846133a9565b92915050565b600060208201905081810360008301526135a2818461340c565b905092915050565b600060208201905081810360008301526135c481846133d6565b905092915050565b600060208201905081810360008301526135e581613442565b9050919050565b6000602082019050818103600083015261360581613479565b9050919050565b600060208201905061362160008301846134d6565b92915050565b600060808201905061363c60008301876134d6565b61364960208301866132c6565b61365660408301856133b8565b613663606083018461339a565b95945050505050565b600060a08201905061368160008301886134d6565b61368e60208301876132c6565b61369b60408301866134d6565b6136a860608301856133b8565b6136b5608083018461339a565b9695505050505050565b600060a0820190506136d460008301886134d6565b6136e160208301876132c6565b6136ee60408301866134d6565b6136fb60608301856133c7565b613708608083018461339a565b9695505050505050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061377d826137c6565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156137a857fe5b819050919050565b60006002821015156137be57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006137fb826137c6565b9050919050565b6000819050919050565b600060028210151561381d57600080fd5b819050919050565b600060028210151561383657600080fd5b819050919050565b6000819050919050565b60006138538261385a565b9050919050565b6000613865826137c6565b9050919050565b60006138778261379a565b9050919050565b6000613889826137b0565b9050919050565b60005b838110156138ae578082015181840152602081019050613893565b838111156138bd576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a723058208b34c6843c26afe65969bffbe8e749db5911dccdcb3c2ba65212ac59201ee0e66c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffff16565b612ce390919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610cd05781602001602082028038833980820191505090505b50905060008090505b8360400151811015610d6757600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818401815481101515610d3357fe5b90600052602060002001548282815181101515610d4c57fe5b90602001906020020181815250508080600101915050610cd9565b5080836020015184608001511494509450505050935093915050565b6000600e80549050905090565b60606000610d9c612f64565b610dfa600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020805490508686612b49565b90506000610e2c8260600151610e1e60018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610e635781602001602082028038833980820191505090505b50905060008090505b8360400151811015610f0b57600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020818401815481101515610ed757fe5b90600052602060002001548282815181101515610ef057fe5b90602001906020020181815250508080600101915050610e6c565b508083602001518460800151149450945050505094509492505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60a0604051908101604052804281526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001856001811115610f9257fe5b815260200184815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083600181111561104557fe5b02179055506080820151816004015550509050600f60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555060106000838152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112b26040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561129f5780601f106112745761010080835404028352916020019161129f565b820191906000526020600020905b81548152906001019060200180831161128257829003601f168201915b5050505050612a7d90919063ffffffff16565b9015156112f5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016112ec91906135aa565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161136d9190613552565b60206040518083038186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113bd9190810190613035565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6000806000806000600e80549050861115151561145657fe5b6000600e8781548110151561146757fe5b9060005260206000209060050201905080600001548160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600201548360030160009054906101000a900460ff168460040154955095509550955095505091939590929450565b600060066080604051908101604052804281526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185600181111561150f57fe5b815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548160ff021916908360018111156115b857fe5b02179055506060820151816002015550509050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555060086000838152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050565b606060006116fd612f64565b61171e60086000888152602001908152602001600020805490508686612b49565b90506000611750826060015161174260018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156117875781602001602082028038833980820191505090505b50905060008090505b83604001518110156117f257600860008a81526020019081526020016000208184018154811015156117be57fe5b906000526020600020015482828151811015156117d757fe5b90602001906020020181815250508080600101915050611790565b5080836020015184608001511494509450505050935093915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119416040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561192e5780601f106119035761010080835404028352916020019161192e565b820191906000526020600020905b81548152906001019060200180831161191157829003601f168201915b5050505050612a7d90919063ffffffff16565b901515611984576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161197b91906135aa565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a7c606060405190810160405280602181526020016138d56021913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a695780601f10611a3e57610100808354040283529160200191611a69565b820191906000526020600020905b815481529060010190602001808311611a4c57829003601f168201915b5050505050612a7d90919063ffffffff16565b901515611abf576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611ab691906135aa565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000611b8c612f64565b611bea601160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000888152602001908152602001600020805490508686612b49565b90506000611c1c8260600151611c0e60018560800151612c9990919063ffffffff16565b612ce390919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015611c535781602001602082028038833980820191505090505b50905060008090505b8360400151811015611cfb57601160008b73ffffffffffffffffffffffffffffffffffffffff1673ff","","0181815250505b81925050505b9392505050565b6000612cdb83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612e42565b905092915050565b600080831415612cf65760009050612d51565b60008284029050828482811515612d0957fe5b04141515612d4c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d43906135cc565b60405180910390fd5b809150505b92915050565b6000612d9983836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612e9f565b905092915050565b6000612de383836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612f04565b905092915050565b6000808284019050838110151515612e38576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612e2f906135ec565b60405180910390fd5b8091505092915050565b60008383111582901515612e8c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612e8391906135aa565b60405180910390fd5b5060008385039050809150509392505050565b600080831182901515612ee8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612edf91906135aa565b60405180910390fd5b5060008385811515612ef657fe5b049050809150509392505050565b60008083141582901515612f4e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612f4591906135aa565b60405180910390fd5b508284811515612f5a57fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000612fa082356137f0565b905092915050565b6000612fb482516137f0565b905092915050565b6000612fc88235613802565b905092915050565b6000612fdc823561380c565b905092915050565b6000612ff08235613825565b905092915050565b6000613004823561383e565b905092915050565b60006020828403121561301e57600080fd5b600061302c84828501612f94565b91505092915050565b60006020828403121561304757600080fd5b600061305584828501612fa8565b91505092915050565b6000806000806080858703121561307457600080fd5b600061308287828801612f94565b945050602061309387828801612fbc565b93505060406130a487828801612ff8565b92505060606130b587828801612ff8565b91505092959194509250565b6000806000606084860312156130d657600080fd5b60006130e486828701612f94565b93505060206130f586828701612fd0565b925050604061310686828701612fbc565b9150509250925092565b6000806000806080858703121561312657600080fd5b600061313487828801612f94565b945050602061314587828801612ff8565b935050604061315687828801612fd0565b925050606061316787828801612fbc565b91505092959194509250565b6000806000806080858703121561318957600080fd5b600061319787828801612f94565b94505060206131a887828801612ff8565b93505060406131b987828801612fe4565b92505060606131ca87828801612fbc565b91505092959194509250565b6000806000606084860312156131eb57600080fd5b60006131f986828701612f94565b935050602061320a86828701612ff8565b925050604061321b86828701612ff8565b9150509250925092565b60006020828403121561323757600080fd5b600061324584828501612fbc565b91505092915050565b60008060006060848603121561326357600080fd5b600061327186828701612fbc565b935050602061328286828701612ff8565b925050604061329386828701612ff8565b9150509250925092565b6000602082840312156132af57600080fd5b60006132bd84828501612ff8565b91505092915050565b6132cf81613772565b82525050565b60006132e08261372c565b8084526020840193506132f283613712565b60005b828110156133245761330886835161339a565b61331182613758565b91506020860195506001810190506132f5565b50849250505092915050565b600061333b82613737565b80845260208401935061334d8361371f565b60005b8281101561337f576133638683516134d6565b61336c82613765565b9150602086019550600181019050613350565b50849250505092915050565b61339481613784565b82525050565b6133a381613790565b82525050565b6133b281613848565b82525050565b6133c18161386c565b82525050565b6133d08161387e565b82525050565b60006133e18261374d565b8084526133f5816020860160208601613890565b6133fe816138c3565b602085010191505092915050565b600061341782613742565b80845261342b816020860160208601613890565b613434816138c3565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6134df816137e6565b82525050565b60006020820190506134fa60008301846132c6565b92915050565b6000602082019050818103600083015261351a81846132d5565b905092915050565b6000604082019050818103600083015261353c8185613330565b905061354b602083018461338b565b9392505050565b6000602082019050613567600083018461339a565b92915050565b600060208201905061358260008301846133a9565b92915050565b600060208201905081810360008301526135a2818461340c565b905092915050565b600060208201905081810360008301526135c481846133d6565b905092915050565b600060208201905081810360008301526135e581613442565b9050919050565b600060208201905081810360008301526136058161349f565b9050919050565b600060208201905061362160008301846134d6565b92915050565b600060808201905061363c60008301876134d6565b61364960208301866132c6565b61365660408301856133b8565b613663606083018461339a565b95945050505050565b600060a08201905061368160008301886134d6565b61368e60208301876132c6565b61369b60408301866134d6565b6136a860608301856133b8565b6136b5608083018461339a565b9695505050505050565b600060a0820190506136d460008301886134d6565b6136e160208301876132c6565b6136ee60408301866134d6565b6136fb60608301856133c7565b613708608083018461339a565b9695505050505050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061377d826137c6565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156137a857fe5b819050919050565b60006002821015156137be57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006137fb826137c6565b9050919050565b6000819050919050565b600060028210151561381d57600080fd5b819050919050565b600060028210151561383657600080fd5b819050919050565b6000819050919050565b60006138538261385a565b9050919050565b6000613865826137c6565b9050919050565b60006138778261379a565b9050919050565b6000613889826137b0565b9050919050565b60005b838110156138ae578082015181840152602081019050613893565b838111156138bd576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820812eab8c556de812464490cc66559c4b3587d7b8cc0309a440e7beb861dababe6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMonitorHistoryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getUserHistoryIndexesByUserAndCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeHistoryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"}],\"name\":\"addNodeAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"}],\"name\":\"addMonitorAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getUserHistoryIndexesByCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMonitorHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getMonitorHistoryIndexesByCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodeHistoryIndexesByCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getUserHistoryIndexesByUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodeHistoryIndexesByNodeAndCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodeHistoryIndexesByNode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserHistoryNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getMonitorHistoryIndexesByMonitorAndCidHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"actionType\",\"type\":\"uint8\"},{\"name\":\"cidHash\",\"type\":\"bytes32\"}],\"name\":\"addUserAction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getMonitorHistoryIndexesByMonitor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNodeHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETMONITORHISTORYNUMBER = "getMonitorHistoryNumber";

    public static final String FUNC_GETUSERHISTORYINDEXESBYUSERANDCIDHASH = "getUserHistoryIndexesByUserAndCidHash";

    public static final String FUNC_GETNODEHISTORYNUMBER = "getNodeHistoryNumber";

    public static final String FUNC_ADDNODEACTION = "addNodeAction";

    public static final String FUNC_ADDMONITORACTION = "addMonitorAction";

    public static final String FUNC_GETUSERHISTORYINDEXESBYCIDHASH = "getUserHistoryIndexesByCidHash";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_GETMONITORHISTORY = "getMonitorHistory";

    public static final String FUNC_GETMONITORHISTORYINDEXESBYCIDHASH = "getMonitorHistoryIndexesByCidHash";

    public static final String FUNC_GETNODEHISTORYINDEXESBYCIDHASH = "getNodeHistoryIndexesByCidHash";

    public static final String FUNC_GETUSERHISTORYINDEXESBYUSER = "getUserHistoryIndexesByUser";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETNODEHISTORYINDEXESBYNODEANDCIDHASH = "getNodeHistoryIndexesByNodeAndCidHash";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETNODEHISTORYINDEXESBYNODE = "getNodeHistoryIndexesByNode";

    public static final String FUNC_GETUSERHISTORYNUMBER = "getUserHistoryNumber";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETMONITORHISTORYINDEXESBYMONITORANDCIDHASH = "getMonitorHistoryIndexesByMonitorAndCidHash";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_ADDUSERACTION = "addUserAction";

    public static final String FUNC_GETUSERHISTORY = "getUserHistory";

    public static final String FUNC_GETMONITORHISTORYINDEXESBYMONITOR = "getMonitorHistoryIndexesByMonitor";

    public static final String FUNC_GETNODEHISTORY = "getNodeHistory";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected History(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getMonitorHistoryNumber() throws ContractException {
        final Function function = new Function(FUNC_GETMONITORHISTORYNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<BigInteger>, Boolean> getUserHistoryIndexesByUserAndCidHash(String addr, byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETUSERHISTORYINDEXESBYUSERANDCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getNodeHistoryNumber() throws ContractException {
        final Function function = new Function(FUNC_GETNODEHISTORYNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addNodeAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDNODEACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addNodeAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDNODEACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddNodeAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDNODEACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, byte[]> getAddNodeActionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDNODEACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public TransactionReceipt addMonitorAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDMONITORACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addMonitorAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDMONITORACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddMonitorAction(String addr, BigInteger tid, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDMONITORACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, byte[]> getAddMonitorActionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDMONITORACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public Tuple2<List<BigInteger>, Boolean> getUserHistoryIndexesByCidHash(byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETUSERHISTORYINDEXESBYCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple5<BigInteger, String, BigInteger, BigInteger, byte[]> getMonitorHistory(BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETMONITORHISTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, String, BigInteger, BigInteger, byte[]>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (byte[]) results.get(4).getValue());
    }

    public Tuple2<List<BigInteger>, Boolean> getMonitorHistoryIndexesByCidHash(byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETMONITORHISTORYINDEXESBYCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public Tuple2<List<BigInteger>, Boolean> getNodeHistoryIndexesByCidHash(byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODEHISTORYINDEXESBYCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public Tuple2<List<BigInteger>, Boolean> getUserHistoryIndexesByUser(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETUSERHISTORYINDEXESBYUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<List<BigInteger>, Boolean> getNodeHistoryIndexesByNodeAndCidHash(String addr, byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODEHISTORYINDEXESBYNODEANDCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<List<BigInteger>, Boolean> getNodeHistoryIndexesByNode(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODEHISTORYINDEXESBYNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getUserHistoryNumber() throws ContractException {
        final Function function = new Function(FUNC_GETUSERHISTORYNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<List<BigInteger>, Boolean> getMonitorHistoryIndexesByMonitorAndCidHash(String addr, byte[] cidHash, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETMONITORHISTORYINDEXESBYMONITORANDCIDHASH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt addUserAction(String addr, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDUSERACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addUserAction(String addr, BigInteger actionType, byte[] cidHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDUSERACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddUserAction(String addr, BigInteger actionType, byte[] cidHash) {
        final Function function = new Function(
                FUNC_ADDUSERACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(actionType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(cidHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, byte[]> getAddUserActionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDUSERACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple4<BigInteger, String, BigInteger, byte[]> getUserHistory(BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETUSERHISTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, BigInteger, byte[]>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue());
    }

    public Tuple2<List<BigInteger>, Boolean> getMonitorHistoryIndexesByMonitor(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETMONITORHISTORYINDEXESBYMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, Boolean>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public Tuple5<BigInteger, String, BigInteger, BigInteger, byte[]> getNodeHistory(BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETNODEHISTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, String, BigInteger, BigInteger, byte[]>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (byte[]) results.get(4).getValue());
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static History load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new History(contractAddress, client, credential);
    }

    public static History deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(History.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
