package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b50604051602080620057128339810180604052620000579190810190620009be565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b505062000b70565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002436040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002215780601f10620001f55761010080835404028352916020019162000221565b820191906000526020600020905b8154815290600101906020018083116200020357829003601f168201915b505050505062000417640100000000026200356b179091906401000000009004565b90151562000289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000280919062000a6b565b60405180910390fd5b50620002a981620004e7640100000000026200372e176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620002f69291906200089b565b50620003da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200038057600080fd5b505afa15801562000395573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620003c09190810190620009ea565b620008886401000000000262003aa0176401000000009004565b6003819055506000600354141562000414577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b606082826040516020018083805190602001908083835b6020831015156200045557805182526020820191506020810190506020830392506200042e565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515620004aa578051825260208201915060208101905060208303925062000483565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200062e6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200060c5780601f10620005e0576101008083540402835291602001916200060c565b820191906000526020600020905b815481529060010190602001808311620005ee57829003601f168201915b505050505062000417640100000000026200356b179091906401000000009004565b90151562000674576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200066b919062000a6b565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200078160606040519081016040528060218152602001620056f16021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200075f5780601f1062000733576101008083540402835291602001916200075f565b820191906000526020600020905b8154815290600101906020018083116200074157829003601f168201915b505050505062000417640100000000026200356b179091906401000000009004565b901515620007c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007be919062000a6b565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008de57805160ff19168380011785556200090f565b828001600101855582156200090f579182015b828111156200090e578251825591602001919060010190620008f1565b5b5090506200091e919062000922565b5090565b6200094791905b808211156200094357600081600090555060010162000929565b5090565b90565b600062000958825162000b15565b905092915050565b600082601f83011215156200097457600080fd5b81516200098b620009858262000abd565b62000a8f565b91508082526020830160208301858383011115620009a857600080fd5b620009b583828462000b29565b50505092915050565b600060208284031215620009d157600080fd5b6000620009e1848285016200094a565b91505092915050565b600060208284031215620009fd57600080fd5b600082015167ffffffffffffffff81111562000a1857600080fd5b62000a268482850162000960565b91505092915050565b600062000a3c8262000aea565b80845262000a5281602086016020860162000b29565b62000a5d8162000b5f565b602085010191505092915050565b6000602082019050818103600083015262000a87818462000a2f565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171562000ab357600080fd5b8060405250919050565b600067ffffffffffffffff82111562000ad557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b228262000af5565b9050919050565b60005b8381101562000b4957808201518184015260208101905062000b2c565b8381111562000b59576000848401525b50505050565b6000601f19601f8301169050919050565b614b718062000b806000396000f3fe608060405260043610610336576000357c0100000000000000000000000000000000000000000000000000000000900480637de529be116101c8578063c82913f511610114578063e82cd9ca116100b2578063f3868df11161008c578063f3868df114610ce4578063f527a04b14610d21578063f7ae002214610d4a578063fbc9093514610d7357610336565b8063e82cd9ca14610c69578063e9bf46b014610c92578063f1f5709514610cbb57610336565b8063d658d69f116100ee578063d658d69f14610b97578063d962c33b14610bc0578063e032f73214610bfd578063e5d0d27414610c4057610336565b8063c82913f514610b18578063c8fe3a0114610b43578063d0ebdbe714610b6e57610336565b8063a056bcbb11610181578063aac51fa21161015b578063aac51fa214610a37578063b7bc5a9d14610a75578063bad0d14814610ab2578063c65e04eb14610adb57610336565b8063a056bcbb146109a8578063a19eaf73146109e5578063a238ed7914610a0e57610336565b80637de529be146108715780637e51ef29146108ae578063835733bf146108eb578063843b817f146109165780638da5cb5b1461095457806394fc2a4e1461097f57610336565b8063481c6a751161028757806354e69e9d1161024057806375d0c0dc1161021a57806375d0c0dc146107a35780637889faeb146107ce5780637b7483fe1461080b5780637c8632f71461084857610336565b806354e69e9d146106eb57806357df3b08146107285780636ba8ac441461076557610336565b8063481c6a75146105cb5780634afb470e146105f65780634c6ccbac146106335780634d0fc70e1461065c5780634dfefc4b146106855780635054db15146106c257610336565b80632441ac7b116102f4578063307a10dd116102ce578063307a10dd146104ff57806330ccebb51461052857806332a42b51146105655780633fbbd75e146105a257610336565b80632441ac7b14610470578063278e07ce146104ad5780632d4ede93146104d657610336565b80628f128a1461033b5780630327d33214610378578063092aa6cf146103a15780631256aac7146103de57806313af40351461041c57806319ad3d7114610445575b600080fd5b34801561034757600080fd5b50610362600480360361035d9190810190614251565b610db0565b60405161036f919061489d565b60405180910390f35b34801561038457600080fd5b5061039f600480360361039a919081019061430e565b610dff565b005b3480156103ad57600080fd5b506103c860048036036103c39190810190614251565b610e4d565b6040516103d5919061489d565b60405180910390f35b3480156103ea57600080fd5b50610405600480360361040091908101906143b6565b610e9d565b6040516104139291906147b3565b60405180910390f35b34801561042857600080fd5b50610443600480360361043e9190810190614251565b611086565b005b34801561045157600080fd5b5061045a611414565b604051610467919061473f565b60405180910390f35b34801561047c57600080fd5b506104","","ffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908360048111156114d257fe5b02179055505050565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900460ff1661160d6040805190810160405280601081526020017f3a206e6f6465206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115fa5780601f106115cf576101008083540402835291602001916115fa565b820191906000526020600020905b8154815290600101906020018083116115dd57829003601f168201915b505050505061356b90919063ffffffff16565b901515611650576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611647919061483b565b60405180910390fd5b50600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff02191690556001820160008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905550506008820160008082016000905560018201600090555050600a820160009055600b820160006117139190613f40565b600c820160006101000a81549060ff02191690555050600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000808201600061177e9190613f88565b5050505061179681600561365790919063ffffffff16565b506117ab81600761365790919063ffffffff16565b5050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101819055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600001549050919050565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900460ff16156119d86040805190810160405280600c81526020017f3a206e6f6465206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119c55780601f1061199a576101008083540402835291602001916119c5565b820191906000526020600020905b8154815290600101906020018083116119a857829003601f168201915b505050505061356b90919063ffffffff16565b901515611a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a12919061483b565b60405180910390fd5b5060c06040519081016040528060016004811115611a3557fe5b815260200160e060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525081526020016040805190810160405280868152602001600081525081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115611b5057fe5b0217905550602082015181600101600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505060408201518160080160008201518160000155602082015181600101555050606082015181600a0155608082015181600b019080519060200190611beb929190613fa9565b5060a082015181600c0160006101000a81548160ff021916908315150217905550905050611c2384600561368790919063ffffffff16565b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c668260076136b790919063ffffffff16565b9050919050565b611c8181600761365790919063ffffffff16565b5050565b611c9981600761368790919063ffffffff16565b5050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900460ff169050919050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600601819055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600301549050919050565b6000600b8383604051808383808284378083019250505092505050908152602001604051809103902054905092915050565b60606000611dd1613f10565b611de5611dde60056136e7565b8686613346565b90506000611e178260600151611e096001856080015161349690919063ffffffff16565b6134e090919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015611e4e5781602001602082028038833980820191505090505b50905060008090505b8360400151811015611ed057611e7981840160056136fc90919063ffffffff16565b8282815181101515611e8757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050611e57565b50808360200151846080015114945094505050509250929050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f815780601f10611f5657610100808354040283529160200191611f81565b820191906000526020600020905b815481529060010190602001808311611f6457829003601f168201915b505050505081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600401549050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160000154600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016001015411156120755760009050612115565b612112600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160010154600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016000015461349690919063ffffffff16565b90505b919050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600001819055505050565b606060006121b3600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613331565b90506060816040519080825280602002602001820160405280156121eb57816020015b60608152602001906001900390816121d65790505b50905060008090505b8281101561232057600a600061225183600960008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061355490919063ffffffff16565b81526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122f35780601f106122c8576101008083540402835291602001916122f3565b820191906000526020600020905b8154815290600101906020018083116122d657829003601f168201915b5050505050828281518110151561230657fe5b9060200190602002018190525080806001019150506121f4565b508092505050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801600001549050919050565b600061238660056136e7565b905090565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160010154600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016000015491509150915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260","","8260400181815250505b81925050505b9392505050565b60006134d883836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613bdd565b905092915050565b6000808314156134f3576000905061354e565b6000828402905082848281151561350657fe5b04141515613549576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135409061487d565b60405180910390fd5b809150505b92915050565b60006135638360000183613c3a565b905092915050565b606082826040516020018083805190602001908083835b6020831015156135a75780518252602082019150602081019050602083039250613582565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156135fa57805182526020820191506020810190506020830392506135d5565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608061364683600001613c60565b905060608190508092505050919050565b600061367f836000018373ffffffffffffffffffffffffffffffffffffffff16600102613cbc565b905092915050565b60006136af836000018373ffffffffffffffffffffffffffffffffffffffff16600102613db3565b905092915050565b60006136df836000018373ffffffffffffffffffffffffffffffffffffffff16600102613e28565b905092915050565b60006136f582600001613b38565b9050919050565b600061370b8360000183613c3a565b60019004905092915050565b60006137268360000183613e28565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146138616040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561384e5780601f106138235761010080835404028352916020019161384e565b820191906000526020600020905b81548152906001019060200180831161383157829003601f168201915b505050505061356b90919063ffffffff16565b9015156138a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389b919061483b565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561399c60606040519081016040528060218152602001614b176021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139895780601f1061395e57610100808354040283529160200191613989565b820191906000526020600020905b81548152906001019060200180831161396c57829003601f168201915b505050505061356b90919063ffffffff16565b9015156139df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139d6919061483b565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000613ac28360000183613db3565b905092915050565b6000808284019050838110151515613b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0e9061485d565b60405180910390fd5b8091505092915050565b6000613b308360000183613cbc565b905092915050565b600081600001805490509050919050565b6000613b8b83836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613e4b565b905092915050565b6000613bd583836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613eb0565b905092915050565b60008383111582901515613c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c1e919061483b565b60405180910390fd5b5060008385039050809150509392505050565b60008260000182815481101515613c4d57fe5b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015613cb057602002820191906000526020600020905b815481526020019060010190808311613c9c575b50505050509050919050565b600080836001016000848152602001908152602001600020549050600081141515613da75760006001820390506000600186600001805490500390508181141515613d5d5760008660000182815481101515613d1457fe5b90600052602060002001549050808760000184815481101515613d3357fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054801515613d6c57fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613dad565b60009150505b92915050565b6000613dbf8383613e28565b1515613e1d578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050613e22565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080831182901515613e94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e8b919061483b565b60405180910390fd5b5060008385811515613ea257fe5b049050809150509392505050565b60008083141582901515613efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ef1919061483b565b60405180910390fd5b508284811515613f0657fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f10613f665750613f85565b601f016020900490600052602060002090810190613f849190614129565b5b50565b5080546000825590600052602060002090810190613fa6919061414e565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613fea57805160ff1916838001178555614018565b82800160010185558215614018579182015b82811115614017578251825591602001919060010190613ffc565b5b5090506140259190614129565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061406a57803560ff1916838001178555614098565b82800160010185558215614098579182015b8281111561409757823582559160200191906001019061407c565b5b5090506140a59190614129565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106140ea57805160ff1916838001178555614118565b82800160010185558215614118579182015b828111156141175782518255916020019190600101906140fc565b5b5090506141259190614129565b5090565b61414b91905b8082111561414757600081600090555060010161412f565b5090565b90565b61417091905b8082111561416c576000816000905550600101614154565b5090565b90565b600061417f8235614a67565b905092915050565b60006141938235614a79565b905092915050565b60008083601f84011215156141af57600080fd5b8235905067ffffffffffffffff8111156141c857600080fd5b6020830191508360018202830111156141e057600080fd5b9250929050565b600082601f83011215156141fa57600080fd5b815161420d6142088261497d565b614950565b9150808252602083016020830185838301111561422957600080fd5b614234838284614aae565b50505092915050565b60006142498235614a92565b905092915050565b60006020828403121561426357600080fd5b600061427184828501614173565b91505092915050565b6000806040838503121561428d57600080fd5b600061429b85828601614173565b92505060206142ac85828601614187565b9150509250929050565b6000806000604084860312156142cb57600080fd5b60006142d986828701614173565b935050602084013567ffffffffffffffff8111156142f657600080fd5b6143028682870161419b565b92509250509250925092565b6000806040838503121561432157600080fd5b600061432f85828601614173565b92505060206143408582860161423d565b9150509250929050565b6000806000806060858703121561436057600080fd5b600061436e87828801614173565b945050602061437f8782880161423d565b935050604085013567ffffffffffffffff81111561439c57600080fd5b6143a88782880161419b565b925092505092959194509250565b6000806000606084860312156143cb57600080fd5b60006143d986828701614173565b93505060206143ea8682870161423d565b92505060406143fb8682870161423d565b9150509250925092565b6000806020838503121561441857600080fd5b600083013567ffffffffffffffff81111561443257600080fd5b61443e8582860161419b565b92509250509250929050565b60008060006040848603121561445f57600080fd5b600084013567ffffffffffffffff81111561447957600080fd5b614485868287","0161419b565b935093505060206144988682870161423d565b9150509250925092565b6000602082840312156144b457600080fd5b600082015167ffffffffffffffff8111156144ce57600080fd5b6144da848285016141e7565b91505092915050565b600080604083850312156144f657600080fd5b60006145048582860161423d565b92505060206145158582860161423d565b9150509250929050565b61452881614a09565b82525050565b6000614539826149c3565b80845260208401935061454b836149a9565b60005b8281101561457d5761456186835161451f565b61456a826149ef565b915060208601955060018101905061454e565b50849250505092915050565b6000614594826149ce565b808452602084019350836020820285016145ad856149b6565b60005b848110156145e65783830388526145c883835161464b565b92506145d3826149fc565b91506020880197506001810190506145b0565b508196508694505050505092915050565b61460081614a1b565b82525050565b61460f81614a9c565b82525050565b6000614620826149e4565b808452614634816020860160208601614aae565b61463d81614ae1565b602085010191505092915050565b6000614656826149d9565b80845261466a816020860160208601614aae565b61467381614ae1565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b61471e81614a5d565b82525050565b6000602082019050614739600083018461451f565b92915050565b60006020820190508181036000830152614759818461452e565b905092915050565b6000604082019050818103600083015261477b818561452e565b905061478a60208301846145f7565b9392505050565b600060208201905081810360008301526147ab8184614589565b905092915050565b600060408201905081810360008301526147cd8185614589565b90506147dc60208301846145f7565b9392505050565b60006020820190506147f860008301846145f7565b92915050565b60006020820190506148136000830184614606565b92915050565b60006020820190508181036000830152614833818461464b565b905092915050565b600060208201905081810360008301526148558184614615565b905092915050565b6000602082019050818103600083015261487681614681565b9050919050565b60006020820190508181036000830152614896816146b8565b9050919050565b60006020820190506148b26000830184614715565b92915050565b60006040820190506148cd6000830185614715565b6148da6020830184614715565b9392505050565b600060e0820190506148f6600083018a614715565b6149036020830189614715565b6149106040830188614715565b61491d6060830187614715565b61492a6080830186614715565b61493760a0830185614715565b61494460c0830184614715565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561497357600080fd5b8060405250919050565b600067ffffffffffffffff82111561499457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000614a1482614a3d565b9050919050565b60008115159050919050565b6000600582101515614a3557fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614a7282614a3d565b9050919050565b6000600582101515614a8a57600080fd5b819050919050565b6000819050919050565b6000614aa782614a27565b9050919050565b60005b83811015614acc578082015181840152602081019050614ab1565b83811115614adb576000848401525b50505050565b6000601f19601f830116905091905056fe667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820067cda3c957e7f36c5e194396a18782424bce12ae8b2b12575c4aa00fcb92bdc6c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b50604051602080620057128339810180604052620000579190810190620009be565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b505062000b70565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002436040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002215780601f10620001f55761010080835404028352916020019162000221565b820191906000526020600020905b8154815290600101906020018083116200020357829003601f168201915b5050505050620004176401000000000262003331179091906401000000009004565b90151562000289576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000280919062000a6b565b60405180910390fd5b50620002a981620004e76401000000000262003715176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620002f69291906200089b565b50620003da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200038057600080fd5b505afa15801562000395573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620003c09190810190620009ea565b620008886401000000000262003a87176401000000009004565b6003819055506000600354141562000414577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b606082826040516020018083805190602001908083835b6020831015156200045557805182526020820191506020810190506020830392506200042e565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515620004aa578051825260208201915060208101905060208303925062000483565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200062e6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200060c5780601f10620005e0576101008083540402835291602001916200060c565b820191906000526020600020905b815481529060010190602001808311620005ee57829003601f168201915b5050505050620004176401000000000262003331179091906401000000009004565b90151562000674576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200066b919062000a6b565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200078160606040519081016040528060218152602001620056f16021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200075f5780601f1062000733576101008083540402835291602001916200075f565b820191906000526020600020905b8154815290600101906020018083116200074157829003601f168201915b5050505050620004176401000000000262003331179091906401000000009004565b901515620007c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620007be919062000a6b565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008de57805160ff19168380011785556200090f565b828001600101855582156200090f579182015b828111156200090e578251825591602001919060010190620008f1565b5b5090506200091e919062000922565b5090565b6200094791905b808211156200094357600081600090555060010162000929565b5090565b90565b600062000958825162000b15565b905092915050565b600082601f83011215156200097457600080fd5b81516200098b620009858262000abd565b62000a8f565b91508082526020830160208301858383011115620009a857600080fd5b620009b583828462000b29565b50505092915050565b600060208284031215620009d157600080fd5b6000620009e1848285016200094a565b91505092915050565b600060208284031215620009fd57600080fd5b600082015167ffffffffffffffff81111562000a1857600080fd5b62000a268482850162000960565b91505092915050565b600062000a3c8262000aea565b80845262000a5281602086016020860162000b29565b62000a5d8162000b5f565b602085010191505092915050565b6000602082019050818103600083015262000a87818462000a2f565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171562000ab357600080fd5b8060405250919050565b600067ffffffffffffffff82111562000ad557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b228262000af5565b9050919050565b60005b8381101562000b4957808201518184015260208101905062000b2c565b8381111562000b59576000848401525b50505050565b6000601f19601f8301169050919050565b614b718062000b806000396000f3fe608060405260043610610336576000357c0100000000000000000000000000000000000000000000000000000000900480636ddff751116101c8578063bbe5a34911610114578063d4b04114116100b2578063e5abcf421161008c578063e5abcf4214610cf6578063f73e56de14610d33578063fca4f58114610d5c578063fdc4793914610d8757610336565b8063d4b0411414610c67578063d8a68b9714610c90578063e083e56a14610cb957610336565b8063c2293169116100ee578063c229316914610b85578063c54d178814610bb0578063d0613a5f14610bed578063d088ee6c14610c2a57610336565b8063bbe5a34914610ae2578063bca1443114610b0b578063c116b3ba14610b4857610336565b806399ad5feb11610181578063ad76e2851161015b578063ad76e28514610a13578063af5cea6014610a51578063af8b608f14610a8e578063b2236b6414610ab957610336565b806399ad5feb146109965780639fba14be146109bf578063a7e01a46146109ea57610336565b80636ddff751146108505780637279e3cd1461088d5780639145e95d146108ca57806391726a991461090757806395bf0d2814610930578063977b65901461096d57610336565b80633eab5fba116102875780634c65d4f01161024057806352fa65f41161021a57806352fa65f41461079857806354007ca1146107c1578063576047f0146107fe5780636cfb83ab1461082757610336565b80634c65d4f0146106ed5780634d31cdbf146107305780635089e2c81461076d57610336565b80633eab5fba146105cd5780633f903c6b1461060a578063405ad4451461063557806341a64fa11461065e57806348cee0be146106875780634b17e3bb146106c457610336565b80631650051c116102f4578063278604d9116102ce578063278604d9146105145780632817fe6a1461053d5780632f25d7f4146105665780633b8268301461058f57610336565b80631650051c146104715780631a822aa01461049a5780632617f1a5146104d757610336565b8062b07a0c1461033b57806305282c7014610364578063060c35091461038d578063091d0757146103cb5780630ec991c2146104095780631505dbd214610434575b600080fd5b34801561034757600080fd5b50610362600480360361035d919081019061430e565b610db0565b005b34801561037057600080fd5b5061038b60048036036103869190810190614251565b610dfe565b005b34801561039957600080fd5b506103b460048036036103af91908101906143b6565b61118c565b6040516103c29291906147b3565b60405180910390f35b3480156103d757600080fd5b506103f260048036036103ed91908101906144e3565b611375565b604051610400929190614761565b60405180910390f35b34801561041557600080fd5b5061041e61149b565b60405161042b9190614724565b60405180910390f35b34801561044057600080fd5b5061045b60048036036104569190810190614405565b6114c1565b604051610468919061489d565b60405180910390f35b34801561047d57600080fd5b5061","","","000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156124b757600080fd5b505afa1580156124cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124f491908101906144a2565b613a87565b60038190555060006003541415612532577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600301549050919050565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b0191906125d5929190614029565b50505050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600301819055505050565b606061263560076136ae565b905090565b60008282604051808383808284378083019250505092505050604051809103902090506126ae81600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020613a9a90919063ffffffff16565b508282600a600084815260200190815260200160002091906126d1929190614029565b5050505050565b606060006126e4613f10565b6126f86126f16007613637565b8686613412565b9050600061272a826060015161271c6001856080015161356290919063ffffffff16565b6135ac90919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156127615781602001602082028038833980820191505090505b50905060008090505b83604001518110156127e35761278c818401600761364c90919063ffffffff16565b828281518110151561279a57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061276a565b50808360200151846080015114945094505050509250929050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600401549050919050565b60006128596007613637565b905090565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900460ff16156129916040805190810160405280600c81526020017f3a206e6f6465206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561297e5780601f106129535761010080835404028352916020019161297e565b820191906000526020600020905b81548152906001019060200180831161296157829003601f168201915b505050505061333190919063ffffffff16565b9015156129d4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129cb919061483b565b60405180910390fd5b5060c060405190810160405280600160048111156129ee57fe5b815260200160e060405190810160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525081526020016040805190810160405280868152602001600081525081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836004811115612b0957fe5b0217905550602082015181600101600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505060408201518160080160008201518160000155602082015181600101555050606082015181600a0155608082015181600b019080519060200190612ba49291906140a9565b5060a082015181600c0160006101000a81548160ff021916908315150217905550905050612bdc8460056136ce90919063ffffffff16565b5050505050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101819055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c0160009054906101000a900460ff169050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d795780601f10612d4e57610100808354040283529160200191612d79565b820191906000526020600020905b815481529060010190602001808311612d5c57829003601f168201915b505050505081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160000154600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801600101541115612e1e5760009050612ebe565b612ebb600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160010154600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016000015461356290919063ffffffff16565b90505b919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801600101549050919050565b6000612f28826007613ab190919063ffffffff16565b9050919050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600501819055505050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a01819055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101549050919050565b6000613060600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206133fd565b9050919050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600601819055505050565b60006130c16005613637565b905090565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008016000015461316482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160010154613ae190919063ffffffff16565b11156132486040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132355780601f1061320a57610100808354040283529160200191613235565b820191906000526020600020905b81548152906001019060200180831161321857829003601f168201915b505050505061333190919063ffffffff16565b90151561328b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613282919061483b565b60405180910390fd5b506132e481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060080160010154613ae190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801600101819055505050565b606082826040516020018083805190602001908083835b60208310151561336d5780518252602082019150602081019050602083039250613348565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156133c0578051825260208201915060208101905060208303925061339b565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061340b82600001613b38565b9050919050565b61341a613f10565b613422613f10565b60a06040519081016040528086815260200160008152602001600081526020016000815260200160018152509050600085148061345f5750600084145b1561346d578091505061355b565b6032841161347b578361347e565b60325b81","","0161419b565b935093505060206144988682870161423d565b9150509250925092565b6000602082840312156144b457600080fd5b600082015167ffffffffffffffff8111156144ce57600080fd5b6144da848285016141e7565b91505092915050565b600080604083850312156144f657600080fd5b60006145048582860161423d565b92505060206145158582860161423d565b9150509250929050565b61452881614a09565b82525050565b6000614539826149c3565b80845260208401935061454b836149a9565b60005b8281101561457d5761456186835161451f565b61456a826149ef565b915060208601955060018101905061454e565b50849250505092915050565b6000614594826149ce565b808452602084019350836020820285016145ad856149b6565b60005b848110156145e65783830388526145c883835161464b565b92506145d3826149fc565b91506020880197506001810190506145b0565b508196508694505050505092915050565b61460081614a1b565b82525050565b61460f81614a9c565b82525050565b6000614620826149e4565b808452614634816020860160208601614aae565b61463d81614ae1565b602085010191505092915050565b6000614656826149d9565b80845261466a816020860160208601614aae565b61467381614ae1565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61471e81614a5d565b82525050565b6000602082019050614739600083018461451f565b92915050565b60006020820190508181036000830152614759818461452e565b905092915050565b6000604082019050818103600083015261477b818561452e565b905061478a60208301846145f7565b9392505050565b600060208201905081810360008301526147ab8184614589565b905092915050565b600060408201905081810360008301526147cd8185614589565b90506147dc60208301846145f7565b9392505050565b60006020820190506147f860008301846145f7565b92915050565b60006020820190506148136000830184614606565b92915050565b60006020820190508181036000830152614833818461464b565b905092915050565b600060208201905081810360008301526148558184614615565b905092915050565b6000602082019050818103600083015261487681614681565b9050919050565b60006020820190508181036000830152614896816146de565b9050919050565b60006020820190506148b26000830184614715565b92915050565b60006040820190506148cd6000830185614715565b6148da6020830184614715565b9392505050565b600060e0820190506148f6600083018a614715565b6149036020830189614715565b6149106040830188614715565b61491d6060830187614715565b61492a6080830186614715565b61493760a0830185614715565b61494460c0830184614715565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff8211171561497357600080fd5b8060405250919050565b600067ffffffffffffffff82111561499457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000614a1482614a3d565b9050919050565b60008115159050919050565b6000600582101515614a3557fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614a7282614a3d565b9050919050565b6000600582101515614a8a57600080fd5b819050919050565b6000819050919050565b6000614aa782614a27565b9050919050565b60005b83811015614acc578082015181840152602081019050614ab1565b83811115614adb576000848401525b50505050565b6000601f19601f830116905091905056fe667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820c18081486bb66ba8e6f3c77402aa33a5da68bfcdce04d435f510659ecb9064f36c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTaskAddFileFinishCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskAcceptTimeoutCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNodeCidsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodeCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOnlineNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setOfflineCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMaintainCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"totalSpace\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNodeOnline\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteOnlineNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOnlineNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskTimeoutCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTaskAddFileFailCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getAddFileFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTaskDeleteFileFinishCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageFree\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaintainCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNodeCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNodeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageSpaceInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getOfflineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setAddFileFailedCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllOnlineNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTaskAcceptTimeoutCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskAddFileFailCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"cidExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalOnlineNodeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskDeleteFileFinishCount\",\"outputs\":[],\"payable\":false,\"stateMutability","\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getServiceInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addNodeCid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"setMaxFinishedTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTaskTimeoutCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"removeNodeCid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskAddFileFinishCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMaxFinishedTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETTASKADDFILEFINISHCOUNT = "getTaskAddFileFinishCount";

    public static final String FUNC_SETTASKACCEPTTIMEOUTCOUNT = "setTaskAcceptTimeoutCount";

    public static final String FUNC_GETNODECIDSNUMBER = "getNodeCidsNumber";

    public static final String FUNC_GETNODECIDS = "getNodeCids";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETALLONLINENODEADDRESSES = "getAllOnlineNodeAddresses";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_SETOFFLINECOUNT = "setOfflineCount";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETMAINTAINCOUNT = "getMaintainCount";

    public static final String FUNC_NEWNODE = "newNode";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_ISNODEONLINE = "isNodeOnline";

    public static final String FUNC_DELETEONLINENODE = "deleteOnlineNode";

    public static final String FUNC_ADDONLINENODE = "addOnlineNode";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_SETTASKTIMEOUTCOUNT = "setTaskTimeoutCount";

    public static final String FUNC_GETTASKADDFILEFAILCOUNT = "getTaskAddFileFailCount";

    public static final String FUNC_GETADDFILEFAILEDCOUNT = "getAddFileFailedCount";

    public static final String FUNC_GETALLNODEADDRESSES = "getAllNodeAddresses";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETTASKDELETEFILEFINISHCOUNT = "getTaskDeleteFileFinishCount";

    public static final String FUNC_GETSTORAGEFREE = "getStorageFree";

    public static final String FUNC_SETMAINTAINCOUNT = "setMaintainCount";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_GETTOTALNODENUMBER = "getTotalNodeNumber";

    public static final String FUNC_GETSTORAGESPACEINFO = "getStorageSpaceInfo";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_GETOFFLINECOUNT = "getOfflineCount";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_SETADDFILEFAILEDCOUNT = "setAddFileFailedCount";

    public static final String FUNC_GETTASKACCEPTTIMEOUTCOUNT = "getTaskAcceptTimeoutCount";

    public static final String FUNC_SETTASKADDFILEFAILCOUNT = "setTaskAddFileFailCount";

    public static final String FUNC_CIDEXIST = "cidExist";

    public static final String FUNC_GETTOTALONLINENODENUMBER = "getTotalOnlineNodeNumber";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_SETTASKDELETEFILEFINISHCOUNT = "setTaskDeleteFileFinishCount";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETSERVICEINFO = "getServiceInfo";

    public static final String FUNC_ADDNODECID = "addNodeCid";

    public static final String FUNC_FREESTORAGE = "freeStorage";

    public static final String FUNC_USESTORAGE = "useStorage";

    public static final String FUNC_SETMAXFINISHEDTID = "setMaxFinishedTid";

    public static final String FUNC_GETTASKTIMEOUTCOUNT = "getTaskTimeoutCount";

    public static final String FUNC_REMOVENODECID = "removeNodeCid";

    public static final String FUNC_SETTASKADDFILEFINISHCOUNT = "setTaskAddFileFinishCount";

    public static final String FUNC_GETMAXFINISHEDTID = "getMaxFinishedTid";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected NodeStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getTaskAddFileFinishCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETTASKADDFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setTaskAcceptTimeoutCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskAcceptTimeoutCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskAcceptTimeoutCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetTaskAcceptTimeoutCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKACCEPTTIMEOUTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getNodeCidsNumber(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETNODECIDSNUMBER, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<String>, Boolean> getNodeCids(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODECIDS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAllOnlineNodeAddresses() throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINENODEADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getStorageUsed(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setStatus(String addr, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatus(String addr, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatus(String addr, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt deleteNode(String addr) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteNode(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteNode(String addr) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOfflineCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETOFFLINECOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOfflineCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOFFLINECOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOfflineCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETOFFLINECOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetOfflineCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOFFLINECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getStatus(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getMaintainCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETMAINTAINCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt newNode(String node, BigInteger totalSpace, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new Address(node),
                new Uint256(totalSpace),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newNode(String node, BigInteger totalSpace, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new Address(node),
                new Uint256(totalSpace),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewNode(String node, BigInteger totalSpace, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new Address(node),
                new Uint256(totalSpace),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getNewNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isNodeOnline(String addr) throws ContractException {
        final Function function = new Function(FUNC_ISNODEONLINE, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteOnlineNode(String addr) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteOnlineNode(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOnlineNode(String addr) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteOnlineNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt addOnlineNode(String addr) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addOnlineNode(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOnlineNode(String addr) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddOnlineNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean exist(String addr) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt setTaskTimeoutCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskTimeoutCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskTimeoutCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetTaskTimeoutCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKTIMEOUTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getTaskAddFileFailCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETTASKADDFILEFAILCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAddFileFailedCount(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<String>, Boolean> getAllNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getTaskDeleteFileFinishCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETTASKDELETEFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getStorageFree(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEFREE, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaintainCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAINTAINCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaintainCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAINTAINCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaintainCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAINTAINCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetMaintainCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAINTAINCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List getNodeCids(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETNODECIDS, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getStorageTotal(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getTotalNodeNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALNODENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<BigInteger, BigInteger> getStorageSpaceInfo(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGESPACEINFO, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger getOfflineCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETOFFLINECOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setStorageTotal(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setAddFileFailedCount(String cid, BigInteger count) {
        final Function function = new Function(
                FUNC_SETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(count)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileFailedCount(String cid, BigInteger count, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(count)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileFailedCount(String cid, BigInteger count) {
        final Function function = new Function(
                FUNC_SETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(count)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetAddFileFailedCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getAllOnlineNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINENODEADDRESSES, 
                Arrays.<Type>asList(new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getTaskAcceptTimeoutCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETTASKACCEPTTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setTaskAddFileFailCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFAILCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskAddFileFailCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFAILCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskAddFileFailCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFAILCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetTaskAddFileFailCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKADDFILEFAILCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Boolean cidExist(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_CIDEXIST, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getTotalOnlineNodeNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALONLINENODENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getAllNodeAddresses() throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setTaskDeleteFileFinishCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKDELETEFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskDeleteFileFinishCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKDELETEFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskDeleteFileFinishCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKDELETEFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetTaskDeleteFileFinishCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKDELETEFILEFINISHCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String getExt(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getServiceInfo(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSERVICEINFO, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue());
    }

    public TransactionReceipt addNodeCid(String addr, String cid) {
        final Function function = new Function(
                FUNC_ADDNODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addNodeCid(String addr, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDNODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddNodeCid(String addr, String cid) {
        final Function function = new Function(
                FUNC_ADDNODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddNodeCidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDNODECID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt freeStorage(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeStorage(String addr, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeStorage(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt useStorage(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] useStorage(String addr, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUseStorage(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUseStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setMaxFinishedTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETMAXFINISHEDTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxFinishedTid(String addr, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXFINISHEDTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxFinishedTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETMAXFINISHEDTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetMaxFinishedTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXFINISHEDTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getTaskTimeoutCount(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETTASKTIMEOUTCOUNT, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt removeNodeCid(String addr, String cid) {
        final Function function = new Function(
                FUNC_REMOVENODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] removeNodeCid(String addr, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVENODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveNodeCid(String addr, String cid) {
        final Function function = new Function(
                FUNC_REMOVENODECID, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveNodeCidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVENODECID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setTaskAddFileFinishCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskAddFileFinishCount(String addr, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskAddFileFinishCount(String addr, BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKADDFILEFINISHCOUNT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetTaskAddFileFinishCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKADDFILEFINISHCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getMaxFinishedTid(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETMAXFINISHEDTID, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static NodeStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NodeStorage(contractAddress, client, credential);
    }

    public static NodeStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_manager)));
        return deploy(NodeStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
