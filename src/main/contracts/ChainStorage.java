package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ChainStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50600033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260156101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506178e280620001026000396000f3fe60806040526004361061020b576000357c01000000000000000000000000000000000000000000000000000000009004806375d0c0dc1161012a578063b824d698116100bd578063d3ca59571161008c578063d3ca595714610c57578063d5c2c8ca14610cdd578063dccbad6114610cf4578063e9ecacd514610d84578063fcbc7f8614610ddf5761020b565b8063b824d69814610a9f578063bbd9f06914610b25578063c4d66de814610bb5578063d0ebdbe714610c065761020b565b80638aed3c32116100f95780638aed3c32146109bb5780638da5cb5b146109f657806391fb28ce14610a4d5780639eecc3f514610a645761020b565b806375d0c0dc1461085357806377ca36ae146108e3578063881d97dc146108fa57806388f8c55d146109805761020b565b80633855ae4e116101a25780634e783fc3116101715780634e783fc31461075b5780635c975abb146107ae5780635eb4ec2f146107dd578063638fe19d146108185761020b565b80633855ae4e146105e1578063405aaf62146105f8578063437a82a81461067e578063481c6a75146107045761020b565b806316c38b3c116101de57806316c38b3c1461035f57806321f8a7211461039c5780632ab3d263146104175780632df5c33c146104f25761020b565b806303fab5d61461021057806304f3bcec1461024b578063126779c2146102a257806313af40351461030e575b600080fd5b34801561021c57600080fd5b506102496004803603602081101561023357600080fd5b8101908080359060200190929190505050610df6565b005b34801561025757600080fd5b506102606111f2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ae57600080fd5b506102b7611218565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102fa5780820151818401526020810190506102df565b505050509050019250505060405180910390f35b34801561031a57600080fd5b5061035d6004803603602081101561033157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611270565b005b34801561036b57600080fd5b5061039a6004803603602081101561038257600080fd5b810190808035151590602001909291905050506116c8565b005b3480156103a857600080fd5b506103d5600480360360208110156103bf57600080fd5b8101908080359060200190929190505050611923565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042357600080fd5b506104f06004803603604081101561043a57600080fd5b810190808035906020019064010000000081111561045757600080fd5b82018360208201111561046957600080fd5b8035906020019184600183028401116401000000008311171561048b57600080fd5b9091929391929390803590602001906401000000008111156104ac57600080fd5b8201836020820111156104be57600080fd5b803590602001918460018302840111640100000000831117156104e057600080fd5b9091929391929390505050611960565b005b3480156104fe57600080fd5b506105df6004803603608081101561051557600080fd5b810190808035906020019064010000000081111561053257600080fd5b82018360208201111561054457600080fd5b8035906020019184600183028401116401000000008311171561056657600080fd5b909192939192939080359060200190929190803590602001909291908035906020019064010000000081111561059b57600080fd5b8201836020820111156105ad57600080fd5b803590602001918460018302840111640100000000831117156105cf57600080fd5b9091929391929390505050611a88565b005b3480156105ed57600080fd5b506105f6611ef9565b005b34801561060457600080fd5b5061067c6004803603602081101561061b57600080fd5b810190808035906020019064010000000081111561063857600080fd5b82018360208201111561064a57600080fd5b8035906020019184600183028401116401000000008311171561066c57600080fd5b90919293919293905050506122ec565b005b34801561068a57600080fd5b50610702600480360360208110156106a157600080fd5b81019080803590602001906401000000008111156106be57600080fd5b8201836020820111156106d057600080fd5b803590602001918460018302840111640100000000831117156106f257600080fd5b9091929391929390505050612715565b005b34801561071057600080fd5b50610719612d73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076757600080fd5b506107946004803603602081101561077e57600080fd5b8101908080359060200190929190505050612d99565b604051808215151515815260200191505060405180910390f35b3480156107ba57600080fd5b506107c36131be565b604051808215151515815260200191505060405180910390f35b3480156107e957600080fd5b506108166004803603602081101561080057600080fd5b81019080803590602001909291905050506131d1565b005b34801561082457600080fd5b506108516004803603602081101561083b57600080fd5b81019080803590602001909291905050506135cd565b005b34801561085f57600080fd5b506108686139c9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108a857808201518184015260208101905061088d565b50505050905090810190601f1680156108d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108ef57600080fd5b506108f8613a67565b005b34801561090657600080fd5b5061097e6004803603602081101561091d57600080fd5b810190808035906020019064010000000081111561093a57600080fd5b82018360208201111561094c57600080fd5b8035906020019184600183028401116401000000008311171561096e57600080fd5b9091929391929390505050613e5a565b005b34801561098c57600080fd5b506109b9600480360360208110156109a357600080fd5b8101908080359060200190929190505050614283565b005b3480156109c757600080fd5b506109f4600480360360208110156109de57600080fd5b810190808035906020019092919050505061467f565b005b348015610a0257600080fd5b50610a0b6149a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a5957600080fd5b50610a626149cb565b005b348015610a7057600080fd5b50610a9d60048036036020811015610a8757600080fd5b8101908080359060200190929190505050614dbe565b005b348015610aab57600080fd5b50610b2360048036036020811015610ac257600080fd5b8101908080359060200190640100000000811115610adf57600080fd5b820183602082011115610af157600080fd5b80359060200191846001830284011164010000000083111715610b1357600080fd5b90919293919293905050506151ba565b005b348015610b3157600080fd5b50610bb360048036036040811015610b4857600080fd5b8101908080359060200190640100000000811115610b6557600080fd5b820183602082011115610b7757600080fd5b80359060200191846001830284011164010000000083111715610b9957600080fd5b9091929391929390803590602001909291905050506152ac565b005b348015610bc157600080fd5b50610c0460048036036020811015610bd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506153a7565b005b348015610c1257600080fd5b50610c5560048036036020811015610c2957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506156ab565b005b348015610c6357600080fd5b50610cdb60048036036020811015610c7a57600080fd5b8101908080359060200190640100000000811115610c9757600080fd5b820183602082011115610ca957600080fd5b80359060200191846001830284011164010000000083111715610ccb57600080fd5b9091929391929390505050615ae7565b005b348015610ce957600080fd5b50610cf2615f10565b005b348015610d0057600080fd5b50610d8260048036036040811015610d1757600080fd5b810190808035906020019092919080359060200190640100000000811115610d3e57600080fd5b820183602082011115610d5057600080fd5b80359060200191846001830284011164010000000083111715610d7257600080fd5b9091929391929390505050616249565b005b348015610d9057600080fd5b50610ddd60048036036040811015610da757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061667b565b005b348015610deb57600080fd5b50610df4616cd5565b005b600260149054906101000a900460ff16610ee86040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b50505050506170c890919063ffffffff16565b901515610f90576040517f08c379a0000000000000","","9054906101000a900460ff16611feb6040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fd85780601f10611fad57610100808354040283529160200191611fd8565b820191906000526020600020905b815481529060010190602001808311611fbb57829003601f168201915b50505050506170c890919063ffffffff16565b901515612093576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561205857808201518184015260208101905061203d565b50505050905090810190601f1680156120855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff16156121876040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121745780601f1061214957610100808354040283529160200191612174565b820191906000526020600020905b81548152906001019060200180831161215757829003601f168201915b50505050506170c890919063ffffffff16565b90151561222f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121f45780820151818401526020810190506121d9565b50505050905090810190601f1680156122215780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506122386171f4565b73ffffffffffffffffffffffffffffffffffffffff1663037c5d7f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156122d257600080fd5b505af11580156122e6573d6000803e3d6000fd5b50505050565b600260149054906101000a900460ff166123de6040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123cb5780601f106123a0576101008083540402835291602001916123cb565b820191906000526020600020905b8154815290600101906020018083116123ae57829003601f168201915b50505050506170c890919063ffffffff16565b901515612486576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561244b578082015181840152602081019050612430565b50505050905090810190601f1680156124785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff161561257a6040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125675780601f1061253c57610100808354040283529160200191612567565b820191906000526020600020905b81548152906001019060200180831161254a57829003601f168201915b50505050506170c890919063ffffffff16565b901515612622576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156125e75780820151818401526020810190506125cc565b50505050905090810190601f1680156126145780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061262b6171c4565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b1580156126f957600080fd5b505af115801561270d573d6000803e3d6000fd5b505050505050565b600260149054906101000a900460ff166128076040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127f45780601f106127c9576101008083540402835291602001916127f4565b820191906000526020600020905b8154815290600101906020018083116127d757829003601f168201915b50505050506170c890919063ffffffff16565b9015156128af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612874578082015181840152602081019050612859565b50505050905090810190601f1680156128a15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff16156129a36040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129905780601f1061296557610100808354040283529160200191612990565b820191906000526020600020905b81548152906001019060200180831161297357829003601f168201915b50505050506170c890919063ffffffff16565b901515612a4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a105780820151818401526020810190506129f5565b50505050905090810190601f168015612a3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612a54617224565b73ffffffffffffffffffffffffffffffffffffffff1663de249e716040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612ab557600080fd5b505afa158015612ac9573d6000803e3d6000fd5b505050506040513d6020811015612adf57600080fd5b8101908080519060200190929190505050828290501115612bd86040805190810160405280600e81526020017f3a2065787420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bc55780601f10612b9a57610100808354040283529160200191612bc5565b820191906000526020600020905b815481529060010190602001808311612ba857829003601f168201915b50505050506170c890919063ffffffff16565b901515612c80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612c45578082015181840152602081019050612c2a565b50505050905090810190601f168015612c725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612c896171f4565b73ffffffffffffffffffffffffffffffffffffffff166332434a2e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015612d5757600080fd5b505af1158015612d6b573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260149054906101000a900460ff16612e8d6040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e7a5780601f10612e4f57610100808354040283529160200191612e7a565b820191906000526020600020905b815481529060010190602001808311612e5d57829003601f168201915b50505050506170c890919063ffffffff16565b901515612f35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612efa578082015181840152602081019050612edf565b505050","","","838360005b83811015614f1d578082015181840152602081019050614f02565b50505050905090810190601f168015614f4a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff161561504c6040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156150395780601f1061500e57610100808354040283529160200191615039565b820191906000526020600020905b81548152906001019060200180831161501c57829003601f168201915b50505050506170c890919063ffffffff16565b9015156150f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156150b957808201518184015260208101905061509e565b50505050905090810190601f1680156150e65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506150fd617254565b73ffffffffffffffffffffffffffffffffffffffff1663539ccb3a33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561519f57600080fd5b505af11580156151b3573d6000803e3d6000fd5b5050505050565b6151c2617194565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561529057600080fd5b505af11580156152a4573d6000803e3d6000fd5b505050505050565b6152b46171c4565b73ffffffffffffffffffffffffffffffffffffffff1663af7cdcaf338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561538a57600080fd5b505af115801561539e573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146154da6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154c75780601f1061549c576101008083540402835291602001916154c7565b820191906000526020600020905b8154815290600101906020018083116154aa57829003601f168201915b50505050506170c890919063ffffffff16565b901515615582576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561554757808201518184015260208101905061552c565b50505050905090810190601f1680156155745780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061558b617284565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506155f57f436861696e53746f726167650000000000000000000000000000000000000000617443565b6080604051908101604052807f557365720000000000000000000000000000000000000000000000000000000081526020017f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f5461736b0000000000000000000000000000000000000000000000000000000081526020017f4d6f6e69746f720000000000000000000000000000000000000000000000000081525060049060046156a792919061777e565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146157de6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157cb5780601f106157a0576101008083540402835291602001916157cb565b820191906000526020600020905b8154815290600101906020018083116157ae57829003601f168201915b50505050506170c890919063ffffffff16565b901515615886576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561584b578082015181840152602081019050615830565b50505050905090810190601f1680156158785780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561597e606060405190810160405280602181526020016178966021913960008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561596b5780601f106159405761010080835404028352916020019161596b565b820191906000526020600020905b81548152906001019060200180831161594e57829003601f168201915b50505050506170c890919063ffffffff16565b901515615a26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156159eb5780820151818401526020810190506159d0565b50505050905090810190601f168015615a185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260149054906101000a900460ff16615bd96040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615bc65780601f10615b9b57610100808354040283529160200191615bc6565b820191906000526020600020905b815481529060010190602001808311615ba957829003601f168201915b50505050506170c890919063ffffffff16565b901515615c81576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615c46578082015181840152602081019050615c2b565b50505050905090810190601f168015615c735780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff1615615d756040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615d625780601f10615d3757610100808354040283529160200191615d62565b820191906000526020600020905b815481529060010190602001808311615d4557829003601f168201915b50505050506170c890919063ffffffff16565b901515615e1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615de2578082015181840152602081019050615dc7565b50505050905090810190601f168015615e0f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50615e266171c4565b73ffffffffffffffffffffffffffffffffffffffff1663101f51063384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015615ef457600080fd5b505af1158015615f08","","0316600290048015616f505780601f10616f2557610100808354040283529160200191616f50565b820191906000526020600020905b815481529060010190602001808311616f3357829003601f168201915b50505050506170c890919063ffffffff16565b90151561700b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015616fd0578082015181840152602081019050616fb5565b50505050905090810190601f168015616ffd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50617014617194565b73ffffffffffffffffffffffffffffffffffffffff1663037c5d7f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156170ae57600080fd5b505af11580156170c2573d6000803e3d6000fd5b50505050565b606082826040516020018083805190602001908083835b60208310151561710457805182526020820191506020810190506020830392506170df565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156171575780518252602082019150602081019050602083039250617132565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006171bf7f4e6f64650000000000000000000000000000000000000000000000000000000061747c565b905090565b60006171ef7f557365720000000000000000000000000000000000000000000000000000000061747c565b905090565b600061721f7f4d6f6e69746f720000000000000000000000000000000000000000000000000061747c565b905090565b600061724f7f53657474696e670000000000000000000000000000000000000000000000000061747c565b905090565b600061727f7f5461736b0000000000000000000000000000000000000000000000000000000061747c565b905090565b60001515600260149054906101000a900460ff1615151461737d6040805190810160405280601581526020017f3a20616c726561647920696e697469616c697a6564000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561736a5780601f1061733f5761010080835404028352916020019161736a565b820191906000526020600020905b81548152906001019060200180831161734d57829003601f168201915b50505050506170c890919063ffffffff16565b901515617425576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156173ea5780820151818401526020810190506173cf565b50505050905090810190601f1680156174175780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260146101000a81548160ff021916908315150217905550565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906174789291906177cb565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156175c56040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156175b15780601f10617586576101008083540402835291602001916175b1565b820191906000526020600020905b81548152906001019060200180831161759457829003601f168201915b50505050506176a99092919063ffffffff16565b90151561766d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015617632578082015181840152602081019050617617565b50505050905090810190601f16801561765f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60608383836040516020018084805190602001908083835b6020831015156176e657805182526020820191506020810190506020830392506176c1565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156177395780518252602082019150602081019050602083039250617714565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b8280548282559060005260206000209081019282156177ba579160200282015b828111156177b957825182559160200191906001019061779e565b5b5090506177c7919061784b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061780c57805160ff191683800117855561783a565b8280016001018555821561783a579182015b8281111561783957825182559160200191906001019061781e565b5b5090506178479190617870565b5090565b61786d91905b80821115617869576000816000905550600101617851565b5090565b90565b61789291905b8082111561788e576000816000905550600101617876565b5090565b9056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a165627a7a72305820d7100a669e9efd671f88b060bda755903e16ca90dcadd71e35c00650a395d4620029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","1615612fe16040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fce5780601f10612fa357610100808354040283529160200191612fce565b820191906000526020600020905b815481529060010190602001808311612fb157829003601f168201915b50505050506170c890919063ffffffff16565b901515613089576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561304e578082015181840152602081019050613033565b50505050905090810190601f16801561307b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613092617194565b73ffffffffffffffffffffffffffffffffffffffff16636f0eae4133836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561313457600080fd5b505af1158015613148573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132826040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561326f5780601f106132445761010080835404028352916020019161326f565b820191906000526020600020905b81548152906001019060200180831161325257829003601f168201915b50505050506170c890919063ffffffff16565b90151561332a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156132ef5780820151818401526020810190506132d4565b50505050905090810190601f16801561331c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156133ba57600080fd5b505afa1580156133ce573d6000803e3d6000fd5b505050506040513d60208110156133e457600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600260149054906101000a900460ff166135676040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135545780601f1061352957610100808354040283529160200191613554565b820191906000526020600020905b81548152906001019060200180831161353757829003601f168201915b50505050506170c890919063ffffffff16565b90151561360f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156135d45780820151818401526020810190506135b9565b50505050905090810190601f1680156136015780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff16156137036040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136f05780601f106136c5576101008083540402835291602001916136f0565b820191906000526020600020905b8154815290600101906020018083116136d357829003601f168201915b50505050506170c890919063ffffffff16565b9015156137ab576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613770578082015181840152602081019050613755565b50505050905090810190601f16801561379d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506137b4617194565b73ffffffffffffffffffffffffffffffffffffffff1663856ebe9e33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561385657600080fd5b505af115801561386a573d6000803e3d6000fd5b5050505050565b600260149054906101000a900460ff166139636040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139505780601f1061392557610100808354040283529160200191613950565b820191906000526020600020905b81548152906001019060200180831161393357829003601f168201915b50505050506170c890919063ffffffff16565b901515613a0b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139d05780820151818401526020810190506139b5565b50505050905090810190601f1680156139fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff1615613aff6040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613aec5780601f10613ac157610100808354040283529160200191613aec565b820191906000526020600020905b815481529060010190602001808311613acf57829003601f168201915b50505050506170c890919063ffffffff16565b901515613ba7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613b6c578082015181840152602081019050613b51565b50505050905090810190601f168015613b995780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50613bb0617194565b73ffffffffffffffffffffffffffffffffffffffff16633df7ffeb338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015613c8657600080fd5b505af1158015613c9a573d6000803e3d6000fd5b50505050505050565b600260149054906101000a900460ff16613d956040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d825780601f10613d5757610100808354040283529160200191613d82565b820191906000526020600020905b815481529060010190602001808311613d6557829003601f168201915b50505050506170c890919063ffffffff16565b901515613e3d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613e02578082015181840152602081019050613de7565b50505050905090810190601f168015613e2f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600260159054906101000a900460ff1615613f316040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f1e5780601f10613ef357610100808354040283529160200191613f1e565b82019190600052602060","","","","57600080fd5b505afa158015616f17573d6000803e3d6000fd5b505050506040513d6020811015616f2d57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050616e49565b50565b616fa86171c4565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79633868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b1580156170aa57600080fd5b505af11580156170be573d6000803e3d6000fd5b5050505050505050565b606082826040516020018083805190602001908083835b60208310151561710457805182526020820191506020810190506020830392506170df565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156171575780518252602082019150602081019050602083039250617132565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006171bf7f4e6f64650000000000000000000000000000000000000000000000000000000061747c565b905090565b60006171ef7f557365720000000000000000000000000000000000000000000000000000000061747c565b905090565b60001515600260149054906101000a900460ff161515146172ed6040805190810160405280601581526020017f3a20616c726561647920696e697469616c697a6564000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156172da5780601f106172af576101008083540402835291602001916172da565b820191906000526020600020905b8154815290600101906020018083116172bd57829003601f168201915b50505050506170c890919063ffffffff16565b901515617395576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561735a57808201518184015260208101905061733f565b50505050905090810190601f1680156173875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260146101000a81548160ff021916908315150217905550565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906173e89291906177cb565b5050565b60006174177f4d6f6e69746f720000000000000000000000000000000000000000000000000061747c565b905090565b60006174477f5461736b0000000000000000000000000000000000000000000000000000000061747c565b905090565b60006174777f53657474696e670000000000000000000000000000000000000000000000000061747c565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156175c56040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156175b15780601f10617586576101008083540402835291602001916175b1565b820191906000526020600020905b81548152906001019060200180831161759457829003601f168201915b50505050506176a99092919063ffffffff16565b90151561766d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015617632578082015181840152602081019050617617565b50505050905090810190601f16801561765f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60608383836040516020018084805190602001908083835b6020831015156176e657805182526020820191506020810190506020830392506176c1565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156177395780518252602082019150602081019050602083039250617714565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b8280548282559060005260206000209081019282156177ba579160200282015b828111156177b957825182559160200191906001019061779e565b5b5090506177c7919061784b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061780c57805160ff191683800117855561783a565b8280016001018555821561783a579182015b8281111561783957825182559160200191906001019061781e565b5b5090506178479190617870565b5090565b61786d91905b80821115617869576000816000905550600101617851565b5090565b90565b61789291905b8082111561788e576000816000905550600101617876565b5090565b9056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a165627a7a72305820f93c682874c988e39763d51e12b6a3a47c2154d5aa6cea4dde7c49d1791d230c0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"nodeFailTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monitorMaintain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"monitorRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorCheckTask\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"changeNodeSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"nodeFinishTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeOnline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorResetCurrentTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monitorOnline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"nodeAcceptTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userSetFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"userDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"space\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"changeUserSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeMaintain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_NODEFAILTASK = "nodeFailTask";

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETPAUSED = "setPaused";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_USERSETFILEEXT = "userSetFileExt";

    public static final String FUNC_USERADDFILE = "userAddFile";

    public static final String FUNC_MONITORMAINTAIN = "monitorMaintain";

    public static final String FUNC_USERSETEXT = "userSetExt";

    public static final String FUNC_MONITORREGISTER = "monitorRegister";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MONITORCHECKTASK = "monitorCheckTask";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_CHANGENODESPACE = "changeNodeSpace";

    public static final String FUNC_NODEFINISHTASK = "nodeFinishTask";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NODEONLINE = "nodeOnline";

    public static final String FUNC_USERREGISTER = "userRegister";

    public static final String FUNC_MONITORRESETCURRENTTID = "monitorResetCurrentTid";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_MONITORONLINE = "monitorOnline";

    public static final String FUNC_NODEACCEPTTASK = "nodeAcceptTask";

    public static final String FUNC_NODESETEXT = "nodeSetExt";

    public static final String FUNC_USERSETFILEDURATION = "userSetFileDuration";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_USERDELETEFILE = "userDeleteFile";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_NODEREGISTER = "nodeRegister";

    public static final String FUNC_CHANGEUSERSPACE = "changeUserSpace";

    public static final String FUNC_NODEMAINTAIN = "nodeMaintain";

    public static final Event PAUSECHANGED_EVENT = new Event("PauseChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected ChainStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt nodeFailTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeFailTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeFailTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeFailTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setPaused(Boolean _paused) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setPaused(Boolean _paused, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPaused(Boolean _paused) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getSetPausedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt userSetFileExt(String cid, String ext) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetFileExt(String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetFileExt(String cid, String ext) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUserSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt userAddFile(String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userAddFile(String cid, BigInteger size, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserAddFile(String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getUserAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt monitorMaintain() {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorMaintain(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorMaintain() {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt userSetExt(String ext) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetExt(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetExt(String ext) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt monitorRegister(String ext) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorRegister(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorRegister(String ext) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getMonitorRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt monitorCheckTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorCheckTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorCheckTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorCheckTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getMonitorCheckTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean paused() throws ContractException {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt changeNodeSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_CHANGENODESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeNodeSpace(BigInteger space, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGENODESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeNodeSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_CHANGENODESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getChangeNodeSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGENODESPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeFinishTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeFinishTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeFinishTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeFinishTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeOnline() {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeOnline(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeOnline() {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt userRegister(String ext) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userRegister(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserRegister(String ext) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt monitorResetCurrentTid(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorResetCurrentTid(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorResetCurrentTid(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorResetCurrentTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt monitorOnline() {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorOnline(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorOnline() {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeAcceptTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeAcceptTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeAcceptTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeAcceptTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeSetExt(String ext) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeSetExt(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeSetExt(String ext) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getNodeSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODESETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt userSetFileDuration(String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetFileDuration(String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetFileDuration(String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUserSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt initialize(String _resolver) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initialize(String _resolver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitialize(String _resolver) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitializeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt userDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userDeleteFile(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeRegister(BigInteger space, String ext) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeRegister(BigInteger space, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeRegister(BigInteger space, String ext) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getNodeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt changeUserSpace(String addr, BigInteger space) {
        final Function function = new Function(
                FUNC_CHANGEUSERSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeUserSpace(String addr, BigInteger space, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEUSERSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeUserSpace(String addr, BigInteger space) {
        final Function function = new Function(
                FUNC_CHANGEUSERSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getChangeUserSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEUSERSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt nodeMaintain() {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeMaintain(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeMaintain() {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<PauseChangedEventResponse> getPauseChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSECHANGED_EVENT, transactionReceipt);
        ArrayList<PauseChangedEventResponse> responses = new ArrayList<PauseChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseChangedEventResponse typedResponse = new PauseChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribePauseChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribePauseChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ChainStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ChainStorage(contractAddress, client, credential);
    }

    public static ChainStorage deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ChainStorage.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class PauseChangedEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean previousValue;

        public Boolean newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
