package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Task extends Contract {
    public static final String[] BINARY_ARRAY = {"","565b820191906000526020600020905b815481529060010190602001808311610d5257829003601f168201915b5050505050614ce390919063ffffffff16565b901515610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc91906157b1565b60405180910390fd5b506000610dd0614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e2491906157d3565b60206040518083038186803b158015610e3c57600080fd5b505afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e749190810190615192565b9050806005811115610e8257fe5b60016005811115610e8f57fe5b14610f726040805190810160405280601d81526020017f3a207461736b20737461747573206973206e6f7420416363657074656400000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b5050505050614ce390919063ffffffff16565b901515610fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fac91906157b1565b60405180910390fd5b50610fbe614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da846004426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611017939291906157ee565b600060405180830381600087803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b50505050827ffd474bc433c956cd3127eb98ca0734c3aa7fdbdf0687b7a2a8360f420ce1865f60044260405161107c9291906156e8565b60405180910390a2505050565b6000611093614aff565b73ffffffffffffffffffffffffffffffffffffffff1663117f02d7836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110e791906157d3565b60206040518083038186803b1580156110ff57600080fd5b505afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111379190810190615313565b9050919050565b6060600480548060200260200160405190810160405280929190818152602001828054801561118c57602002820191906000526020600020905b815481526020019060010190808311611178575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112c96040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b5050505050614ce390919063ffffffff16565b90151561130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130391906157b1565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114206040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561140d5780601f106113e25761010080835404028352916020019161140d565b820191906000526020600020905b8154815290600101906020018083116113f057829003601f168201915b5050505050614ce390919063ffffffff16565b901515611463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145a91906157b1565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061152f614aff565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161158391906157d3565b604080518083038186803b15801561159a57600080fd5b505afa1580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d291908101906151bb565b91509150915091565b60008060008060606115eb614aff565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161163f91906157d3565b60006040518083038186803b15801561165757600080fd5b505afa15801561166b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506116949190810190614f6b565b9450945094509450945091939590929450565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6116ed81614b0e565b60006116f7614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161174b91906157d3565b60206040518083038186803b15801561176357600080fd5b505afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061179b9190810190615192565b90508060058111156117a957fe5b600060058111156117b657fe5b146118996040805190810160405280601c81526020017f3a207461736b20737461747573206973206e6f7420437265617465640000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118865780601f1061185b57610100808354040283529160200191611886565b820191906000526020600020905b81548152906001019060200180831161186957829003601f168201915b5050505050614ce390919063ffffffff16565b9015156118dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d391906157b1565b60405180910390fd5b506118e5614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da836002426040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161193e939291906157ee565b600060405180830381600087803b15801561195857600080fd5b505af115801561196c573d6000803e3d6000fd5b50505050817ffd474bc433c956cd3127eb98ca0734c3aa7fdbdf0687b7a2a8360f420ce1865f6002426040516119a39291906156e8565b60405180910390a25050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ae56040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ad25780601f10611aa757610100808354040283529160200191611ad2565b820191906000526020600020905b815481529060010190602001808311611ab557829003601f168201915b5050505050614ce390919063ffffffff16565b901515611b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1f91906157b1565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611b5b614aff565b73ffffffffffffffffffffffffffffffffffffffff1663344bc9fb836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611baf91906157d3565b60206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bff9190810190615313565b9050919050565b6060611c10614aff565b73ffffffffffffffffffffffffffffffffffffffff16633beaa6ab836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c6491906157d3565b60006040518083038186803b158015611c7c57600080fd5b505afa158015611c90573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611cb991908101906152a9565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611cf0614aff565b73ffffffffffffffffffffffffffffffffffffffff16634ebbc92a836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d4491906157d3","565b60206040518083038186803b158015611d5c57600080fd5b505afa158015611d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d949190810190615085565b9050919050565b6000611da5614aff565b73ffffffffffffffffffffffffffffffffffffffff16634f0f4aa9836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611df991906157d3565b60206040518083038186803b158015611e1157600080fd5b505afa158015611e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e499190810190614f42565b9050919050565b611e5981614b0e565b6000611e63614aff565b73ffffffffffffffffffffffffffffffffffffffff16634f0f4aa9836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611eb791906157d3565b60206040518083038186803b158015611ecf57600080fd5b505afa158015611ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f079190810190614f42565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461201a6040805190810160405280601881526020017f3a206e6f64652068617665206e6f2074686973207461736b000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120075780601f10611fdc57610100808354040283529160200191612007565b820191906000526020600020905b815481529060010190602001808311611fea57829003601f168201915b5050505050614ce390919063ffffffff16565b90151561205d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205491906157b1565b60405180910390fd5b506000612068614aff565b73ffffffffffffffffffffffffffffffffffffffff1663b6e76873846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120bc91906157d3565b60206040518083038186803b1580156120d457600080fd5b505afa1580156120e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061210c91908101906150d7565b90506000612118614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161216c91906157d3565b60206040518083038186803b15801561218457600080fd5b505afa158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121bc9190810190615192565b90508160018111156121ca57fe5b600060018111156121d757fe5b1415612306578060058111156121e957fe5b600060058111156121f657fe5b146122bd60606040519081016040528060258152602001615af06025913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122aa5780601f1061227f576101008083540402835291602001916122aa565b820191906000526020600020905b81548152906001019060200180831161228d57829003601f168201915b5050505050614ce390919063ffffffff16565b901515612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f791906157b1565b60405180910390fd5b5061246c565b80600581111561231257fe5b6000600581111561231f57fe5b1480612341575080600581111561233257fe5b6002600581111561233f57fe5b145b80612361575080600581111561235357fe5b60058081111561235f57fe5b145b61242760806040519081016040528060438152602001615b156043913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124145780601f106123e957610100808354040283529160200191612414565b820191906000526020600020905b8154815290600101906020018083116123f757829003601f168201915b5050505050614ce390919063ffffffff16565b90151561246a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246191906157b1565b60405180910390fd5b505b612474614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da856001426040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016124cd939291906157ee565b600060405180830381600087803b1580156124e757600080fd5b505af11580156124fb573d6000803e3d6000fd5b50505050837ffd474bc433c956cd3127eb98ca0734c3aa7fdbdf0687b7a2a8360f420ce1865f6001426040516125329291906156e8565b60405180910390a25050505050565b61254a82614b0e565b6000612554614aff565b73ffffffffffffffffffffffffffffffffffffffff16634f0f4aa9846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125a891906157d3565b60206040518083038186803b1580156125c057600080fd5b505afa1580156125d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125f89190810190614f42565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461270b6040805190810160405280601881526020017f3a206e6f64652068617665206e6f2074686973207461736b000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126f85780601f106126cd576101008083540402835291602001916126f8565b820191906000526020600020905b8154815290600101906020018083116126db57829003601f168201915b5050505050614ce390919063ffffffff16565b90151561274e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274591906157b1565b60405180910390fd5b506000612759614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127ad91906157d3565b60206040518083038186803b1580156127c557600080fd5b505afa1580156127d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127fd9190810190615192565b905080600581111561280b57fe5b6001600581111561281857fe5b146128fb6040805190810160405280601d81526020017f3a207461736b20737461747573206973206e6f7420416363657074656400000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128e85780601f106128bd576101008083540402835291602001916128e8565b820191906000526020600020905b8154815290600101906020018083116128cb57829003601f168201915b5050505050614ce390919063ffffffff16565b90151561293e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293591906157b1565b60405180910390fd5b50612947614aff565b73ffffffffffffffffffffffffffffffffffffffff16635d077fe58542866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161299f93929190615825565b600060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b505050505050505050565b60006129e2614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a3691906157d3565b60206040518083038186803b158015612a4e57600080fd5b505afa158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a869190810190615192565b9050919050565b6000612a97614aff565b73ffffffffffffffffffffffffffffffffffffffff166367b329b8836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612aeb91906157d3565b60206040518083038186803b158015612b0357600080fd5b505afa158015612b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b3b9190810190615313565b9050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bd85780601f10612bad57610100808354040283529160200191612bd8565b820191906000526020600020905b815481529060010190602001808311612bbb57829003601f168201915b505050505081565b612be981614b0e565b6000612bf3614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c4791906157d3565b60206040518083038186803b158015612c5f57600080fd5b505afa158015612c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c979190810190615192565b9050806005811115612ca557fe5b60016005811115612cb257fe5b14612d956040805190810160405280601d81526020017f3a207461736b20737461747573206973206e6f7420416363657074656400000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d825780601f10612d57","57610100808354040283529160200191612d82565b820191906000526020600020905b815481529060010190602001808311612d6557829003601f168201915b5050505050614ce390919063ffffffff16565b901515612dd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dcf91906157b1565b60405180910390fd5b50612de1614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da836003426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e3a939291906157ee565b600060405180830381600087803b158015612e5457600080fd5b505af1158015612e68573d6000803e3d6000fd5b50505050817ffd474bc433c956cd3127eb98ca0734c3aa7fdbdf0687b7a2a8360f420ce1865f600342604051612e9f9291906156e8565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612fde6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fcb5780601f10612fa057610100808354040283529160200191612fcb565b820191906000526020600020905b815481529060010190602001808311612fae57829003601f168201915b5050505050614ce390919063ffffffff16565b901515613021576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301891906157b1565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613099919061567c565b60206040518083038186803b1580156130b157600080fd5b505afa1580156130c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506130e99190810190614f42565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132c26040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132af5780601f10613284576101008083540402835291602001916132af565b820191906000526020600020905b81548152906001019060200180831161329257829003601f168201915b5050505050614ce390919063ffffffff16565b901515613305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132fc91906157b1565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6133cf82614b0e565b60006133d9614aff565b73ffffffffffffffffffffffffffffffffffffffff16634f0f4aa9846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161342d91906157d3565b60206040518083038186803b15801561344557600080fd5b505afa158015613459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061347d9190810190614f42565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146135906040805190810160405280601881526020017f3a206e6f64652068617665206e6f2074686973207461736b000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561357d5780601f106135525761010080835404028352916020019161357d565b820191906000526020600020905b81548152906001019060200180831161356057829003601f168201915b5050505050614ce390919063ffffffff16565b9015156135d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ca91906157b1565b60405180910390fd5b5060006135de614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161363291906157d3565b60206040518083038186803b15801561364a57600080fd5b505afa15801561365e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136829190810190615192565b905080600581111561369057fe5b6001600581111561369d57fe5b146137806040805190810160405280601d81526020017f3a207461736b20737461747573206973206e6f7420416363657074656400000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561376d5780601f106137425761010080835404028352916020019161376d565b820191906000526020600020905b81548152906001019060200180831161375057829003601f168201915b5050505050614ce390919063ffffffff16565b9015156137c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137ba91906157b1565b60405180910390fd5b506137cc614aff565b73ffffffffffffffffffffffffffffffffffffffff1663cd12d54a8542866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161382493929190615825565b600060405180830381600087803b15801561383e57600080fd5b505af1158015613852573d6000803e3d6000fd5b505050505050505050565b600080613868614aff565b73ffffffffffffffffffffffffffffffffffffffff1663e3cc74f8888a8989888a6040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016138c6969594939291906155e3565b602060405180830381600087803b1580156138e057600080fd5b505af11580156138f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506139189190810190615313565b9050808473ffffffffffffffffffffffffffffffffffffffff167fe0f704081705ae0bfc1d02ebb379c95742e4984fb7c2e77016a969fdc878619260405160405180910390a3809150509695505050505050565b61397581614b0e565b600061397f614aff565b73ffffffffffffffffffffffffffffffffffffffff16635c622a0e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139d391906157d3565b60206040518083038186803b1580156139eb57600080fd5b505afa1580156139ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613a239190810190615192565b9050806005811115613a3157fe5b60016005811115613a3e57fe5b14613b216040805190810160405280601d81526020017f3a207461736b20737461747573206973206e6f7420416363657074656400000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b0e5780601f10613ae357610100808354040283529160200191613b0e565b820191906000526020600020905b815481529060010190602001808311613af157829003601f168201915b5050505050614ce390919063ffffffff16565b901515613b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b5b91906157b1565b60405180910390fd5b50613b6d614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da836005426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613bc6939291906157ee565b600060405180830381600087803b158015613be057600080fd5b505af1158015613bf4573d6000803e3d6000fd5b50505050817ffd474bc433c956cd3127eb98ca0734c3aa7fdbdf0687b7a2a8360f420ce1865f600542604051613c2b9291906156e8565b60405180910390a25050565b600080600080600080613c48614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a065b7fa886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c9c91906157d3565b60c06040518083038186803b158015613cb457600080fd5b505afa158015613cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613cec919081019061538b565b95509550955095509550955091939550919395565b613d09614aff565b73ffffffffffffffffffffffffffffffffffffffff1663a89523da8484846040518463ffffffff167c01000000000000000000000000000000","","805190602001908083835b602083101515614d725780518252602082019150602081019050602083039250614d4d565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6000614dbb82356159cf565b905092915050565b6000614dcf82516159cf565b905092915050565b6000614de382516159e1565b905092915050565b6000614df782356159ed565b905092915050565b6000614e0b82356159f7565b905092915050565b6000614e1f82516159f7565b905092915050565b6000614e338235615a10565b905092915050565b6000614e478251615a10565b905092915050565b60008083601f8401121515614e6357600080fd5b8235905067ffffffffffffffff811115614e7c57600080fd5b602083019150836001820283011115614e9457600080fd5b9250929050565b600082601f8301121515614eae57600080fd5b8151614ec1614ebc826158ea565b6158bd565b91508082526020830160208301858383011115614edd57600080fd5b614ee8838284615a8a565b50505092915050565b6000614efd8235615a29565b905092915050565b6000614f118251615a29565b905092915050565b600060208284031215614f2b57600080fd5b6000614f3984828501614daf565b91505092915050565b600060208284031215614f5457600080fd5b6000614f6284828501614dc3565b91505092915050565b600080600080600060a08688031215614f8357600080fd5b6000614f9188828901614dc3565b9550506020614fa288828901614e13565b9450506040614fb388828901614dc3565b9350506060614fc488828901614f05565b925050608086015167ffffffffffffffff811115614fe157600080fd5b614fed88828901614e9b565b9150509295509295909350565b6000806040838503121561500d57600080fd5b600061501b85828601614daf565b925050602061502c85828601614ef1565b9150509250929050565b60008060006060848603121561504b57600080fd5b600061505986828701614daf565b935050602061506a86828701614ef1565b925050604061507b86828701614ef1565b9150509250925092565b60006020828403121561509757600080fd5b60006150a584828501614dd7565b91505092915050565b6000602082840312156150c057600080fd5b60006150ce84828501614deb565b91505092915050565b6000602082840312156150e957600080fd5b60006150f784828501614e13565b91505092915050565b60008060008060008060a0878903121561511957600080fd5b600061512789828a01614dff565b965050602061513889828a01614daf565b955050604087013567ffffffffffffffff81111561515557600080fd5b61516189828a01614e4f565b9450945050606061517489828a01614daf565b925050608061518589828a01614ef1565b9150509295509295509295565b6000602082840312156151a457600080fd5b60006151b284828501614e3b565b91505092915050565b600080604083850312156151ce57600080fd5b60006151dc85828601614e3b565b92505060206151ed85828601614f05565b9150509250929050565b600080600080600080600080610100898b03121561521457600080fd5b60006152228b828c01614e3b565b98505060206152338b828c01614f05565b97505060406152448b828c01614f05565b96505060606152558b828c01614f05565b95505060806152668b828c01614f05565b94505060a06152778b828c01614f05565b93505060c06152888b828c01614f05565b92505060e06152998b828c01614f05565b9150509295985092959890939650565b6000602082840312156152bb57600080fd5b600082015167ffffffffffffffff8111156152d557600080fd5b6152e184828501614e9b565b91505092915050565b6000602082840312156152fc57600080fd5b600061530a84828501614ef1565b91505092915050565b60006020828403121561532557600080fd5b600061533384828501614f05565b91505092915050565b60008060006060848603121561535157600080fd5b600061535f86828701614ef1565b935050602061537086828701614e27565b925050604061538186828701614ef1565b9150509250925092565b60008060008060008060c087890312156153a457600080fd5b60006153b289828a01614f05565b96505060206153c389828a01614f05565b95505060406153d489828a01614f05565b94505060606153e589828a01614f05565b93505060806153f689828a01614f05565b92505060a061540789828a01614f05565b9150509295509295509295565b61541d81615951565b82525050565b600061542e82615923565b80845260208401935061544083615916565b60005b828110156154725761545686835161548d565b61545f82615944565b9150602086019550600181019050615443565b50849250505092915050565b61548781615963565b82525050565b6154968161596f565b82525050565b6154a581615a33565b82525050565b6154b481615a57565b82525050565b6154c381615a69565b82525050565b60008284526020840193506154df838584615a7b565b6154e883615abd565b840190509392505050565b60006154fe82615939565b808452615512816020860160208601615a8a565b61551b81615abd565b602085010191505092915050565b60006155348261592e565b808452615548816020860160208601615a8a565b61555181615abd565b602085010191505092915050565b615568816159c5565b82525050565b60006020820190506155836000830184615414565b92915050565b600060a08201905061559e6000830188615414565b6155ab60208301876154ab565b6155b86040830186615414565b6155c5606083018561555f565b81810360808301526155d781846154f3565b90509695505050505050565b600060a0820190506155f86000830189615414565b61560560208301886154ab565b81810360408301526156188186886154c9565b9050615627606083018561555f565b6156346080830184615414565b979650505050505050565b600060208201905081810360008301526156598184615423565b905092915050565b6000602082019050615676600083018461547e565b92915050565b6000602082019050615691600083018461548d565b92915050565b60006020820190506156ac600083018461549c565b92915050565b60006020820190506156c760008301846154ab565b92915050565b60006020820190506156e260008301846154ba565b92915050565b60006040820190506156fd60008301856154ba565b61570a602083018461555f565b9392505050565b600061010082019050615727600083018b6154ba565b615734602083018a61555f565b615741604083018961555f565b61574e606083018861555f565b61575b608083018761555f565b61576860a083018661555f565b61577560c083018561555f565b61578260e083018461555f565b9998505050505050505050565b600060208201905081810360008301526157a98184615529565b905092915050565b600060208201905081810360008301526157cb81846154f3565b905092915050565b60006020820190506157e8600083018461555f565b92915050565b6000606082019050615803600083018661555f565b61581060208301856154ba565b61581d604083018461555f565b949350505050565b600060608201905061583a600083018661555f565b615847602083018561555f565b615854604083018461555f565b949350505050565b600060c082019050615871600083018961555f565b61587e602083018861555f565b61588b604083018761555f565b615898606083018661555f565b6158a5608083018561555f565b6158b260a083018461555f565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156158e057600080fd5b8060405250919050565b600067ffffffffffffffff82111561590157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061595c826159a5565b9050919050565b60008115159050919050565b6000819050919050565b600060028210151561598757fe5b819050919050565b600060068210151561599d57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006159da826159a5565b9050919050565b60008115159050919050565b6000819050919050565b6000600282101515615a0857600080fd5b819050919050565b6000600682101515615a2157600080fd5b819050919050565b6000819050919050565b6000615a3e82615a45565b9050919050565b6000615a50826159a5565b9050919050565b6000615a6282615979565b9050919050565b6000615a748261598f565b9050919050565b82818337600083830152505050565b60005b83811015615aa8578082015181840152602081019050615a8d565b83811115615ab7576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f20616464726573733a206164642066696c65207461736b20737461747573206973206e6f7420437265617465643a2064656c6574652066696c65207461736b20737461747573206973206e6f7420696e205b437265617465642c41636365707454696d656f75742c54696d656f75745da265627a7a723058209de07c6c50e5b93822d330060480bffd63a457f4031077c5eebef13d2b310ed56c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","","2001808311614d3857829003601f168201915b5050505050614aff90919063ffffffff16565b901515614dab576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614da291906157b1565b60405180910390fd5b5050565b6000614dbb82356159cf565b905092915050565b6000614dcf82516159cf565b905092915050565b6000614de382516159e1565b905092915050565b6000614df782356159ed565b905092915050565b6000614e0b82356159f7565b905092915050565b6000614e1f82516159f7565b905092915050565b6000614e338235615a10565b905092915050565b6000614e478251615a10565b905092915050565b60008083601f8401121515614e6357600080fd5b8235905067ffffffffffffffff811115614e7c57600080fd5b602083019150836001820283011115614e9457600080fd5b9250929050565b600082601f8301121515614eae57600080fd5b8151614ec1614ebc826158ea565b6158bd565b91508082526020830160208301858383011115614edd57600080fd5b614ee8838284615a8a565b50505092915050565b6000614efd8235615a29565b905092915050565b6000614f118251615a29565b905092915050565b600060208284031215614f2b57600080fd5b6000614f3984828501614daf565b91505092915050565b600060208284031215614f5457600080fd5b6000614f6284828501614dc3565b91505092915050565b600080600080600060a08688031215614f8357600080fd5b6000614f9188828901614dc3565b9550506020614fa288828901614e13565b9450506040614fb388828901614dc3565b9350506060614fc488828901614f05565b925050608086015167ffffffffffffffff811115614fe157600080fd5b614fed88828901614e9b565b9150509295509295909350565b6000806040838503121561500d57600080fd5b600061501b85828601614daf565b925050602061502c85828601614ef1565b9150509250929050565b60008060006060848603121561504b57600080fd5b600061505986828701614daf565b935050602061506a86828701614ef1565b925050604061507b86828701614ef1565b9150509250925092565b60006020828403121561509757600080fd5b60006150a584828501614dd7565b91505092915050565b6000602082840312156150c057600080fd5b60006150ce84828501614deb565b91505092915050565b6000602082840312156150e957600080fd5b60006150f784828501614e13565b91505092915050565b60008060008060008060a0878903121561511957600080fd5b600061512789828a01614dff565b965050602061513889828a01614daf565b955050604087013567ffffffffffffffff81111561515557600080fd5b61516189828a01614e4f565b9450945050606061517489828a01614daf565b925050608061518589828a01614ef1565b9150509295509295509295565b6000602082840312156151a457600080fd5b60006151b284828501614e3b565b91505092915050565b600080604083850312156151ce57600080fd5b60006151dc85828601614e3b565b92505060206151ed85828601614f05565b9150509250929050565b600080600080600080600080610100898b03121561521457600080fd5b60006152228b828c01614e3b565b98505060206152338b828c01614f05565b97505060406152448b828c01614f05565b96505060606152558b828c01614f05565b95505060806152668b828c01614f05565b94505060a06152778b828c01614f05565b93505060c06152888b828c01614f05565b92505060e06152998b828c01614f05565b9150509295985092959890939650565b6000602082840312156152bb57600080fd5b600082015167ffffffffffffffff8111156152d557600080fd5b6152e184828501614e9b565b91505092915050565b6000602082840312156152fc57600080fd5b600061530a84828501614ef1565b91505092915050565b60006020828403121561532557600080fd5b600061533384828501614f05565b91505092915050565b60008060006060848603121561535157600080fd5b600061535f86828701614ef1565b935050602061537086828701614e27565b925050604061538186828701614ef1565b9150509250925092565b60008060008060008060c087890312156153a457600080fd5b60006153b289828a01614f05565b96505060206153c389828a01614f05565b95505060406153d489828a01614f05565b94505060606153e589828a01614f05565b93505060806153f689828a01614f05565b92505060a061540789828a01614f05565b9150509295509295509295565b61541d81615951565b82525050565b600061542e82615923565b80845260208401935061544083615916565b60005b828110156154725761545686835161548d565b61545f82615944565b9150602086019550600181019050615443565b50849250505092915050565b61548781615963565b82525050565b6154968161596f565b82525050565b6154a581615a33565b82525050565b6154b481615a57565b82525050565b6154c381615a69565b82525050565b60008284526020840193506154df838584615a7b565b6154e883615abd565b840190509392505050565b60006154fe82615939565b808452615512816020860160208601615a8a565b61551b81615abd565b602085010191505092915050565b60006155348261592e565b808452615548816020860160208601615a8a565b61555181615abd565b602085010191505092915050565b615568816159c5565b82525050565b60006020820190506155836000830184615414565b92915050565b600060a08201905061559e6000830188615414565b6155ab60208301876154ab565b6155b86040830186615414565b6155c5606083018561555f565b81810360808301526155d781846154f3565b90509695505050505050565b600060a0820190506155f86000830189615414565b61560560208301886154ab565b81810360408301526156188186886154c9565b9050615627606083018561555f565b6156346080830184615414565b979650505050505050565b600060208201905081810360008301526156598184615423565b905092915050565b6000602082019050615676600083018461547e565b92915050565b6000602082019050615691600083018461548d565b92915050565b60006020820190506156ac600083018461549c565b92915050565b60006020820190506156c760008301846154ab565b92915050565b60006020820190506156e260008301846154ba565b92915050565b60006040820190506156fd60008301856154ba565b61570a602083018461555f565b9392505050565b600061010082019050615727600083018b6154ba565b615734602083018a61555f565b615741604083018961555f565b61574e606083018861555f565b61575b608083018761555f565b61576860a083018661555f565b61577560c083018561555f565b61578260e083018461555f565b9998505050505050505050565b600060208201905081810360008301526157a98184615529565b905092915050565b600060208201905081810360008301526157cb81846154f3565b905092915050565b60006020820190506157e8600083018461555f565b92915050565b6000606082019050615803600083018661555f565b61581060208301856154ba565b61581d604083018461555f565b949350505050565b600060608201905061583a600083018661555f565b615847602083018561555f565b615854604083018461555f565b949350505050565b600060c082019050615871600083018961555f565b61587e602083018861555f565b61588b604083018761555f565b615898606083018661555f565b6158a5608083018561555f565b6158b260a083018461555f565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156158e057600080fd5b8060405250919050565b600067ffffffffffffffff82111561590157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600061595c826159a5565b9050919050565b60008115159050919050565b6000819050919050565b600060028210151561598757fe5b819050919050565b600060068210151561599d57fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006159da826159a5565b9050919050565b60008115159050919050565b6000819050919050565b6000600282101515615a0857600080fd5b819050919050565b6000600682101515615a2157600080fd5b819050919050565b6000819050919050565b6000615a3e82615a45565b9050919050565b6000615a50826159a5565b9050919050565b6000615a6282615979565b9050919050565b6000615a748261598f565b9050919050565b82818337600083830152505050565b60005b83811015615aa8578082015181840152602081019050615a8d565b83811115615ab7576000848401525b50505050565b6000601f19601f830116905091905056fe3a2064656c6574652066696c65207461736b20737461747573206973206e6f7420696e205b437265617465642c41636365707454696d656f75742c54696d656f75745d3a206164642066696c65207461736b20737461747573206973206e6f7420437265617465643a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820626dfecc8cb8c51d038b94546a1a42d7adc757f14c07fc0d988db8854add36d76c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"failTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatusAndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"acceptTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getFailTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"acceptTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"reportAddFileProgressBySize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAcceptTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"finishTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"reportAddFileProgressByPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"issueTask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"taskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAddFileTaskProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStatusAndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCreateBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCreateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAcceptTimeoutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"isOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNodeMaxTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTimeoutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTaskState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"nam","e\":\"node\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"TaskIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETSIZE = "getSize";

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_FAILTASK = "failTask";

    public static final String FUNC_GETFINISHTIME = "getFinishTime";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETSTATUSANDTIME = "getStatusAndTime";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_ACCEPTTASKTIMEOUT = "acceptTaskTimeout";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_GETFAILTIME = "getFailTime";

    public static final String FUNC_GETCID = "getCid";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_ACCEPTTASK = "acceptTask";

    public static final String FUNC_REPORTADDFILEPROGRESSBYSIZE = "reportAddFileProgressBySize";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETACCEPTTIME = "getAcceptTime";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_FINISHTASK = "finishTask";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE = "reportAddFileProgressByPercentage";

    public static final String FUNC_ISSUETASK = "issueTask";

    public static final String FUNC_TASKTIMEOUT = "taskTimeout";

    public static final String FUNC_GETADDFILETASKPROGRESS = "getAddFileTaskProgress";

    public static final String FUNC_SETSTATUSANDTIME = "setStatusAndTime";

    public static final String FUNC_GETCREATEBLOCKNUMBER = "getCreateBlockNumber";

    public static final String FUNC_GETCREATETIME = "getCreateTime";

    public static final String FUNC_GETACTION = "getAction";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_GETACCEPTTIMEOUTTIME = "getAcceptTimeoutTime";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_ISOVER = "isOver";

    public static final String FUNC_GETNODEMAXTID = "getNodeMaxTid";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_GETTIMEOUTTIME = "getTimeoutTime";

    public static final String FUNC_GETTASKSTATE = "getTaskState";

    public static final Event TASKISSUED_EVENT = new Event("TaskIssued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TASKSTATUSCHANGED_EVENT = new Event("TaskStatusChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Task(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getSize(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt failTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] failTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFailTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getFailTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FAILTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getFinishTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETFINISHTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getStatusAndTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public Tuple5<String, BigInteger, String, BigInteger, String> getTask(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, String, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt acceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] acceptTaskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAcceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAcceptTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getFailTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETFAILTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getCid(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String getNode(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt acceptTask(String node, BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] acceptTask(String node, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAcceptTask(String node, BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getAcceptTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt reportAddFileProgressBySize(String addr, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportAddFileProgressBySize(String addr, BigInteger tid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportAddFileProgressBySize(String addr, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getReportAddFileProgressBySizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger getStatus(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAcceptTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACCEPTTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt finishTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] finishTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinishTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getFinishTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINISHTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt reportAddFileProgressByPercentage(String addr, BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportAddFileProgressByPercentage(String addr, BigInteger tid, BigInteger percentage, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportAddFileProgressByPercentage(String addr, BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getReportAddFileProgressByPercentageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt issueTask(BigInteger action, String owner, String cid, String node, BigInteger size) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] issueTask(BigInteger action, String owner, String cid, String node, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueTask(BigInteger action, String owner, String cid, String node, BigInteger size) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, String, BigInteger> getIssueTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUETASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getIssueTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUETASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt taskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] taskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getAddFileTaskProgress(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKPROGRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue());
    }

    public TransactionReceipt setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetStatusAndTimeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger getCreateBlockNumber(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCREATEBLOCKNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCreateTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCREATETIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAction(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACTION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCurrentTid() throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAcceptTimeoutTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACCEPTTIMEOUTTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getOwner(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isOver(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_ISOVER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getNodeMaxTid(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETNODEMAXTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getTimeoutTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTIMEOUTTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getTaskState(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASKSTATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public List<TaskIssuedEventResponse> getTaskIssuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKISSUED_EVENT, transactionReceipt);
        ArrayList<TaskIssuedEventResponse> responses = new ArrayList<TaskIssuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskIssuedEventResponse typedResponse = new TaskIssuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.node = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTaskIssuedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKISSUED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTaskIssuedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKISSUED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TaskStatusChangedEventResponse> getTaskStatusChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKSTATUSCHANGED_EVENT, transactionReceipt);
        ArrayList<TaskStatusChangedEventResponse> responses = new ArrayList<TaskStatusChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskStatusChangedEventResponse typedResponse = new TaskStatusChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.TaskStatusChangedParam0 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTaskStatusChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKSTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTaskStatusChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKSTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Task load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Task(contractAddress, client, credential);
    }

    public static Task deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(Task.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class TaskIssuedEventResponse {
        public TransactionReceipt.Logs log;

        public String node;

        public BigInteger tid;
    }

    public static class TaskStatusChangedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger tid;

        public BigInteger TaskStatusChangedParam0;

        public BigInteger timestamp;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
