package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TaskStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","066000838152602001908152602001600020600401549050919050565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600090506005600084815260200190815260200160002060000160149054906101000a900460ff16600181111561151257fe5b6000600181111561151f57fe5b14156115ae576006600084815260200190815260200160002060000160009054906101000a900460ff16600581111561155457fe5b6000600581111561156157fe5b14806115a657506006600084815260200190815260200160002060000160009054906101000a900460ff16600581111561159757fe5b600160058111156115a457fe5b145b1590506115ee565b6006600084815260200190815260200160002060000160009054906101000a900460ff1660058111156115dd57fe5b600360058111156115ea57fe5b1490505b80915050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b81600760008581526020019081526020016000206000018190555060076000848152602001908152602001600020600501546007600085815260200190815260200160002060040181905550806007600085815260200190815260200160002060050181905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117df6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b5050505050611e1490919063ffffffff16565b901515611822576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118199190612913565b60405180910390fd5b5061182c81611ee0565b6040805190810160405280600781526020017f53746f7261676500000000000000000000000000000000000000000000000000815250600090805190602001906118779291906122bc565b50611941600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156118ff57600080fd5b505afa158015611913573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061193c919081019061258e565b612252565b6003819055506000600354141561197a577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600060066000838152602001908152602001600020600701549050919050565b60006119b5600160045461226590919063ffffffff16565b60048190555060c0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760018111156119ef57fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016001151581525060056000600454815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836001811115611ae757fe5b021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600201556080820151816003019080519060200190611b5992919061233c565b5060a08201518160040160006101000a81548160ff0219169083151502179055509050506101206040519081016040528060006005811115611b9757fe5b815260200143815260200142815260200160008152602001600081526020016000815260200160008152602001600081526020016001151581525060066000600454815260200190815260200160002060008201518160000160006101000a81548160ff02191690836005811115611c0b57fe5b02179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff021916908315150217905550905050856001811115611c8657fe5b60006001811115611c9357fe5b1415611d4b5760e06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250600760006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083151502179055509050505b600454600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060045490509695505050505050565b6000806000806000806000806000600660008b815260200190815260200160002090508060000160009054906101000a900460ff1681600101548260020154836003015484600401548560050154866006015487600701549850985098509850985098509850985050919395975091939597565b606082826040516020018083805190602001908083835b602083101515611e505780518252602082019150602081019050602083039250611e2b565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515611ea35780518252602082019150602081019050602083039250611e7e565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120136040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120005780601f10611fd557610100808354040283529160200191612000565b820191906000526020600020905b815481529060010190602001808311611fe357829003601f168201915b5050505050611e1490919063ffffffff16565b901515612056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204d9190612913565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561214e60606040519081016040528060218152602001612b6b6021913960008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561213b5780601f106121105761010080835404028352916020019161213b565b820191906000526020600020905b81548152906001019060200180831161211e57829003601f168201915b5050505050611e1490919063ffffffff16565b901515612191576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121889190612913565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b60008082840190508381101515156122b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a990612935565b60405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106122fd57805160ff191683800117855561232b565b8280016001018555821561232b579182015b8281111561232a57825182559160200191906001019061230f565b5b50905061233891906123bc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061237d57805160ff19168380011785556123ab565b828001600101855582156123ab579182015b828111156123aa57825182559160200191906001019061238f565b5b5090506123b891906123bc565b5090565b6123de91905b808211156123da5760008160009055506001016123c2565b5090565b90565b60006123ed8235612ab4565b905092915050565b60006124018235612ac6565b905092915050565b60006124158235612adf565b905092915050565b60008083601f840112151561243157600080fd5b8235905067ffffffffffffffff81111561244a57600080fd5b60208301915083600182028301111561246257600080fd5b9250929050565b600082601f830112151561247c57600080fd5b815161","248f61248a826129fe565b6129d1565b915080825260208301602083018583830111156124ab57600080fd5b6124b6838284612b26565b50505092915050565b60006124cb8235612af8565b905092915050565b6000602082840312156124e557600080fd5b60006124f3848285016123e1565b91505092915050565b60008060008060008060a0878903121561251557600080fd5b600061252389828a016123e1565b965050602061253489828a016123f5565b955050604087013567ffffffffffffffff81111561255157600080fd5b61255d89828a0161241d565b9450945050606061257089828a016124bf565b925050608061258189828a016123e1565b9150509295509295509295565b6000602082840312156125a057600080fd5b600082015167ffffffffffffffff8111156125ba57600080fd5b6125c684828501612469565b91505092915050565b6000602082840312156125e157600080fd5b60006125ef848285016124bf565b91505092915050565b60008060006060848603121561260d57600080fd5b600061261b868287016124bf565b935050602061262c86828701612409565b925050604061263d868287016124bf565b9150509250925092565b60008060006060848603121561265c57600080fd5b600061266a868287016124bf565b935050602061267b868287016124bf565b925050604061268c868287016124bf565b9150509250925092565b61269f81612a40565b82525050565b6126ae81612a52565b82525050565b6126bd81612b02565b82525050565b6126cc81612b14565b82525050565b60006126dd82612a35565b8084526126f1816020860160208601612b26565b6126fa81612b59565b602085010191505092915050565b600061271382612a2a565b808452612727816020860160208601612b26565b61273081612b59565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61277e81612aaa565b82525050565b60006020820190506127996000830184612696565b92915050565b600060a0820190506127b46000830188612696565b6127c160208301876126b4565b6127ce6040830186612696565b6127db6060830185612775565b81810360808301526127ed81846126d2565b90509695505050505050565b600060208201905061280e60008301846126a5565b92915050565b600060208201905061282960008301846126b4565b92915050565b600060208201905061284460008301846126c3565b92915050565b600060408201905061285f60008301856126c3565b61286c6020830184612775565b9392505050565b600061010082019050612889600083018b6126c3565b612896602083018a612775565b6128a36040830189612775565b6128b06060830188612775565b6128bd6080830187612775565b6128ca60a0830186612775565b6128d760c0830185612775565b6128e460e0830184612775565b9998505050505050505050565b6000602082019050818103600083015261290b8184612708565b905092915050565b6000602082019050818103600083015261292d81846126d2565b905092915050565b6000602082019050818103600083015261294e8161273e565b9050919050565b600060208201905061296a6000830184612775565b92915050565b600060c0820190506129856000830189612775565b6129926020830188612775565b61299f6040830187612775565b6129ac6060830186612775565b6129b96080830185612775565b6129c660a0830184612775565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156129f457600080fd5b8060405250919050565b600067ffffffffffffffff821115612a1557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b6000612a4b82612a8a565b9050919050565b60008115159050919050565b6000600282101515612a6c57fe5b819050919050565b6000600682101515612a8257fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612abf82612a8a565b9050919050565b6000600282101515612ad757600080fd5b819050919050565b6000600682101515612af057600080fd5b819050919050565b6000819050919050565b6000612b0d82612a5e565b9050919050565b6000612b1f82612a74565b9050919050565b60005b83811015612b44578082015181840152602081019050612b29565b83811115612b53576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820e9d1066c427ddb5e319443df5ecf37f9a666a0d3adf65d7856ddda1ffb227b916c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b50604051602080620037668339810180604052620000579190810190620009be565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b505062000b70565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002436040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002215780601f10620001f55761010080835404028352916020019162000221565b820191906000526020600020905b8154815290600101906020018083116200020357829003601f168201915b5050505050620004176401000000000262001e14179091906401000000009004565b90151562000289576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040162000280919062000a6b565b60405180910390fd5b50620002a981620004e76401000000000262001f37176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620002f69291906200089b565b50620003da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200038057600080fd5b505afa15801562000395573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620003c09190810190620009ea565b6200088864010000000002620022a9176401000000009004565b6003819055506000600354141562000414577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b606082826040516020018083805190602001908083835b6020831015156200045557805182526020820191506020810190506020830392506200042e565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515620004aa578051825260208201915060208101905060208303925062000483565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200062e6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200060c5780601f10620005e0576101008083540402835291602001916200060c565b820191906000526020600020905b815481529060010190602001808311620005ee57829003601f168201915b5050505050620004176401000000000262001e14179091906401000000009004565b90151562000674576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200066b919062000a6b565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200078160606040519081016040528060218152602001620037456021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156200075f5780601f1062000733576101008083540402835291602001916200075f565b820191906000526020600020905b8154815290600101906020018083116200074157829003601f168201915b5050505050620004176401000000000262001e14179091906401000000009004565b901515620007c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620007be919062000a6b565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008de57805160ff19168380011785556200090f565b828001600101855582156200090f579182015b828111156200090e578251825591602001919060010190620008f1565b5b5090506200091e919062000922565b5090565b6200094791905b808211156200094357600081600090555060010162000929565b5090565b90565b600062000958825162000b15565b905092915050565b600082601f83011215156200097457600080fd5b81516200098b620009858262000abd565b62000a8f565b91508082526020830160208301858383011115620009a857600080fd5b620009b583828462000b29565b50505092915050565b600060208284031215620009d157600080fd5b6000620009e1848285016200094a565b91505092915050565b600060208284031215620009fd57600080fd5b600082015167ffffffffffffffff81111562000a1857600080fd5b62000a268482850162000960565b91505092915050565b600062000a3c8262000aea565b80845262000a5281602086016020860162000b29565b62000a5d8162000b5f565b602085010191505092915050565b6000602082019050818103600083015262000a87818462000a2f565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171562000ab357600080fd5b8060405250919050565b600067ffffffffffffffff82111562000ad557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b228262000af5565b9050919050565b60005b8381101562000b4957808201518184015260208101905062000b2c565b8381111562000b59576000848401525b50505050565b6000601f19601f8301169050919050565b612bc58062000b806000396000f3fe6080604052600436106101ea576000357c010000000000000000000000000000000000000000000000000000000090048063b7dc72ac11610114578063caba1c5f116100b2578063d6f0374d11610081578063d6f0374d146107ab578063d8cba2fd146107d6578063e9de72a114610814578063f70b41f214610851576101ea565b8063caba1c5f146106b7578063cb46da79146106f4578063d055b1e914610731578063d058d3ff1461076e576101ea565b8063c05a72b2116100ee578063c05a72b2146105ca578063c22931691461060b578063c5959fee14610636578063c6ee9f3514610673576101ea565b8063b7dc72ac14610522578063be00f7961461054b578063bef24c4b14610588576101ea565b80635089e2c81161018c578063888885391161015b578063888885391461045657806391726a9914610493578063986cb42d146104bc578063a94427cc146104f9576101ea565b80635089e2c81461037457806351cc900b1461039f5780636074ca4e146103dc578063829e929214610419576101ea565b806324efcd7a116101c857806324efcd7a14610280578063250b8af6146102bd57806327dbb65a146102fa578063410566e114610337576101ea565b806305282c70146101ef5780630ec991c21461021857806317e99c9014610243575b600080fd5b3480156101fb57600080fd5b50610216600480360361021191908101906124d3565b61087a565b005b34801561022457600080fd5b5061022d610c08565b60405161023a9190612784565b60405180910390f35b34801561024f57600080fd5b5061026a600480360361026591908101906125cf565b610c2e565b6040516102779190612784565b60405180910390f35b34801561028c57600080fd5b506102a760048036036102a291908101906125cf565b610c6e565b6040516102b49190612913565b60405180910390f35b3480156102c957600080fd5b506102e460048036036102df91908101906125cf565b610d26565b6040516102f191906127f9565b60405180910390f35b34801561030657600080fd5b50610321600480360361031c91908101906124fc565b610e41565b60405161032e9190612955565b60405180910390f35b34801561034357600080fd5b5061035e600480360361035991908101906124d3565b611244565b60405161036b9190612955565b60405180910390f35b34801561038057600080fd5b5061038961128d565b6040516103969190612784565b60405180910390f35b3480156103ab57600080fd5b506103c660048036036103c191908101906125cf565b6112b3565b6040516103d39190612955565b60405180910390f35b3480156103e857600080fd5b5061040360048036036103fe91908101906125cf565b6112d3565b6040516104109190612955565b60405180910390f35b34801561042557600080fd5b50610440600480360361043b91908101906125cf565b6112f3565b60405161044d9190612784565b60405180910390f35b34801561046257600080fd5b5061047d600480360361047891908101906125cf565b611333565b6040","","","248f61248a826129fe565b6129d1565b915080825260208301602083018583830111156124ab57600080fd5b6124b6838284612b26565b50505092915050565b60006124cb8235612af8565b905092915050565b6000602082840312156124e557600080fd5b60006124f3848285016123e1565b91505092915050565b60008060008060008060a0878903121561251557600080fd5b600061252389828a016123e1565b965050602061253489828a016123f5565b955050604087013567ffffffffffffffff81111561255157600080fd5b61255d89828a0161241d565b9450945050606061257089828a016124bf565b925050608061258189828a016123e1565b9150509295509295509295565b6000602082840312156125a057600080fd5b600082015167ffffffffffffffff8111156125ba57600080fd5b6125c684828501612469565b91505092915050565b6000602082840312156125e157600080fd5b60006125ef848285016124bf565b91505092915050565b60008060006060848603121561260d57600080fd5b600061261b868287016124bf565b935050602061262c86828701612409565b925050604061263d868287016124bf565b9150509250925092565b60008060006060848603121561265c57600080fd5b600061266a868287016124bf565b935050602061267b868287016124bf565b925050604061268c868287016124bf565b9150509250925092565b61269f81612a40565b82525050565b6126ae81612a52565b82525050565b6126bd81612b02565b82525050565b6126cc81612b14565b82525050565b60006126dd82612a35565b8084526126f1816020860160208601612b26565b6126fa81612b59565b602085010191505092915050565b600061271382612a2a565b808452612727816020860160208601612b26565b61273081612b59565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61277e81612aaa565b82525050565b60006020820190506127996000830184612696565b92915050565b600060a0820190506127b46000830188612696565b6127c160208301876126b4565b6127ce6040830186612696565b6127db6060830185612775565b81810360808301526127ed81846126d2565b90509695505050505050565b600060208201905061280e60008301846126a5565b92915050565b600060208201905061282960008301846126b4565b92915050565b600060208201905061284460008301846126c3565b92915050565b600060408201905061285f60008301856126c3565b61286c6020830184612775565b9392505050565b600061010082019050612889600083018b6126c3565b612896602083018a612775565b6128a36040830189612775565b6128b06060830188612775565b6128bd6080830187612775565b6128ca60a0830186612775565b6128d760c0830185612775565b6128e460e0830184612775565b9998505050505050505050565b6000602082019050818103600083015261290b8184612708565b905092915050565b6000602082019050818103600083015261292d81846126d2565b905092915050565b6000602082019050818103600083015261294e8161273e565b9050919050565b600060208201905061296a6000830184612775565b92915050565b600060c0820190506129856000830189612775565b6129926020830188612775565b61299f6040830187612775565b6129ac6060830186612775565b6129b96080830185612775565b6129c660a0830184612775565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156129f457600080fd5b8060405250919050565b600067ffffffffffffffff821115612a1557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b6000612a4b82612a8a565b9050919050565b60008115159050919050565b6000600282101515612a6c57fe5b819050919050565b6000600682101515612a8257fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612abf82612a8a565b9050919050565b6000600282101515612ad757600080fd5b819050919050565b6000600682101515612af057600080fd5b819050919050565b6000819050919050565b6000612b0d82612a5e565b9050919050565b6000612b1f82612a74565b9050919050565b60005b83811015612b44578082015181840152602081019050612b29565b83811115612b53576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a723058201e0d02ce38d7e90652d6af2724228889175168cd43058848d67efe20fa257d456c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatusAndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getFailTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCid\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskProgressBySize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAcceptTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAddFileTaskProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStatusAndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCreateBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getCreateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAcceptTimeoutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"isOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNodeMaxTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskProgressByPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTimeoutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"action\",\"type\":\"uint8\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"newTask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTaskState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETSIZE = "getSize";

    public static final String FUNC_GETFINISHTIME = "getFinishTime";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETSTATUSANDTIME = "getStatusAndTime";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_GETFAILTIME = "getFailTime";

    public static final String FUNC_GETCID = "getCid";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_SETADDFILETASKPROGRESSBYSIZE = "setAddFileTaskProgressBySize";

    public static final String FUNC_GETACCEPTTIME = "getAcceptTime";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETADDFILETASKPROGRESS = "getAddFileTaskProgress";

    public static final String FUNC_SETSTATUSANDTIME = "setStatusAndTime";

    public static final String FUNC_GETCREATEBLOCKNUMBER = "getCreateBlockNumber";

    public static final String FUNC_GETCREATETIME = "getCreateTime";

    public static final String FUNC_GETACTION = "getAction";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_GETACCEPTTIMEOUTTIME = "getAcceptTimeoutTime";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_ISOVER = "isOver";

    public static final String FUNC_GETNODEMAXTID = "getNodeMaxTid";

    public static final String FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE = "setAddFileTaskProgressByPercentage";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETTIMEOUTTIME = "getTimeoutTime";

    public static final String FUNC_NEWTASK = "newTask";

    public static final String FUNC_GETTASKSTATE = "getTaskState";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected TaskStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getSize(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSIZE, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getFinishTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETFINISHTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getStatusAndTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUSANDTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public Tuple5<String, BigInteger, String, BigInteger, String> getTask(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASK, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, String, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public BigInteger getFailTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETFAILTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getCid(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCID, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String getNode(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStatus(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetAddFileTaskProgressBySizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger getAcceptTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACCEPTTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getAddFileTaskProgress(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKPROGRESS, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue());
    }

    public TransactionReceipt setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint8(status),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint8(status),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint8(status),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetStatusAndTimeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger getCreateBlockNumber(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCREATEBLOCKNUMBER, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCreateTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETCREATETIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAction(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACTION, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCurrentTid() throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAcceptTimeoutTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETACCEPTTIMEOUTTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getOwner(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isOver(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_ISOVER, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getNodeMaxTid(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETNODEMAXTID, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(percentage)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(percentage)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new Uint256(tid),
                new Uint256(time),
                new Uint256(percentage)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetAddFileTaskProgressByPercentageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getTimeoutTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTIMEOUTTIME, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt newTask(String owner, BigInteger action, String cid, BigInteger size, String node) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new Address(owner),
                new Uint8(action),
                new Utf8String(cid),
                new Uint256(size),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newTask(String owner, BigInteger action, String cid, BigInteger size, String node, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new Address(owner),
                new Uint8(action),
                new Utf8String(cid),
                new Uint256(size),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewTask(String owner, BigInteger action, String cid, BigInteger size, String node) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new Address(owner),
                new Uint8(action),
                new Utf8String(cid),
                new Uint256(size),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, BigInteger, String> getNewTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getNewTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getTaskState(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASKSTATE, 
                Arrays.<Type>asList(new Uint256(tid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TaskStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TaskStorage(contractAddress, client, credential);
    }

    public static TaskStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_manager)));
        return deploy(TaskStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
