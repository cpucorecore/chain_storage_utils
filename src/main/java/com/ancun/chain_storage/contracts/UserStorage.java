package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class UserStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","57fe5b049050809150509392505050565b600080831415829015156128a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289c9190613382565b60405180910390fd5b5082848115156128b157fe5b0690509392505050565b50805460018160011615610100020316600290046000825580601f106128e15750612900565b601f0160209004906000526020600020908101906128ff9190612b3b565b5b50565b50805460008255906000526020600020908101906129219190612b60565b50565b602060405190810160405280612938612b85565b81525090565b82805482825590600052602060002090810192821561297a579160200282015b8281111561297957825182559160200191906001019061295e565b5b5090506129879190612b60565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129cc57805160ff19168380011785556129fa565b828001600101855582156129fa579182015b828111156129f95782518255916020019190600101906129de565b5b509050612a079190612b3b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a4c57803560ff1916838001178555612a7a565b82800160010185558215612a7a579182015b82811115612a79578235825591602001919060010190612a5e565b5b509050612a879190612b3b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612acc57805160ff1916838001178555612afa565b82800160010185558215612afa579182015b82811115612af9578251825591602001919060010190612ade565b5b509050612b079190612b3b565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b612b5d91905b80821115612b59576000816000905550600101612b41565b5090565b90565b612b8291905b80821115612b7e576000816000905550600101612b66565b5090565b90565b602060405190810160405280606081525090565b6000612ba582356135ce565b905092915050565b6000612bb982356135e0565b905092915050565b6000612bcd82356135ec565b905092915050565b60008083601f8401121515612be957600080fd5b8235905067ffffffffffffffff811115612c0257600080fd5b602083019150836001820283011115612c1a57600080fd5b9250929050565b600082601f8301121515612c3457600080fd5b8151612c47612c428261351f565b6134f2565b91508082526020830160208301858383011115612c6357600080fd5b612c6e838284613600565b50505092915050565b6000612c8382356135f6565b905092915050565b600060208284031215612c9d57600080fd5b6000612cab84828501612b99565b91505092915050565b600080600060408486031215612cc957600080fd5b6000612cd786828701612b99565b935050602084013567ffffffffffffffff811115612cf457600080fd5b612d0086828701612bd5565b92509250509250925092565b600080600080600060608688031215612d2457600080fd5b6000612d3288828901612b99565b955050602086013567ffffffffffffffff811115612d4f57600080fd5b612d5b88828901612bd5565b9450945050604086013567ffffffffffffffff811115612d7a57600080fd5b612d8688828901612bd5565b92509250509295509295909350565b60008060008060608587031215612dab57600080fd5b6000612db987828801612b99565b945050602085013567ffffffffffffffff811115612dd657600080fd5b612de287828801612bd5565b93509350506040612df587828801612c77565b91505092959194509250565b60008060008060008060808789031215612e1a57600080fd5b6000612e2889828a01612b99565b965050602087013567ffffffffffffffff811115612e4557600080fd5b612e5189828a01612bd5565b95509550506040612e6489828a01612c77565b935050606087013567ffffffffffffffff811115612e8157600080fd5b612e8d89828a01612bd5565b92509250509295509295509295565b60008060408385031215612eaf57600080fd5b6000612ebd85828601612b99565b9250506020612ece85828601612c77565b9150509250929050565b600080600060608486031215612eed57600080fd5b6000612efb86828701612b99565b9350506020612f0c86828701612c77565b9250506040612f1d86828701612bad565b9150509250925092565b60008060008060608587031215612f3d57600080fd5b6000612f4b87828801612b99565b9450506020612f5c87828801612c77565b935050604085013567ffffffffffffffff811115612f7957600080fd5b612f8587828801612bd5565b925092505092959194509250565b600080600060608486031215612fa857600080fd5b6000612fb686828701612b99565b9350506020612fc786828701612c77565b9250506040612fd886828701612c77565b9150509250925092565b600060208284031215612ff457600080fd5b600061300284828501612bc1565b91505092915050565b60006020828403121561301d57600080fd5b600082015167ffffffffffffffff81111561303757600080fd5b61304384828501612c21565b91505092915050565b61305581613586565b82525050565b600061306682613558565b8084526020840193508360208202850161307f8561354b565b60005b848110156130b857838303885261309a83835161310e565b92506130a582613579565b9150602088019750600181019050613082565b508196508694505050505092915050565b6130d281613598565b82525050565b60006130e38261356e565b8084526130f7816020860160208601613600565b61310081613633565b602085010191505092915050565b600061311982613563565b80845261312d816020860160208601613600565b61313681613633565b602085010191505092915050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601a82527f53534d3a756e5573655370616365206f7574206f6620757365640000000000006020830152604082019050919050565b6132f4816135c4565b82525050565b600060208201905061330f600083018461304c565b92915050565b6000604082019050818103600083015261332f818561305b565b905061333e60208301846130c9565b9392505050565b600060208201905061335a60008301846130c9565b92915050565b6000602082019050818103600083015261337a818461310e565b905092915050565b6000602082019050818103600083015261339c81846130d8565b905092915050565b600060808201905081810360008301526133be81876130d8565b90506133cd60208301866132eb565b6133da60408301856132eb565b81810360608301526133ec81846130d8565b905095945050505050565b6000602082019050818103600083015261341081613144565b9050919050565b600060208201905081810360008301526134308161317b565b9050919050565b60006020820190508181036000830152613450816131b2565b9050919050565b60006020820190508181036000830152613470816131e9565b9050919050565b6000602082019050818103600083015261349081613220565b9050919050565b600060208201905081810360008301526134b08161327d565b9050919050565b600060208201905081810360008301526134d0816132b4565b9050919050565b60006020820190506134ec60008301846132eb565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561351557600080fd5b8060405250919050565b600067ffffffffffffffff82111561353657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000613591826135a4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006135d9826135a4565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60005b8381101561361e578082015181840152602081019050613603565b8381111561362d576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a7230582098657356f43ff85469a8c141e2857e840105a263e235479cbda045d3ae99069b6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b5060405160208062003e338339810180604052620000579190810190620005bd565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b5050620007a5565b62000115620002a2640100000000026401000000009004565b6200013481620003396401000000000262002196176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620001819291906200049a565b5062000265600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200020b57600080fd5b505afa15801562000220573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200024b9190810190620005e9565b6200048764010000000002620022d0176401000000009004565b600381905550600060035414156200029f577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000337576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200032e90620006be565b60405180910390fd5b565b62000352620002a2640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620003be906200069c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dd57805160ff19168380011785556200050e565b828001600101855582156200050e579182015b828111156200050d578251825591602001919060010190620004f0565b5b5090506200051d919062000521565b5090565b6200054691905b808211156200054257600081600090555060010162000528565b5090565b90565b60006200055782516200075b565b905092915050565b600082601f83011215156200057357600080fd5b81516200058a62000584826200070e565b620006e0565b91508082526020830160208301858383011115620005a757600080fd5b620005b48382846200076f565b50505092915050565b600060208284031215620005d057600080fd5b6000620005e08482850162000549565b91505092915050565b600060208284031215620005fc57600080fd5b600082015167ffffffffffffffff8111156200061757600080fd5b62000625848285016200055f565b91505092915050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b60006020820190508181036000830152620006b7816200062e565b9050919050565b60006020820190508181036000830152620006d98162000665565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200070457600080fd5b8060405250919050565b600067ffffffffffffffff8211156200072657600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000768826200073b565b9050919050565b60005b838110156200078f57808201518184015260208101905062000772565b838111156200079f576000848401525b50505050565b61367e80620007b56000396000f3fe6080604052600436106101f5576000357c0100000000000000000000000000000000000000000000000000000000900480638b6ceb4f1161011f578063b1eb3c2e116100b2578063d0613a5f11610081578063d0613a5f1461070e578063dd5e5c011461074b578063e5fb923514610789578063fcdce001146107c6576101f5565b8063b1eb3c2e14610652578063bfcef9e914610669578063c116b3ba146106a6578063c2293169146106e3576101f5565b8063977b6590116100ee578063977b6590146105725780639786acf21461059b578063a0b5ad1e146105d8578063ab3da81c14610615576101f5565b80638b6ceb4f146104b757806391726a99146104e057806391eb518014610509578063956aa35f14610532576101f5565b80634b17e3bb116101975780637279e3cd116101665780637279e3cd146103eb57806376e1fbb2146104285780637d0722521461046557806380c2e0af1461048e576101f5565b80634b17e3bb146103455780634c2b1e2e1461036e5780635089e2c8146103975780636bddd7ba146103c2576101f5565b80633a52a796116101d35780633a52a796146102775780633eab5fba146102a0578063415c14eb146102dd578063489b57661461031a576101f5565b806305282c70146101fa5780630ec991c2146102235780632817fe6a1461024e575b600080fd5b34801561020657600080fd5b50610221600480360361021c9190810190612c8b565b6107ef565b005b34801561022f57600080fd5b50610238610929565b60405161024591906132fa565b60405180910390f35b34801561025a57600080fd5b5061027560048036036102709190810190612e9c565b61094f565b005b34801561028357600080fd5b5061029e60048036036102999190810190612d0c565b6109b2565b005b3480156102ac57600080fd5b506102c760048036036102c29190810190612c8b565b610a4b565b6040516102d49190613382565b60405180910390f35b3480156102e957600080fd5b5061030460048036036102ff9190810190612c8b565b610b2f565b60405161031191906134d7565b60405180910390f35b34801561032657600080fd5b5061032f610c22565b60405161033c91906134d7565b60405180910390f35b34801561035157600080fd5b5061036c60048036036103679190810190612e9c565b610c2c565b005b34801561037a57600080fd5b5061039560048036036103909190810190612ed8565b610c85565b005b3480156103a357600080fd5b506103ac610ceb565b6040516103b991906132fa565b60405180910390f35b3480156103ce57600080fd5b506103e960048036036103e49190810190612d95565b610d11565b005b3480156103f757600080fd5b50610412600480360361040d9190810190612c8b565b610d9e565b60405161041f91906134d7565b60405180910390f35b34801561043457600080fd5b5061044f600480360361044a9190810190612cb4565b610ded565b60405161045c91906134d7565b60405180910390f35b34801561047157600080fd5b5061048c60048036036104879190810190612cb4565b610e6f565b005b34801561049a57600080fd5b506104b560048036036104b09190810190612c8b565b610f7b565b005b3480156104c357600080fd5b506104de60048036036104d99190810190612fe2565b611034565b005b3480156104ec57600080fd5b5061050760048036036105029190810190612c8b565b6111b0565b005b34801561051557600080fd5b50610530600480360361052b9190810190612e01565b611312565b005b34801561053e57600080fd5b5061055960048036036105549190810190612cb4565b6114e9565b60405161056994939291906133a4565b60405180910390f35b34801561057e57600080fd5b5061059960048036036105949190810190612cb4565b6116c4565b005b3480156105a757600080fd5b506105c260048036036105bd9190810190612cb4565b611726565b6040516105cf9190613345565b60405180910390f35b3480156105e457600080fd5b506105ff60048036036105fa9190810190612c8b565b6117a8565b60405161060c91906134d7565b60405180910390f35b34801561062157600080fd5b5061063c60048036036106379190810190612cb4565b6117fb565b6040516106499190613382565b60405180910390f35b34801561065e57600080fd5b50610667611916565b005b34801561067557600080fd5b50610690600480360361068b9190810190612c8b565b6119aa565b60405161069d91906134d7565b60405180910390f35b3480156106b257600080fd5b506106cd60048036036106c89190810190612c8b565b6119f6565b6040516106da9190613345565b60405180910390f35b3480156106ef57600080fd5b506106f8611a47565b6040516107059190613360565b60405180910390f35b34801561071a57600080fd5b5061073560048036036107309190810190612c8b565b611ae5565b60405161074291906134d7565b60405180910390f35b34801561075757600080fd5b50610772600480360361076d9190810190612f93565b611b34565b604051610780929190613315565b60405180910390f35b34801561079557600080fd5b506107b060048036036107ab9190810190612c8b565b611d60565b6040516107bd91906134d7565b60405180910390f35b3480156107d257600080fd5b506107ed60048036036107e89190810190612f27565b611db3565b005b6107f7611916565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610869576040517fc703cb120000000000000000000000000000000000000000","","","57fe5b049050809150509392505050565b600080831415829015156128a5576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161289c9190613382565b60405180910390fd5b5082848115156128b157fe5b0690509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106128fc57803560ff191683800117855561292a565b8280016001018555821561292a579182015b8281111561292957823582559160200191906001019061290e565b5b5090506129379190612b3b565b5090565b50805460018160011615610100020316600290046000825580601f106129615750612980565b601f01602090049060005260206000209081019061297f9190612b3b565b5b50565b50805460008255906000526020600020908101906129a19190612b60565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129e557805160ff1916838001178555612a13565b82800160010185558215612a13579182015b82811115612a125782518255916020019190600101906129f7565b5b509050612a209190612b3b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a6557805160ff1916838001178555612a93565b82800160010185558215612a93579182015b82811115612a92578251825591602001919060010190612a77565b5b509050612aa09190612b3b565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b602060405190810160405280612ae8612b85565b81525090565b828054828255906000526020600020908101928215612b2a579160200282015b82811115612b29578251825591602001919060010190612b0e565b5b509050612b379190612b60565b5090565b612b5d91905b80821115612b59576000816000905550600101612b41565b5090565b90565b612b8291905b80821115612b7e576000816000905550600101612b66565b5090565b90565b602060405190810160405280606081525090565b6000612ba582356135ce565b905092915050565b6000612bb982356135e0565b905092915050565b6000612bcd82356135ec565b905092915050565b60008083601f8401121515612be957600080fd5b8235905067ffffffffffffffff811115612c0257600080fd5b602083019150836001820283011115612c1a57600080fd5b9250929050565b600082601f8301121515612c3457600080fd5b8151612c47612c428261351f565b6134f2565b91508082526020830160208301858383011115612c6357600080fd5b612c6e838284613600565b50505092915050565b6000612c8382356135f6565b905092915050565b600060208284031215612c9d57600080fd5b6000612cab84828501612b99565b91505092915050565b600080600060408486031215612cc957600080fd5b6000612cd786828701612b99565b935050602084013567ffffffffffffffff811115612cf457600080fd5b612d0086828701612bd5565b92509250509250925092565b600080600080600060608688031215612d2457600080fd5b6000612d3288828901612b99565b955050602086013567ffffffffffffffff811115612d4f57600080fd5b612d5b88828901612bd5565b9450945050604086013567ffffffffffffffff811115612d7a57600080fd5b612d8688828901612bd5565b92509250509295509295909350565b60008060008060608587031215612dab57600080fd5b6000612db987828801612b99565b945050602085013567ffffffffffffffff811115612dd657600080fd5b612de287828801612bd5565b93509350506040612df587828801612c77565b91505092959194509250565b60008060008060008060808789031215612e1a57600080fd5b6000612e2889828a01612b99565b965050602087013567ffffffffffffffff811115612e4557600080fd5b612e5189828a01612bd5565b95509550506040612e6489828a01612c77565b935050606087013567ffffffffffffffff811115612e8157600080fd5b612e8d89828a01612bd5565b92509250509295509295509295565b60008060408385031215612eaf57600080fd5b6000612ebd85828601612b99565b9250506020612ece85828601612c77565b9150509250929050565b600080600060608486031215612eed57600080fd5b6000612efb86828701612b99565b9350506020612f0c86828701612c77565b9250506040612f1d86828701612bad565b9150509250925092565b60008060008060608587031215612f3d57600080fd5b6000612f4b87828801612b99565b9450506020612f5c87828801612c77565b935050604085013567ffffffffffffffff811115612f7957600080fd5b612f8587828801612bd5565b925092505092959194509250565b600080600060608486031215612fa857600080fd5b6000612fb686828701612b99565b9350506020612fc786828701612c77565b9250506040612fd886828701612c77565b9150509250925092565b600060208284031215612ff457600080fd5b600061300284828501612bc1565b91505092915050565b60006020828403121561301d57600080fd5b600082015167ffffffffffffffff81111561303757600080fd5b61304384828501612c21565b91505092915050565b61305581613586565b82525050565b600061306682613558565b8084526020840193508360208202850161307f8561354b565b60005b848110156130b857838303885261309a83835161310e565b92506130a582613579565b9150602088019750600181019050613082565b508196508694505050505092915050565b6130d281613598565b82525050565b60006130e38261356e565b8084526130f7816020860160208601613600565b61310081613633565b602085010191505092915050565b600061311982613563565b80845261312d816020860160208601613600565b61313681613633565b602085010191505092915050565b6000601a82527f53534d3a756e5573655370616365206f7574206f6620757365640000000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6132f4816135c4565b82525050565b600060208201905061330f600083018461304c565b92915050565b6000604082019050818103600083015261332f818561305b565b905061333e60208301846130c9565b9392505050565b600060208201905061335a60008301846130c9565b92915050565b6000602082019050818103600083015261337a818461310e565b905092915050565b6000602082019050818103600083015261339c81846130d8565b905092915050565b600060808201905081810360008301526133be81876130d8565b90506133cd60208301866132eb565b6133da60408301856132eb565b81810360608301526133ec81846130d8565b905095945050505050565b6000602082019050818103600083015261341081613144565b9050919050565b600060208201905081810360008301526134308161317b565b9050919050565b60006020820190508181036000830152613450816131d8565b9050919050565b600060208201905081810360008301526134708161320f565b9050919050565b6000602082019050818103600083015261349081613246565b9050919050565b600060208201905081810360008301526134b08161327d565b9050919050565b600060208201905081810360008301526134d0816132b4565b9050919050565b60006020820190506134ec60008301846132eb565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561351557600080fd5b8060405250919050565b600067ffffffffffffffff82111561353657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000613591826135a4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006135d9826135a4565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60005b8381101561361e578082015181840152602081019050613603565b8381111561362d576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058209d7a2518c9264e3cbbab9092ffd34d9166a01f509918b704aacf6c7e7a81d86d6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"upInvalidAddFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"fileExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUserNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getInvalidAddFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deleteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getFileNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"checkSpaceEnough\",\"type\":\"bool\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileItem\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"availableSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_UPINVALIDADDFILECOUNT = "upInvalidAddFileCount";

    public static final String FUNC_FILEEXIST = "fileExist";

    public static final String FUNC_GETTOTALUSERNUMBER = "getTotalUserNumber";

    public static final String FUNC_GETINVALIDADDFILECOUNT = "getInvalidAddFileCount";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_DELETEUSER = "deleteUser";

    public static final String FUNC_NEWUSER = "newUser";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETFILENUMBER = "getFileNumber";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETCIDS = "getCids";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETFILEEXT = "getFileExt";

    public static final String FUNC_FREESTORAGE = "freeStorage";

    public static final String FUNC_USESTORAGE = "useStorage";

    public static final String FUNC_GETFILEITEM = "getFileItem";

    public static final String FUNC_GETFILEDURATION = "getFileDuration";

    public static final String FUNC_AVAILABLESPACE = "availableSpace";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected UserStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt deleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String userAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getStorageUsed(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt upInvalidAddFileCount(String userAddress) {
        final Function function = new Function(
                FUNC_UPINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] upInvalidAddFileCount(String userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpInvalidAddFileCount(String userAddress) {
        final Function function = new Function(
                FUNC_UPINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUpInvalidAddFileCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getUpInvalidAddFileCountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Boolean fileExist(String userAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_FILEEXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getTotalUserNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALUSERNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getInvalidAddFileCount(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETINVALIDADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteUser(String userAddress) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteUser(String userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteUser(String userAddress) {
        final Function function = new Function(
                FUNC_DELETEUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt newUser(String userAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newUser(String userAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewUser(String userAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWUSER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getNewUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getFileNumber(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETFILENUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getStorageTotal(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String userAddress, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String userAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String userAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String userAddress, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String userAddress, String cid, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getCids(String userAddress, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String getExt(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getFileExt(String userAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt freeStorage(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeStorage(String userAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeStorage(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt useStorage(String userAddress, BigInteger size, Boolean checkSpaceEnough) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] useStorage(String userAddress, BigInteger size, Boolean checkSpaceEnough, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUseStorage(String userAddress, BigInteger size, Boolean checkSpaceEnough) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(checkSpaceEnough)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, Boolean> getUseStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple4<String, BigInteger, BigInteger, String> getFileItem(String userAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEITEM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, BigInteger, BigInteger, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public BigInteger getFileDuration(String userAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger availableSpace(String userAddress) throws ContractException {
        final Function function = new Function(FUNC_AVAILABLESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static UserStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new UserStorage(contractAddress, client, credential);
    }

    public static UserStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(UserStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
