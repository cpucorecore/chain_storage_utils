package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeManager extends Contract {
    public static final String[] BINARY_ARRAY = {"","011682018060405250610c4f9190810190613a6d565b9050610c596131a6565b73ffffffffffffffffffffffffffffffffffffffff16631d50fe008585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cb1939291906140ae565b600060405180830381600087803b158015610ccb57600080fd5b505af1158015610cdf573d6000803e3d6000fd5b505050508015610d7a57610cf16131a6565b73ffffffffffffffffffffffffffffffffffffffff16637d599c1d84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d479291906141e1565b600060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff167f10e094aa21d9f44a0c9b2d59ccd05b2817f254cb856b57ef2b50d53def8559a560008585604051610dc5939291906144f4565b60405180910390a250505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f096040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ef65780601f10610ecb57610100808354040283529160200191610ef6565b820191906000526020600020905b815481529060010190602001808311610ed957829003601f168201915b50505050506131d690919063ffffffff16565b901515610f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f439190614292565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906144d4565b60405180910390fd5b50565b61106a7f436861696e53746f726167650000000000000000000000000000000000000000610f9b565b611073816132a2565b61107b613197565b73ffffffffffffffffffffffffffffffffffffffff1663ba29fdda826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110cf9190614093565b60206040518083038186803b1580156110e757600080fd5b505afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061111f9190810190613b04565b6000141515611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a90614394565b60405180910390fd5b61116b613197565b73ffffffffffffffffffffffffffffffffffffffff16632d4ede93826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111bf9190614093565b600060405180830381600087803b1580156111d957600080fd5b505af11580156111ed573d6000803e3d6000fd5b5050505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561128a5780601f1061125f5761010080835404028352916020019161128a565b820191906000526020600020905b81548152906001019060200180831161126d57829003601f168201915b505050505081565b6112bb7f436861696e53746f726167650000000000000000000000000000000000000000610f9b565b6112c36131a6565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c484846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113199291906141e1565b60206040518083038186803b15801561133157600080fd5b505afa158015611345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113699190810190613a6d565b15156113aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a1906143f4565b60405180910390fd5b60006113b4613392565b73ffffffffffffffffffffffffffffffffffffffff166383f7cf936040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561141557600080fd5b505afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061144d9190810190613b04565b905080611458613197565b73ffffffffffffffffffffffffffffffffffffffff1663fd3b530f876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114ac9190614093565b60206040518083038186803b1580156114c457600080fd5b505afa1580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fc9190810190613b04565b10151561153e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153590614374565b60405180910390fd5b60006115486131a6565b73ffffffffffffffffffffffffffffffffffffffff16631ca4975086866040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161159e9291906141e1565b60206040518083038186803b1580156115b657600080fd5b505afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115ee9190810190613b04565b9050806115f9613197565b73ffffffffffffffffffffffffffffffffffffffff1663b9b1d69887876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161164f9291906141e1565b60206040518083038186803b15801561166757600080fd5b505afa15801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061169f9190810190613b04565b1015156116e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d890614474565b60405180910390fd5b60006116eb613197565b73ffffffffffffffffffffffffffffffffffffffff166376182d0e888888886040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161174594939291906140e0565b602060405180830381600087803b15801561175f57600080fd5b505af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117979190810190613b04565b9050818114156119db576117a9613197565b73ffffffffffffffffffffffffffffffffffffffff1663fdc1e4a987876040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117ff9291906141e1565b60206040518083038186803b15801561181757600080fd5b505afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061184f9190810190613a6d565b156119da5761185c6131a6565b73ffffffffffffffffffffffffffffffffffffffff16637dc3b0188787876040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118b49392919061423e565b600060405180830381600087803b1580156118ce57600080fd5b505af11580156118e2573d6000803e3d6000fd5b5050505060606118f0613197565b73ffffffffffffffffffffffffffffffffffffffff166318233f6888886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119469291906141e1565b60006040518083038186803b15801561195e57600080fd5b505afa158015611972573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061199b91908101906139eb565b90507f19b11792e3c96b30c0c1882dae7c24d07ffa812d72ebef3ccdd66cc67e44fb5a8787836040516119d093929190614205565b60405180910390a1505b5b50505050505050565b6119ec610781565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a6391906141ab565b60206040518083038186803b158015611a7b57600080fd5b505afa158015611a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ab39190810190613856565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b61610781565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611c4a7f436861696e53746f726167650000000000000000","000000000000000000000000610f9b565b611c53836132a2565b611c5b613197565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cb3939291906140ae565b600060405180830381600087803b158015611ccd57600080fd5b505af1158015611ce1573d6000803e3d6000fd5b50505050505050565b611d137f436861696e53746f726167650000000000000000000000000000000000000000610f9b565b611d1c826132a2565b611d24613197565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d789190614093565b60206040518083038186803b158015611d9057600080fd5b505afa158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dc89190810190613b04565b8110151515611e0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0390614494565b60405180910390fd5b611e14613197565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e6a929190614120565b600060405180830381600087803b158015611e8457600080fd5b505af1158015611e98573d6000803e3d6000fd5b505050505050565b611ec97f46696c654d616e61676572000000000000000000000000000000000000000000610f9b565b6060611ed3613197565b73ffffffffffffffffffffffffffffffffffffffff1663b56b8e9e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f299291906141e1565b60006040518083038186803b158015611f4157600080fd5b505afa158015611f55573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611f7e91908101906139eb565b90507f6d74366daf8e8be1f380658154eb525ee585935a254f3380eb613d6e46a352d9838383604051611fb393929190614205565b60405180910390a1505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120f56040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e15780601f106120b6576101008083540402835291602001916120e1565b820191906000526020600020905b8154815290600101906020018083116120c457829003601f168201915b50505050506133c29092919063ffffffff16565b901515612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f9190614292565b60405180910390fd5b5050565b60148151101515612182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612179906142d4565b60405180910390fd5b600080905060008090505b825181101561222a576005600084838151811015156121a857fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561221d576001915061222a565b808060010191505061218d565b5080151561226d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612264906143b4565b60405180910390fd5b5050565b61229a7f436861696e53746f726167650000000000000000000000000000000000000000610f9b565b6122a26131a6565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c483836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122f89291906141e1565b60206040518083038186803b15801561231057600080fd5b505afa158015612324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123489190810190613a6d565b1515612389576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612380906143f4565b60405180910390fd5b612391613197565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123e9939291906140ae565b60206040518083038186803b15801561240157600080fd5b505afa158015612415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124399190810190613a6d565b151561247a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247190614354565b60405180910390fd5b6000612484613392565b73ffffffffffffffffffffffffffffffffffffffff166371c7f9656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156124e557600080fd5b505afa1580156124f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061251d9190810190613b04565b905080612528613197565b73ffffffffffffffffffffffffffffffffffffffff1663e227c9d5866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161257c9190614093565b60206040518083038186803b15801561259457600080fd5b505afa1580156125a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125cc9190810190613b04565b10151561260e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612605906142b4565b60405180910390fd5b6000612618613197565b73ffffffffffffffffffffffffffffffffffffffff1663cd4de7a48686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612670939291906140ae565b602060405180830381600087803b15801561268a57600080fd5b505af115801561269e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126c29190810190613a6d565b9050801561284e576126d26131a6565b73ffffffffffffffffffffffffffffffffffffffff16637fb8227885856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127289291906141e1565b600060405180830381600087803b15801561274257600080fd5b505af1158015612756573d6000803e3d6000fd5b505050506060612764613197565b73ffffffffffffffffffffffffffffffffffffffff1663b56b8e9e86866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127ba9291906141e1565b60006040518083038186803b1580156127d257600080fd5b505afa1580156127e6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061280f91908101906139eb565b90507f5086d0a9f7882005454e4c16253b92d9191e9c460a24a44a1cf0b57f14fb0e5f85858360405161284493929190614205565b60405180910390a1505b5050505050565b61285d610781565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c690614414565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612997610781565b60008090505b600480549050811015612aee5760006004828154811015156129bb57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a3f91906141ab565b60206040518083038186803b158015612a5757600080fd5b505afa158015612a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a8f9190810190613856565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050808060010191505061299d565b50565b612b1a7f436861696e53746f726167650000000000000000000000000000000000000000610f9b565b612b22613197565b73ffffffffffffffffffffffffffffffffffffffff16630e1a4a388484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b7a939291906140ae565b60206040518083038186803b158015612b9257600080fd5b505afa158015612ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bca9190810190613a6d565b1515612c0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c02906144b4565b60405180910390fd5b612c13613197565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca84612c376131a6565b73ff","","5b6000613c45826145de565b808452613c598160208601602086016146ae565b613c62816146e1565b602085010191505092915050565b6000613c7b826145d3565b808452613c8f8160208601602086016146ae565b613c98816146e1565b602085010191505092915050565b6000601882527f4e3a6d7573742066696e6973682064656c65746546696c6500000000000000006020830152604082019050919050565b6000601e82527f63616e6e6f742068617665206d6f7265207468616e203230206974656d7300006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000600c82527f4e3a6e6f646520657869737400000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f4e3a63616e2774206164642066696c65000000000000000000000000000000006020830152604082019050919050565b6000601882527f4e3a6e6f64652068617665206e6f74207468652066696c6500000000000000006020830152604082019050919050565b6000601582527f4e3a6d7573742066696e6973682061646446696c6500000000000000000000006020830152604082019050919050565b6000600f82527f4e3a636964206e6f7420656d70747900000000000000000000000000000000006020830152604082019050919050565b6000601982527f63616c6c6572206973206e6f7420696e20636f6e7461696e73000000000000006020830152604082019050919050565b6000601b82527f4e3a63616e2774206164642066696c65206475706c69636174656400000000006020830152604082019050919050565b6000601082527f4e3a66696c65206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601082527f4e3a6e6f6465206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601982527f4e3a63616e2061646446696c65206e6f646520656e6f756768000000000000006020830152604082019050919050565b6000600b82527f4e3a746f6f20736d616c6c0000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f4e3a63616e27742064656c6574652066696c65206e6f742061646465640000006020830152604082019050919050565b6000600c82527f77726f6e672063616c6c657200000000000000000000000000000000000000006020830152604082019050919050565b61408d8161463f565b82525050565b60006020820190506140a86000830184613b2d565b92915050565b60006040820190506140c36000830186613b2d565b81810360208301526140d6818486613c10565b9050949350505050565b60006060820190506140f56000830187613b2d565b8181036020830152614108818587613c10565b90506141176040830184614084565b95945050505050565b60006040820190506141356000830185613b2d565b6141426020830184614084565b9392505050565b600060608201905061415e6000830187613b2d565b61416b6020830186614084565b818103604083015261417e818486613c10565b905095945050505050565b600060208201905081810360008301526141a38184613b97565b905092915050565b60006020820190506141c06000830184613bf2565b92915050565b60006020820190506141db6000830184613c01565b92915050565b600060208201905081810360008301526141fc818486613c10565b90509392505050565b60006040820190508181036000830152614220818587613c10565b905081810360208301526142348184613b3c565b9050949350505050565b60006040820190508181036000830152614259818587613c10565b90506142686020830184614084565b949350505050565b6000602082019050818103600083015261428a8184613c70565b905092915050565b600060208201905081810360008301526142ac8184613c3a565b905092915050565b600060208201905081810360008301526142cd81613ca6565b9050919050565b600060208201905081810360008301526142ed81613cdd565b9050919050565b6000602082019050818103600083015261430d81613d14565b9050919050565b6000602082019050818103600083015261432d81613d4b565b9050919050565b6000602082019050818103600083015261434d81613d82565b9050919050565b6000602082019050818103600083015261436d81613db9565b9050919050565b6000602082019050818103600083015261438d81613df0565b9050919050565b600060208201905081810360008301526143ad81613e27565b9050919050565b600060208201905081810360008301526143cd81613e5e565b9050919050565b600060208201905081810360008301526143ed81613e95565b9050919050565b6000602082019050818103600083015261440d81613ecc565b9050919050565b6000602082019050818103600083015261442d81613f03565b9050919050565b6000602082019050818103600083015261444d81613f3a565b9050919050565b6000602082019050818103600083015261446d81613f71565b9050919050565b6000602082019050818103600083015261448d81613fa8565b9050919050565b600060208201905081810360008301526144ad81613fdf565b9050919050565b600060208201905081810360008301526144cd81614016565b9050919050565b600060208201905081810360008301526144ed8161404d565b9050919050565b60006040820190506145096000830186614084565b818103602083015261451c818486613c10565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561454957600080fd5b8060405250919050565b600067ffffffffffffffff82111561456a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561459257600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061460e8261461f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006146548261461f565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006146868261468d565b9050919050565b60006146988261461f565b9050919050565b82818337600083830152505050565b60005b838110156146cc5780820151818401526020810190506146b1565b838111156146db576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058208ae89daa0765906b5c6eaef4f6136d0f9d753f009f48e9ddc0b56c00f97ad5306c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","8152600401610c49929190614120565b600060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506000610c85613197565b73ffffffffffffffffffffffffffffffffffffffff16633f90dee38585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cdd939291906140ae565b602060405180830381600087803b158015610cf757600080fd5b505af1158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2f9190810190613a6d565b9050610d396131a6565b73ffffffffffffffffffffffffffffffffffffffff16636b1320c48585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d91939291906140ae565b600060405180830381600087803b158015610dab57600080fd5b505af1158015610dbf573d6000803e3d6000fd5b505050508015610e5a57610dd16131a6565b73ffffffffffffffffffffffffffffffffffffffff16638515646984846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e279291906141e1565b600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff167f211620d9ac86dcbeee46370486b2129827673c320ad4bbff739fd2d20977185860008585604051610ea5939291906144f4565b60405180910390a250505050565b610edc7f436861696e53746f726167650000000000000000000000000000000000000000611bf4565b610ee5826131d6565b610eed613197565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f419190614093565b60206040518083038186803b158015610f5957600080fd5b505afa158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f919190810190613b04565b8110151515610fd5576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610fcc906142b4565b60405180910390fd5b610fdd613197565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611033929190614120565b600060405180830381600087803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110b87f46696c654d616e61676572000000000000000000000000000000000000000000611bf4565b7f22481275c805c58ab3138e7a7381710766ed0c468c1919cf603ccd6c9c38465682826040516110e99291906141e1565b60405180910390a15050565b61111e7f436861696e53746f726167650000000000000000000000000000000000000000611bf4565b611126613197565b73ffffffffffffffffffffffffffffffffffffffff16634f2635938484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161117e939291906140ae565b60206040518083038186803b15801561119657600080fd5b505afa1580156111aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ce9190810190613a6d565b151561120f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611206906144b4565b60405180910390fd5b611217613197565b73ffffffffffffffffffffffffffffffffffffffff16632817fe6a8461123b6131a6565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613686866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112919291906141e1565b60206040518083038186803b1580156112a957600080fd5b505afa1580156112bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112e19190810190613b04565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161131a929190614120565b600060405180830381600087803b15801561133457600080fd5b505af1158015611348573d6000803e3d6000fd5b505050506000611356613197565b73ffffffffffffffffffffffffffffffffffffffff166368aa0d878585856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113ae939291906140ae565b602060405180830381600087803b1580156113c857600080fd5b505af11580156113dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114009190810190613a6d565b905061140a6131a6565b73ffffffffffffffffffffffffffffffffffffffff1663b6dd63d38585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611462939291906140ae565b600060405180830381600087803b15801561147c57600080fd5b505af1158015611490573d6000803e3d6000fd5b50505050801561152b576114a26131a6565b73ffffffffffffffffffffffffffffffffffffffff16631584ca8e84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114f89291906141e1565b600060405180830381600087803b15801561151257600080fd5b505af1158015611526573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff167f211620d9ac86dcbeee46370486b2129827673c320ad4bbff739fd2d20977185860018585604051611576939291906144f4565b60405180910390a250505050565b61158c61250c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161160391906141ab565b60206040518083038186803b15801561161b57600080fd5b505afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116539190810190613856565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156118096040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117f65780601f106117cb576101008083540402835291602001916117f6565b820191906000526020600020905b8154815290600101906020018083116117d957829003601f168201915b50505050506132c690919063ffffffff16565b90151561184c576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016118439190614292565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119aa6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119965780601f1061196b57610100808354040283529160200191611996565b820191906000526020600020905b81548152906001019060200180831161197957829003601f168201915b50505050506133929092919063ffffffff16565b9015156119ed576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016119e49190614292565b60405180910390fd5b5050565b6119f961250c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a6b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a62906143b4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611b547f436861696e53746f726167650000000000000000000000000000000000000000611bf4565b611b5d836131d6565b611b65613197565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bbd939291906140ae565b600060405180830381600087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b50505050505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffff","","2c40613197565b73ffffffffffffffffffffffffffffffffffffffff166380d52989866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c949190614093565b60206040518083038186803b158015612cac57600080fd5b505afa158015612cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ce49190810190613b04565b101515612d26576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d1d906142f4565b60405180910390fd5b6000612d30613197565b73ffffffffffffffffffffffffffffffffffffffff1663ea36ac4a8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d88939291906140ae565b602060405180830381600087803b158015612da257600080fd5b505af1158015612db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612dda9190810190613a6d565b90508015612f6657612dea6131a6565b73ffffffffffffffffffffffffffffffffffffffff16638e6fb74085856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e409291906141e1565b600060405180830381600087803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b505050506060612e7c613197565b73ffffffffffffffffffffffffffffffffffffffff1663cdd32d7786866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ed29291906141e1565b60006040518083038186803b158015612eea57600080fd5b505afa158015612efe573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612f2791908101906139eb565b90507f39d589b179af3c8d45ed41aba599cd0684ab5546b45c3274a37d4d939d94ccb7858583604051612f5c93929190614205565b60405180910390a1505b5050505050565b612f7561250c565b60008090505b6004805490508110156130cc576000600482815481101515612f9957fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161301d91906141ab565b60206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061306d9190810190613856565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050612f7b565b50565b6130d761250c565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006131a16116d3565b905090565b60006131d17f46696c654d616e61676572000000000000000000000000000000000000000000613497565b905090565b6131de613197565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132329190614093565b60206040518083038186803b15801561324a57600080fd5b505afa15801561325e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132829190810190613a6d565b15156132c3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016132ba90614474565b60405180910390fd5b50565b606082826040516020018083805190602001908083835b60208310151561330257805182526020820191506020810190506020830392506132dd565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156133555780518252602082019150602081019050602083039250613330565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b6020831015156133cf57805182526020820191506020810190506020830392506133aa565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561342257805182526020820191506020810190506020830392506133fd565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60006134927f53657474696e6700000000000000000000000000000000000000000000000000613497565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156135e06040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135cc5780601f106135a1576101008083540402835291602001916135cc565b820191906000526020600020905b8154815290600101906020018083116135af57829003601f168201915b50505050506133929092919063ffffffff16565b901515613623576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161361a9190614292565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061366b8235614649565b905092915050565b600061367f8251614649565b905092915050565b600082601f830112151561369a57600080fd5b81516136ad6136a882614553565b614526565b915081818352602084019350602081019050838560208402820111156136d257600080fd5b60005b8381101561370257816136e88882613673565b8452602084019350602083019250506001810190506136d5565b5050505092915050565b600082601f830112151561371f57600080fd5b813561373261372d8261457b565b614526565b9150818183526020840193506020810190508385602084028201111561375757600080fd5b60005b83811015613787578161376d88826137a5565b84526020840193506020830192505060018101905061375a565b5050505092915050565b600061379d825161465b565b905092915050565b60006137b18235614667565b905092915050565b60008083601f84011215156137cd57600080fd5b8235905067ffffffffffffffff8111156137e657600080fd5b6020830191508360018202830111156137fe57600080fd5b9250929050565b60006138118235614671565b905092915050565b60006138258251614671565b905092915050565b60006020828403121561383f57600080fd5b600061384d8482850161365f565b91505092915050565b60006020828403121561386857600080fd5b600061387684828501613673565b91505092915050565b60008060006040848603121561389457600080fd5b60006138a28682870161365f565b935050602084013567ffffffffffffffff8111156138bf57600080fd5b6138cb868287016137b9565b92509250509250925092565b600080600080606085870312156138ed57600080fd5b60006138fb8782880161365f565b945050602085013567ffffffffffffffff81111561391857600080fd5b613924878288016137b9565b9350935050604061393787828801613805565b91505092959194509250565b6000806040838503121561395657600080fd5b60006139648582860161365f565b925050602061397585828601613805565b9150509250929050565b6000806000806060858703121561399557600080fd5b60006139a38782880161365f565b94505060206139b487828801613805565b935050604085013567ffffffffffffffff8111156139d157600080fd5b6139dd878288016137b9565b925092505092959194509250565b6000602082840312156139fd57600080fd5b600082015167ffffffffffffffff811115613a1757600080fd5b613a2384828501613687565b91505092915050565b600060208284031215613a3e57600080fd5b600082013567ffffffffffffffff811115613a5857600080fd5b613a648482850161370c565b91505092915050565b600060208284031215613a7f57600080fd5b6000613a8d84828501613791565b91505092915050565b600060208284031215613aa857600080fd5b6000613ab6848285016137a5565b91505092915050565b60008060208385031215613ad257600080fd5b600083013567ffffffffffffffff811115613aec57600080fd5b613af8858286016137b9565b92509250509250929050565b600060208284031215613b1657600080fd5b6000613b2484828501613819565b91505092915050565b613b3681614603565b82525050565b6000613b47826145bd565b808452602084019350613b59836145a3565b60005b82811015613b8b57613b6f868351613b2d565b613b78826145e9565b9150602086019550600181019050613b5c565b50849250505092915050565b6000613ba2826145c8565b808452602084019350613bb4836145b0565b60005b82811015613be657613bca868351613bf2565b613bd3826145f6565b9150602086019550600181019050613bb7565b50849250505092915050565b613bfb81614615565b82525050565b613c0a8161467b565b82525050565b6000828452602084019350613c2683858461469f565b613c2f836146e1565b84019050939250505056","5b6000613c45826145de565b808452613c598160208601602086016146ae565b613c62816146e1565b602085010191505092915050565b6000613c7b826145d3565b808452613c8f8160208601602086016146ae565b613c98816146e1565b602085010191505092915050565b6000600b82527f4e3a746f6f20736d616c6c0000000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f4e3a66696c65206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601882527f4e3a6d7573742066696e6973682064656c65746546696c6500000000000000006020830152604082019050919050565b6000600f82527f4e3a636964206e6f7420656d70747900000000000000000000000000000000006020830152604082019050919050565b6000601982527f4e3a63616e2061646446696c65206e6f646520656e6f756768000000000000006020830152604082019050919050565b6000601982527f63616c6c6572206973206e6f7420696e20636f6e7461696e73000000000000006020830152604082019050919050565b6000601082527f4e3a63616e2774206164642066696c65000000000000000000000000000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601582527f4e3a6d7573742066696e6973682061646446696c6500000000000000000000006020830152604082019050919050565b6000601e82527f63616e6e6f742068617665206d6f7265207468616e203230206974656d7300006020830152604082019050919050565b6000601882527f4e3a6e6f64652068617665206e6f74207468652066696c6500000000000000006020830152604082019050919050565b6000600c82527f4e3a6e6f646520657869737400000000000000000000000000000000000000006020830152604082019050919050565b6000601b82527f4e3a63616e2774206164642066696c65206475706c69636174656400000000006020830152604082019050919050565b6000601082527f4e3a6e6f6465206e6f74206578697374000000000000000000000000000000006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601d82527f4e3a63616e27742064656c6574652066696c65206e6f742061646465640000006020830152604082019050919050565b6000600c82527f77726f6e672063616c6c657200000000000000000000000000000000000000006020830152604082019050919050565b61408d8161463f565b82525050565b60006020820190506140a86000830184613b2d565b92915050565b60006040820190506140c36000830186613b2d565b81810360208301526140d6818486613c10565b9050949350505050565b60006060820190506140f56000830187613b2d565b8181036020830152614108818587613c10565b90506141176040830184614084565b95945050505050565b60006040820190506141356000830185613b2d565b6141426020830184614084565b9392505050565b600060608201905061415e6000830187613b2d565b61416b6020830186614084565b818103604083015261417e818486613c10565b905095945050505050565b600060208201905081810360008301526141a38184613b97565b905092915050565b60006020820190506141c06000830184613bf2565b92915050565b60006020820190506141db6000830184613c01565b92915050565b600060208201905081810360008301526141fc818486613c10565b90509392505050565b60006040820190508181036000830152614220818587613c10565b905081810360208301526142348184613b3c565b9050949350505050565b60006040820190508181036000830152614259818587613c10565b90506142686020830184614084565b949350505050565b6000602082019050818103600083015261428a8184613c70565b905092915050565b600060208201905081810360008301526142ac8184613c3a565b905092915050565b600060208201905081810360008301526142cd81613ca6565b9050919050565b600060208201905081810360008301526142ed81613cdd565b9050919050565b6000602082019050818103600083015261430d81613d14565b9050919050565b6000602082019050818103600083015261432d81613d4b565b9050919050565b6000602082019050818103600083015261434d81613d82565b9050919050565b6000602082019050818103600083015261436d81613db9565b9050919050565b6000602082019050818103600083015261438d81613df0565b9050919050565b600060208201905081810360008301526143ad81613e27565b9050919050565b600060208201905081810360008301526143cd81613e5e565b9050919050565b600060208201905081810360008301526143ed81613e95565b9050919050565b6000602082019050818103600083015261440d81613ecc565b9050919050565b6000602082019050818103600083015261442d81613f03565b9050919050565b6000602082019050818103600083015261444d81613f3a565b9050919050565b6000602082019050818103600083015261446d81613f71565b9050919050565b6000602082019050818103600083015261448d81613fa8565b9050919050565b600060208201905081810360008301526144ad81613fdf565b9050919050565b600060208201905081810360008301526144cd81614016565b9050919050565b600060208201905081810360008301526144ed8161404d565b9050919050565b60006040820190506145096000830186614084565b818103602083015261451c818486613c10565b9050949350505050565b6000604051905081810181811067ffffffffffffffff8211171561454957600080fd5b8060405250919050565b600067ffffffffffffffff82111561456a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561459257600080fd5b602082029050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600061460e8261461f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006146548261461f565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b60006146868261468d565b9050919050565b60006146988261461f565b9050919050565b82818337600083830152505050565b60005b838110156146cc5780820151818401526020810190506146b1565b838111156146db576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820df59b4231bf11a0f40c5b983a61d0e56db89540a1894e63900988c6cfc51d0ea6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeCanAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCanDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"TryRequestAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"RequestAddFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"TryRequestDeleteFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"name\":\"RequestDeleteFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"NodeAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_NODEADDFILE = "nodeAddFile";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NODECANADDFILE = "nodeCanAddFile";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_NODECANDELETEFILE = "nodeCanDeleteFile";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_NODEDELETEFILE = "nodeDeleteFile";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_REGISTER = "register";

    public static final Event TRYREQUESTADDFILE_EVENT = new Event("TryRequestAddFile", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event REQUESTADDFILE_EVENT = new Event("RequestAddFile", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event TRYREQUESTDELETEFILE_EVENT = new Event("TryRequestDeleteFile", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event REQUESTDELETEFILE_EVENT = new Event("RequestDeleteFile", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event NODEACTION_EVENT = new Event("NodeAction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected NodeManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeAddFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deRegister(String nodeAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String nodeAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanAddFile(String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getNodeCanAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String nodeAddress, BigInteger storageTotal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String nodeAddress, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt deleteFile(String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt nodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeCanDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt addFile(String cid) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String cid) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt register(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public List<TryRequestAddFileEventResponse> getTryRequestAddFileEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRYREQUESTADDFILE_EVENT, transactionReceipt);
        ArrayList<TryRequestAddFileEventResponse> responses = new ArrayList<TryRequestAddFileEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TryRequestAddFileEventResponse typedResponse = new TryRequestAddFileEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTryRequestAddFileEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRYREQUESTADDFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTryRequestAddFileEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRYREQUESTADDFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestAddFileEventResponse> getRequestAddFileEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTADDFILE_EVENT, transactionReceipt);
        ArrayList<RequestAddFileEventResponse> responses = new ArrayList<RequestAddFileEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestAddFileEventResponse typedResponse = new RequestAddFileEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nodeAddresses = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestAddFileEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestAddFileEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTADDFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TryRequestDeleteFileEventResponse> getTryRequestDeleteFileEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRYREQUESTDELETEFILE_EVENT, transactionReceipt);
        ArrayList<TryRequestDeleteFileEventResponse> responses = new ArrayList<TryRequestDeleteFileEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TryRequestDeleteFileEventResponse typedResponse = new TryRequestDeleteFileEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nodeAddresses = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTryRequestDeleteFileEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRYREQUESTDELETEFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTryRequestDeleteFileEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRYREQUESTDELETEFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RequestDeleteFileEventResponse> getRequestDeleteFileEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTDELETEFILE_EVENT, transactionReceipt);
        ArrayList<RequestDeleteFileEventResponse> responses = new ArrayList<RequestDeleteFileEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestDeleteFileEventResponse typedResponse = new RequestDeleteFileEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nodeAddresses = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRequestDeleteFileEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTDELETEFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRequestDeleteFileEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REQUESTDELETEFILE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<NodeActionEventResponse> getNodeActionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODEACTION_EVENT, transactionReceipt);
        ArrayList<NodeActionEventResponse> responses = new ArrayList<NodeActionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeActionEventResponse typedResponse = new NodeActionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nodeAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNodeActionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NODEACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNodeActionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NODEACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static NodeManager load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NodeManager(contractAddress, client, credential);
    }

    public static NodeManager deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(NodeManager.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class TryRequestAddFileEventResponse {
        public TransactionReceipt.Logs log;

        public String cid;
    }

    public static class RequestAddFileEventResponse {
        public TransactionReceipt.Logs log;

        public String cid;

        public List<String> nodeAddresses;
    }

    public static class TryRequestDeleteFileEventResponse {
        public TransactionReceipt.Logs log;

        public String cid;

        public List<String> nodeAddresses;
    }

    public static class RequestDeleteFileEventResponse {
        public TransactionReceipt.Logs log;

        public String cid;

        public List<String> nodeAddresses;
    }

    public static class NodeActionEventResponse {
        public TransactionReceipt.Logs log;

        public String nodeAddress;

        public BigInteger action;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
