package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010161207290919063ffffffff16565b5050565b6118d7816001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016120d19092919063ffffffff16565b5050565b6118e6600354611388565b6000600983836040518083838082843780830192505050925050509081526020016040518091039020819055505050565b611922600354611388565b61197381600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061215b90919063ffffffff16565b5050565b60006119828261219f565b1515156119c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bb90612f6d565b60405180910390fd5b60008260000154905082600201600082815260200190815260200160002054915082600201600082815260200190815260200160002060009055611a12600182611a7090919063ffffffff16565b836000018190555050919050565b606080611a2f836000016121b4565b905060608190508092505050919050565b6000611a68836000018373ffffffffffffffffffffffffffffffffffffffff16600102612210565b905092915050565b6000808284019050838110151515611abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab490612f2d565b60405180910390fd5b8091505092915050565b6000611aef836000018373ffffffffffffffffffffffffffffffffffffffff16600102612307565b905092915050565b6000611b058260000161237c565b9050919050565b611b14612654565b611b1c612654565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480611b595750600084145b15611b675780915050611c55565b60328411611b755783611b78565b60325b8160600181815250508060600151816040018181525050611ba681606001518661238d90919063ffffffff16565b8160200181815250506000611bc88260600151876123d790919063ffffffff16565b90506000811115611bf557611beb60018360200151611a7090919063ffffffff16565b8260200181815250505b6001841115611c0957838260800181815250505b816020015182608001511115611c285781602001518260800181815250505b81602001518260800151148015611c3f5750600081115b15611c4f57808260400181815250505b81925050505b9392505050565b6000611c9e83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612421565b905092915050565b600080831415611cb95760009050611d14565b60008284029050828482811515611ccc57fe5b04141515611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0690612fad565b60405180910390fd5b809150505b92915050565b6000611d29836000018361247e565b60019004905092915050565b6000611d408261219f565b151515611d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7990612f6d565b60405180910390fd5b60008260000154905082600201600082815260200190815260200160002054915050919050565b60608383836040516020018084805190602001908083835b602083101515611de65780518252602082019150602081019050602083039250611dc1565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515611e395780518252602082019150602081019050602083039250611e14565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b611e86610a08565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eef90612f8d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000611fe882600001548360010154611c5c90919063ffffffff16565b9050919050565b600080612009838560000154611a7090919063ffffffff16565b9050836001015481101515612053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204a90612eed565b60405180910390fd5b8360020160008281526020019081526020016000205491505092915050565b816000015481111515156120bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b290612fed565b60405180910390fd5b8082600001600082825403925050819055505050565b80156121375782600101546120f3838560000154611a7090919063ffffffff16565b11151515612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212d90612f0d565b60405180910390fd5b5b61214e828460000154611a7090919063ffffffff16565b8360000181905550505050565b6000826001015490508183600201600083815260200190815260200160002081905550612192600182611a7090919063ffffffff16565b8360010181905550505050565b60008160000154826001015411159050919050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561220457602002820191906000526020600020905b8154815260200190600101908083116121f0575b50505050509050919050565b6000808360010160008481526020019081526020016000205490506000811415156122fb57600060018203905060006001866000018054905003905081811415156122b1576000866000018281548110151561226857fe5b9060005260206000200154905080876000018481548110151561228757fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156122c057fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612301565b60009150505b92915050565b600061231383836124a4565b1515612371578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050612376565b600090505b92915050565b600081600001805490509050919050565b60006123cf83836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124c7565b905092915050565b600061241983836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525061252c565b905092915050565b6000838311158290151561246b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124629190612ecb565b60405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561249157fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600080831182901515612510576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125079190612ecb565b60405180910390fd5b506000838581151561251e57fe5b049050809150509392505050565b60008083141582901515612576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256d9190612ecb565b60405180910390fd5b50828481151561258257fe5b0690509392505050565b50805460018160011615610100020316600290046000825580601f106125b257506125d1565b601f0160209004906000526020600020908101906125d09190612784565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061261557805160ff1916838001178555612643565b82800160010185558215612643579182015b82811115612642578251825591602001919060010190612627565b5b5090506126509190612784565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126c557803560ff19168380011785556126f3565b828001600101855582156126f3579182015b828111156126f25782358255916020019190600101906126d7565b5b5090506127009190612784565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061274557805160ff1916838001178555612773565b82800160010185558215612773579182015b82811115612772578251825591602001919060010190612757565b5b5090506127809190612784565b5090565b6127a691905b808211156127a257600081600090555060010161278a565b5090565b90565b60006127b58235613129565b905092915050565b60006127c9823561313b565b905092915050565b60008083601f84011215156127e557600080fd5b8235905067ffffffffffffffff8111156127fe57600080fd5b60208301915083600182028301111561281657600080fd5b9250929050565b600082601f830112151561283057600080fd5b815161284361283e82613055565b613028565b91508082526020","83016020830185838301111561285f57600080fd5b61286a83828461314f565b50505092915050565b600061287f8235613145565b905092915050565b60006020828403121561289957600080fd5b60006128a7848285016127a9565b91505092915050565b6000806000604084860312156128c557600080fd5b60006128d3868287016127a9565b935050602084013567ffffffffffffffff8111156128f057600080fd5b6128fc868287016127d1565b92509250509250925092565b6000806040838503121561291b57600080fd5b6000612929858286016127a9565b925050602061293a85828601612873565b9150509250929050565b6000806000806060858703121561295a57600080fd5b6000612968878288016127a9565b945050602061297987828801612873565b935050604085013567ffffffffffffffff81111561299657600080fd5b6129a2878288016127d1565b925092505092959194509250565b6000602082840312156129c257600080fd5b60006129d0848285016127bd565b91505092915050565b600080602083850312156129ec57600080fd5b600083013567ffffffffffffffff811115612a0657600080fd5b612a12858286016127d1565b92509250509250929050565b600060208284031215612a3057600080fd5b600082015167ffffffffffffffff811115612a4a57600080fd5b612a568482850161281d565b91505092915050565b60008060408385031215612a7257600080fd5b6000612a8085828601612873565b9250506020612a9185828601612873565b9150509250929050565b612aa4816130e1565b82525050565b6000612ab58261309b565b808452602084019350612ac783613081565b60005b82811015612af957612add868351612a9b565b612ae6826130c7565b9150602086019550600181019050612aca565b50849250505092915050565b6000612b10826130a6565b808452602084019350612b228361308e565b60005b82811015612b5457612b38868351612df0565b612b41826130d4565b9150602086019550600181019050612b25565b50849250505092915050565b612b69816130f3565b82525050565b6000612b7a826130bc565b808452612b8e81602086016020860161314f565b612b9781613182565b602085010191505092915050565b6000612bb0826130b1565b808452612bc481602086016020860161314f565b612bcd81613182565b602085010191505092915050565b6000600682527f64713a6f6f6200000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000600882527f64713a656d7074790000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601a82527f53534d3a756e5573655370616365206f7574206f6620757365640000000000006020830152604082019050919050565b612df98161311f565b82525050565b6000602082019050612e146000830184612a9b565b92915050565b60006020820190508181036000830152612e348184612aaa565b905092915050565b60006040820190508181036000830152612e568185612aaa565b9050612e656020830184612b60565b9392505050565b60006020820190508181036000830152612e868184612b05565b905092915050565b6000602082019050612ea36000830184612b60565b92915050565b60006020820190508181036000830152612ec38184612ba5565b905092915050565b60006020820190508181036000830152612ee58184612b6f565b905092915050565b60006020820190508181036000830152612f0681612bdb565b9050919050565b60006020820190508181036000830152612f2681612c12565b9050919050565b60006020820190508181036000830152612f4681612c49565b9050919050565b60006020820190508181036000830152612f6681612c80565b9050919050565b60006020820190508181036000830152612f8681612cb7565b9050919050565b60006020820190508181036000830152612fa681612cee565b9050919050565b60006020820190508181036000830152612fc681612d25565b9050919050565b60006020820190508181036000830152612fe681612d82565b9050919050565b6000602082019050818103600083015261300681612db9565b9050919050565b60006020820190506130226000830184612df0565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561304b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561306c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006130ec826130ff565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613134826130ff565b9050919050565b6000819050919050565b6000819050919050565b60005b8381101561316d578082015181840152602081019050613152565b8381111561317c576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820b8e55e1c6c09c61829a84a893d2cc3c901d57b8d436c28d4b7620225c8f085d16c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","5061086560048036036108609190810190612908565b61191c565b005b61086f611574565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156108e1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016108d890612f6d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006109ad61258c565b6109c16109ba6005611977565b868661198c565b905060006109f382606001516109e560018560800151611adc90919063ffffffff16565b611b2690919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610a2a5781602001602082028038833980820191505090505b50905060008090505b8360400151811015610aac57610a558184016005611b9a90919063ffffffff16565b8282815181101515610a6357fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610a33565b50808360200151846080015114945094505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060098383604051808383808284378083019250505092505050908152602001604051809103902054905092915050565b610b7381600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101611bb590919063ffffffff16565b5050565b610b82600354610f1b565b6000600983836040518083838082843780830192505050925050509081526020016040518091039020819055505050565b610bbe600354610f1b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505050565b610c14600354610f1b565b610c28816007611c1490919063ffffffff16565b5050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d045780601f10610cd957610100808354040283529160200191610d04565b820191906000526020600020905b815481529060010190602001808311610ce757829003601f168201915b50505050509050919050565b6060610d1c6005611c44565b905090565b610d2c600354610f1b565b610d40816007611c6490919063ffffffff16565b5050565b610d4f600354610f1b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dce600354610f1b565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160008082016000905560018201600090555050600382016000610e3d91906125bc565b5050610e53816005611c1490919063ffffffff16565b50610e68816007611c1490919063ffffffff16565b5050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101549050919050565b610ec6600354610f1b565b610f1781600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611c9490919063ffffffff16565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110506040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561103c5780601f106110115761010080835404028352916020019161103c565b820191906000526020600020905b81548152906001019060200180831161101f57829003601f168201915b5050505050611cd89092919063ffffffff16565b901515611093576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161108a9190612ecb565b60405180910390fd5b5050565b60006110e0600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611dad565b9050919050565b6110ef611574565b6110f881611e21565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611143929190612604565b5061120d600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112089190810190612a1e565b611f5b565b60038190555060006003541415611246577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b611254600354610f1b565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030191906112a5929190612684565b50505050565b60606000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060606112fb82611f6e565b6040519080825280602002602001820160405280156113295781602001602082028038833980820191505090505b50905060008090505b61133b83611f6e565b81101561137e576113558184611f9290919063ffffffff16565b828281518110151561136357fe5b90602001906020020181815250508080600101915050611332565b508092505050919050565b60606113956007611c44565b905090565b606060006113a661258c565b6113ba6113b36007611977565b868661198c565b905060006113ec82606001516113de60018560800151611adc90919063ffffffff16565b611b2690919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156114235781602001602082028038833980820191505090505b50905060008090505b83604001518110156114a55761144e8184016007611b9a90919063ffffffff16565b828281518110151561145c57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061142c565b50808360200151846080015114945094505050509250929050565b60006114cd600354610f1b565b61150860016009858560405180838380828437808301925050509250505090815260200160405180910390205461201590919063ffffffff16565b6009848460405180838380828437808301925050509250505090815260200160405180910390208190555060098383604051808383808284378083019250505092505050908152602001604051809103902054905092915050565b600061156f6007611977565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611606576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016115fd90612fcd565b60405180910390fd5b565b611613600354610f1b565b6060604051908101604052806001815260200160408051908101604052806000815260200186815250815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160008201518160000155602082015181600101555050604082015181600301908051906020019061170d929190612704565b50905050611725846005611c6490919063ffffffff16565b5050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600014159050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561185e5780601f106118335761010080835404028352916020019161185e565b820191906000526020600020905b815481529060010190","","83016020830185838301111561285f57600080fd5b61286a83828461314f565b50505092915050565b600061287f8235613145565b905092915050565b60006020828403121561289957600080fd5b60006128a7848285016127a9565b91505092915050565b6000806000604084860312156128c557600080fd5b60006128d3868287016127a9565b935050602084013567ffffffffffffffff8111156128f057600080fd5b6128fc868287016127d1565b92509250509250925092565b6000806040838503121561291b57600080fd5b6000612929858286016127a9565b925050602061293a85828601612873565b9150509250929050565b6000806000806060858703121561295a57600080fd5b6000612968878288016127a9565b945050602061297987828801612873565b935050604085013567ffffffffffffffff81111561299657600080fd5b6129a2878288016127d1565b925092505092959194509250565b6000602082840312156129c257600080fd5b60006129d0848285016127bd565b91505092915050565b600080602083850312156129ec57600080fd5b600083013567ffffffffffffffff811115612a0657600080fd5b612a12858286016127d1565b92509250509250929050565b600060208284031215612a3057600080fd5b600082015167ffffffffffffffff811115612a4a57600080fd5b612a568482850161281d565b91505092915050565b60008060408385031215612a7257600080fd5b6000612a8085828601612873565b9250506020612a9185828601612873565b9150509250929050565b612aa4816130e1565b82525050565b6000612ab58261309b565b808452602084019350612ac783613081565b60005b82811015612af957612add868351612a9b565b612ae6826130c7565b9150602086019550600181019050612aca565b50849250505092915050565b6000612b10826130a6565b808452602084019350612b228361308e565b60005b82811015612b5457612b38868351612df0565b612b41826130d4565b9150602086019550600181019050612b25565b50849250505092915050565b612b69816130f3565b82525050565b6000612b7a826130bc565b808452612b8e81602086016020860161314f565b612b9781613182565b602085010191505092915050565b6000612bb0826130b1565b808452612bc481602086016020860161314f565b612bcd81613182565b602085010191505092915050565b6000601a82527f53534d3a756e5573655370616365206f7574206f6620757365640000000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000600682527f64713a6f6f6200000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000600882527f64713a656d7074790000000000000000000000000000000000000000000000006020830152604082019050919050565b612df98161311f565b82525050565b6000602082019050612e146000830184612a9b565b92915050565b60006020820190508181036000830152612e348184612aaa565b905092915050565b60006040820190508181036000830152612e568185612aaa565b9050612e656020830184612b60565b9392505050565b60006020820190508181036000830152612e868184612b05565b905092915050565b6000602082019050612ea36000830184612b60565b92915050565b60006020820190508181036000830152612ec38184612ba5565b905092915050565b60006020820190508181036000830152612ee58184612b6f565b905092915050565b60006020820190508181036000830152612f0681612bdb565b9050919050565b60006020820190508181036000830152612f2681612c12565b9050919050565b60006020820190508181036000830152612f4681612c6f565b9050919050565b60006020820190508181036000830152612f6681612ca6565b9050919050565b60006020820190508181036000830152612f8681612cdd565b9050919050565b60006020820190508181036000830152612fa681612d14565b9050919050565b60006020820190508181036000830152612fc681612d4b565b9050919050565b60006020820190508181036000830152612fe681612d82565b9050919050565b6000602082019050818103600083015261300681612db9565b9050919050565b60006020820190506130226000830184612df0565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561304b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561306c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006130ec826130ff565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613134826130ff565b9050919050565b6000819050919050565b6000819050919050565b60005b8381101561316d578082015181840152602081019050613152565b8381111561317c576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820e6f788cb172f1239b0c2eef2b8c5a4f1ac8871392b27c3bff48a3a743c8a49366c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"popTaskFront\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllOnlineNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"upAddFileFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteOnlineNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"addOnlineNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getAddFileFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNodeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"firstTaskInTaskQueue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllOnlineNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalOnlineNodeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getTasks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"resetAddFileFailedCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"pushTaskBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_POPTASKFRONT = "popTaskFront";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETALLONLINENODEADDRESSES = "getAllOnlineNodeAddresses";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_UPADDFILEFAILEDCOUNT = "upAddFileFailedCount";

    public static final String FUNC_NEWNODE = "newNode";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_DELETEONLINENODE = "deleteOnlineNode";

    public static final String FUNC_ADDONLINENODE = "addOnlineNode";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETADDFILEFAILEDCOUNT = "getAddFileFailedCount";

    public static final String FUNC_GETALLNODEADDRESSES = "getAllNodeAddresses";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_GETTOTALNODENUMBER = "getTotalNodeNumber";

    public static final String FUNC_FIRSTTASKINTASKQUEUE = "firstTaskInTaskQueue";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_GETTOTALONLINENODENUMBER = "getTotalOnlineNodeNumber";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETTASKS = "getTasks";

    public static final String FUNC_FREESTORAGE = "freeStorage";

    public static final String FUNC_USESTORAGE = "useStorage";

    public static final String FUNC_RESETADDFILEFAILEDCOUNT = "resetAddFileFailedCount";

    public static final String FUNC_PUSHTASKBACK = "pushTaskBack";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected NodeStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt popTaskFront(String nodeAddress) {
        final Function function = new Function(
                FUNC_POPTASKFRONT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] popTaskFront(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_POPTASKFRONT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPopTaskFront(String nodeAddress) {
        final Function function = new Function(
                FUNC_POPTASKFRONT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getPopTaskFrontInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_POPTASKFRONT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAllOnlineNodeAddresses() throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINENODEADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getStorageUsed(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt deleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteNode(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getStatus(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt upAddFileFailedCount(String cid) {
        final Function function = new Function(
                FUNC_UPADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] upAddFileFailedCount(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpAddFileFailedCount(String cid) {
        final Function function = new Function(
                FUNC_UPADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUpAddFileFailedCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getUpAddFileFailedCountOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt newNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newNode(String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getNewNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteOnlineNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteOnlineNode(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOnlineNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteOnlineNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEONLINENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt addOnlineNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addOnlineNode(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOnlineNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddOnlineNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDONLINENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean exist(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getAddFileFailedCount(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<String>, Boolean> getAllNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageTotal(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setStatus(String nodeAddress, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatus(String nodeAddress, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatus(String nodeAddress, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getTotalNodeNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALNODENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger firstTaskInTaskQueue(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_FIRSTTASKINTASKQUEUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String nodeAddress, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getAllOnlineNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINENODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getTotalOnlineNodeNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALONLINENODENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getAllNodeAddresses() throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getExt(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getTasks(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETTASKS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt freeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt useStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] useStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUseStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUseStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt resetAddFileFailedCount(String cid) {
        final Function function = new Function(
                FUNC_RESETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] resetAddFileFailedCount(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForResetAddFileFailedCount(String cid) {
        final Function function = new Function(
                FUNC_RESETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getResetAddFileFailedCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RESETADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt pushTaskBack(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_PUSHTASKBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] pushTaskBack(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PUSHTASKBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPushTaskBack(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_PUSHTASKBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getPushTaskBackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PUSHTASKBACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static NodeStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NodeStorage(contractAddress, client, credential);
    }

    public static NodeStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(NodeStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
