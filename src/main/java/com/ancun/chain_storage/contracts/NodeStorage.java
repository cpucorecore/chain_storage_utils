package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NodeStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","0480360361085b91908101906138f9565b611fb6565b005b34801561086e57600080fd5b50610889600480360361088491908101906138f9565b612118565b604051610896919061400a565b60405180910390f35b3480156108ab57600080fd5b506108c660048036036108c191908101906138f9565b6121fc565b6040516108d3919061410c565b60405180910390f35b3480156108e857600080fd5b5061090360048036036108fe9190810190613922565b61224f565b6040516109109190613fcd565b60405180910390f35b34801561092557600080fd5b50610940600480360361093b91908101906139e6565b612547565b005b34801561094e57600080fd5b50610969600480360361096491908101906139e6565b61259f565b005b34801561097757600080fd5b50610992600480360361098d9190810190613a8e565b6125fa565b6040516109a0929190613f9d565b60405180910390f35b3480156109b557600080fd5b506109d060048036036109cb9190810190613b06565b612773565b6040516109dd9190613f29565b60405180910390f35b3480156109f257600080fd5b50610a0d6004803603610a0891908101906138f9565b6127bc565b604051610a1a919061410c565b60405180910390f35b348015610a2f57600080fd5b50610a4a6004803603610a4591908101906138f9565b61280f565b604051610a57919061410c565b60405180910390f35b348015610a6c57600080fd5b50610a876004803603610a829190810190613b06565b612862565b604051610a949190613fcd565b60405180910390f35b600080838360405180838380828437808301925050509250505060405180910390209050610ae685600960008481526020019081526020016000206129fb90919063ffffffff16565b9150509392505050565b610afb600354611be9565b6000828260405180838380828437808301925050509250505060405180910390209050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009055610bc681600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612a2b90919063ffffffff16565b5050505050565b610bd5610d50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e9061406c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000838360405180838380828437808301925050509250505060405180910390209050610d4760086000838152602001908152602001600020612a42565b91505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610de2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd9906140ec565b60405180910390fd5b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001549050919050565b610e3e600354611be9565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000808201600090556001820160009055505060028201600080820160008082016000610eaf91906134e7565b5050505060048201600080820160008082016000610ecd91906134e7565b5050505060068201600080820160008082016000610eeb91906134e7565b50505050600882016000610eff9190613508565b5050610f15816005612a6290919063ffffffff16565b5050565b6000610f26600354611be9565b6000838360405180838380828437808301925050509250505060405180910390209050610f9d81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612a9290919063ffffffff16565b15610ff857610ff681600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612a2b90919063ffffffff16565b505b61104c81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612a9290919063ffffffff16565b15156110a8576110a681600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612aa990919063ffffffff16565b505b6110cd85600860008481526020019081526020016000206129fb90919063ffffffff16565b156110f9576110f78560086000848152602001908152602001600020612a6290919063ffffffff16565b505b61111e85600960008481526020019081526020016000206129fb90919063ffffffff16565b151561114b576111498560096000848152602001908152602001600020612ac090919063ffffffff16565b505b600060019050606061116e60086000858152602001908152602001600020612a42565b905060008090505b8151811015611206576111ea8460046000858581518110151561119557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612a9290919063ffffffff16565b15156111f95760009250611206565b8080600101915050611176565b508193505050509392505050565b60008083836040518083838082843780830192505050925050506040518091039020905061125d85600860008481526020019081526020016000206129fb90919063ffffffff16565b9150509392505050565b60006112736005612af0565b905090565b6000808383604051808383808284378083019250505092505050604051809103902090506112f081600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612a9290919063ffffffff16565b9150509392505050565b611305600354611be9565b61130d613550565b611315613550565b61131d613550565b60a06040519081016040528060408051908101604052806000815260200189815250815260200184815260200183815260200182815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160008201518160000155602082015181600101555050602082015181600201600082015181600001600082015181600001908051906020019061142a92919061356a565b5050505050604082015181600401600082015181600001600082015181600001908051906020019061145d92919061356a565b5050505050606082015181600601600082015181600001600082015181600001908051906020019061149092919061356a565b505050505060808201518160080190805190602001906114b19291906135b7565b509050506114c9876005612ac090919063ffffffff16565b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611504600354611be9565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055506115d081600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612aa990919063ffffffff16565b505050505050565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160010154119050919050565b6060611675600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612b05565b9050919050565b60606000611688613637565b61169c6116956005612af0565b8686612b1a565b905060006116ce82606001516116c060018560800151612c6a90919063ffffffff16565b612cb490919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156117055781602001602082028038833980820191505090505b50905060008090505b8360400151811015611787576117308184016005612d2890919063ffffffff16565b828281518110151561173e57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808060010191505061170e565b50808360200151846080015114945094505050509250929050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118385780601f1061180d57610100808354040283529160200191611838565b820191906000526020600020905b81548152906001019060200180831161181b57829003601f168201915b505050505081565b600061184d600354611b","","908152602001600020600201612d43565b9050919050565b60008083836040518083838082843780830192505050925050506040518091039020905060016128a360086000848152602001908152602001600020612af0565b1115156128b45760019150506129f5565b6000600760006128e0600060086000878152602001908152602001600020612d2890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000600190505b61295060086000858152602001908152602001600020612af0565b8110156129ed57600760006129808360086000888152602001908152602001600020612d2890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054821415156129e057600093505050506129f5565b8080600101915050612935565b506001925050505b92915050565b6000612a23836000018373ffffffffffffffffffffffffffffffffffffffff166001026130b8565b905092915050565b6000612a3a83600001836130db565b905092915050565b606080612a51836000016131d2565b905060608190508092505050919050565b6000612a8a836000018373ffffffffffffffffffffffffffffffffffffffff166001026130db565b905092915050565b6000612aa183600001836130b8565b905092915050565b6000612ab8836000018361322e565b905092915050565b6000612ae8836000018373ffffffffffffffffffffffffffffffffffffffff1660010261322e565b905092915050565b6000612afe826000016132a3565b9050919050565b6060612b13826000016131d2565b9050919050565b612b22613637565b612b2a613637565b60a060405190810160405280868152602001600081526020016000815260200160008152602001600181525090506000851480612b675750600084145b15612b755780915050612c63565b60328411612b835783612b86565b60325b8160600181815250508060600151816040018181525050612bb48160600151866132b490919063ffffffff16565b8160200181815250506000612bd68260600151876132fe90919063ffffffff16565b90506000811115612c0357612bf96001836020015161334890919063ffffffff16565b8260200181815250505b6001841115612c1757838260800181815250505b816020015182608001511115612c365781602001518260800181815250505b81602001518260800151148015612c4d5750600081115b15612c5d57808260400181815250505b81925050505b9392505050565b6000612cac83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061339f565b905092915050565b600080831415612cc75760009050612d22565b60008284029050828482811515612cda57fe5b04141515612d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d14906140cc565b60405180910390fd5b809150505b92915050565b6000612d3783600001836133fc565b60019004905092915050565b6000612d51826000016132a3565b9050919050565b60608383836040516020018084805190602001908083835b602083101515612d955780518252602082019150602081019050602083039250612d70565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612de85780518252602082019150602081019050602083039250612dc3565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b612e35610d50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e9e906140ac565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b81600001548111151515612fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fba9061408c565b60405180910390fd5b8082600001600082825403925050819055505050565b801561303f578260010154612ffb83856000015461334890919063ffffffff16565b1115151561303e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130359061402c565b60405180910390fd5b5b61305682846000015461334890919063ffffffff16565b8360000181905550505050565b600061307283600001836133fc565b905092915050565b600081600101548260000154111561309557600090506130b3565b6130b082600001548360010154612c6a90919063ffffffff16565b90505b919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811415156131c6576000600182039050600060018660000180549050039050818114151561317c576000866000018281548110151561313357fe5b9060005260206000200154905080876000018481548110151561315257fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561318b57fe5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506131cc565b60009150505b92915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561322257602002820191906000526020600020905b81548152602001906001019080831161320e575b50505050509050919050565b600061323a83836130b8565b151561329857826000018290806001815401808255809150509060018203906000526020600020016000909192909190915055508260000180549050836001016000848152602001908152602001600020819055506001905061329d565b600090505b92915050565b600081600001805490509050919050565b60006132f683836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613422565b905092915050565b600061334083836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250613487565b905092915050565b6000808284019050838110151515613395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338c9061404c565b60405180910390fd5b8091505092915050565b600083831115829015156133e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e0919061400a565b60405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561340f57fe5b9060005260206000200154905092915050565b60008083118290151561346b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613462919061400a565b60405180910390fd5b506000838581151561347957fe5b049050809150509392505050565b600080831415829015156134d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134c8919061400a565b60405180910390fd5b5082848115156134dd57fe5b0690509392505050565b50805460008255906000526020600020908101906135059190613767565b50565b50805460018160011615610100020316600290046000825580601f1061352e575061354d565b601f01602090049060005260206000209081019061354c919061378c565b5b50565b6020604051908101604052806135646137b1565b81525090565b8280548282559060005260206000209081019282156135a6579160200282015b828111156135a557825182559160200191906001019061358a565b5b5090506135b39190613767565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106135f857805160ff1916838001178555613626565b82800160010185558215613626579182015b8281111561362557825182559160200191906001019061360a565b5b509050613633919061378c565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136a857803560ff19168380011785556136d6565b828001600101855582156136d6579182015b828111156136d55782358255916020019190600101906136ba565b5b5090506136e3919061378c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061372857805160ff1916838001178555613756565b82800160010185558215613756579182015b8281111561375557825182559160200191906001019061373a565b5b509050613763919061378c565b5090565b61378991905b8082111561378557600081600090555060010161376d565b5090565b90565b6137ae91905b808211156137aa576000816000905550600101613792565b5090565b90565b602060405190810160405280606081525090565b60006137d18235614232565b905092915050565b60006137e58235614244565b905092915050565b60008083601f840112151561380157600080fd5b8235905067ffffffffffffffff81111561381a57600080fd5b60208301915083600182028301111561383257600080fd5b9250929050565b600082601f830112151561384c57600080","fd5b813561385f61385a82614154565b614127565b9150808252602083016020830185838301111561387b57600080fd5b613886838284614258565b50505092915050565b600082601f83011215156138a257600080fd5b81516138b56138b082614154565b614127565b915080825260208301602083018583830111156138d157600080fd5b6138dc838284614267565b50505092915050565b60006138f1823561424e565b905092915050565b60006020828403121561390b57600080fd5b6000613919848285016137c5565b91505092915050565b60008060006040848603121561393757600080fd5b6000613945868287016137c5565b935050602084013567ffffffffffffffff81111561396257600080fd5b61396e868287016137ed565b92509250509250925092565b6000806000806060858703121561399057600080fd5b600061399e878288016137c5565b945050602085013567ffffffffffffffff8111156139bb57600080fd5b6139c7878288016137ed565b935093505060406139da878288016138e5565b91505092959194509250565b600080604083850312156139f957600080fd5b6000613a07858286016137c5565b9250506020613a18858286016138e5565b9150509250929050565b60008060008060608587031215613a3857600080fd5b6000613a46878288016137c5565b9450506020613a57878288016138e5565b935050604085013567ffffffffffffffff811115613a7457600080fd5b613a80878288016137ed565b925092505092959194509250565b600080600060608486031215613aa357600080fd5b6000613ab1868287016137c5565b9350506020613ac2868287016138e5565b9250506040613ad3868287016138e5565b9150509250925092565b600060208284031215613aef57600080fd5b6000613afd848285016137d9565b91505092915050565b60008060208385031215613b1957600080fd5b600083013567ffffffffffffffff811115613b3357600080fd5b613b3f858286016137ed565b92509250509250929050565b600060208284031215613b5d57600080fd5b600082013567ffffffffffffffff811115613b7757600080fd5b613b8384828501613839565b91505092915050565b600060208284031215613b9e57600080fd5b600082015167ffffffffffffffff811115613bb857600080fd5b613bc48482850161388f565b91505092915050565b60008060408385031215613be057600080fd5b6000613bee858286016138e5565b9250506020613bff858286016138e5565b9150509250929050565b613c12816141e0565b82525050565b6000613c238261419a565b808452602084019350613c3583614180565b60005b82811015613c6757613c4b868351613c09565b613c54826141c6565b9150602086019550600181019050613c38565b50849250505092915050565b6000613c7e826141a5565b808452602084019350613c908361418d565b60005b82811015613cc257613ca6868351613cdd565b613caf826141d3565b9150602086019550600181019050613c93565b50849250505092915050565b613cd7816141f2565b82525050565b613ce6816141fe565b82525050565b6000613cf7826141bb565b808452613d0b816020860160208601614267565b613d148161429a565b602085010191505092915050565b6000613d2d826141b0565b808452613d41816020860160208601614267565b613d4a8161429a565b602085010191505092915050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b613f0881614228565b82525050565b6000602082019050613f236000830184613c09565b92915050565b60006020820190508181036000830152613f438184613c18565b905092915050565b60006040820190508181036000830152613f658185613c18565b9050613f746020830184613cce565b9392505050565b60006020820190508181036000830152613f958184613c73565b905092915050565b60006040820190508181036000830152613fb78185613c73565b9050613fc66020830184613cce565b9392505050565b6000602082019050613fe26000830184613cce565b92915050565b600060208201905081810360008301526140028184613d22565b905092915050565b600060208201905081810360008301526140248184613cec565b905092915050565b6000602082019050818103600083015261404581613d58565b9050919050565b6000602082019050818103600083015261406581613d8f565b9050919050565b6000602082019050818103600083015261408581613dc6565b9050919050565b600060208201905081810360008301526140a581613dfd565b9050919050565b600060208201905081810360008301526140c581613e34565b9050919050565b600060208201905081810360008301526140e581613e6b565b9050919050565b6000602082019050818103600083015261410581613ec8565b9050919050565b60006020820190506141216000830184613eff565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561414a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561416b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006141eb82614208565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061423d82614208565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561428557808201518184015260208101905061426a565b83811115614294576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058208100fb2eb1d7df2c60b47e72430770372844ff96d39dc96e158eb092024b0f046c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b5060405160208062004a9a8339810180604052620000579190810190620005bd565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000f481620000fc640100000000026401000000009004565b5050620007a5565b62000115620002a2640100000000026401000000009004565b6200013481620003396401000000000262002e8c176401000000009004565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190620001819291906200049a565b5062000265600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200020b57600080fd5b505afa15801562000220573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200024b9190810190620005e9565b620004876401000000000262002fc6176401000000009004565b600381905550600060035414156200029f577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000337576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016200032e90620006be565b60405180910390fd5b565b62000352620002a2640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620003c7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401620003be906200069c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004dd57805160ff19168380011785556200050e565b828001600101855582156200050e579182015b828111156200050d578251825591602001919060010190620004f0565b5b5090506200051d919062000521565b5090565b6200054691905b808211156200054257600081600090555060010162000528565b5090565b90565b60006200055782516200075b565b905092915050565b600082601f83011215156200057357600080fd5b81516200058a62000584826200070e565b620006e0565b91508082526020830160208301858383011115620005a757600080fd5b620005b48382846200076f565b50505092915050565b600060208284031215620005d057600080fd5b6000620005e08482850162000549565b91505092915050565b600060208284031215620005fc57600080fd5b600082015167ffffffffffffffff8111156200061757600080fd5b62000625848285016200055f565b91505092915050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b60006020820190508181036000830152620006b7816200062e565b9050919050565b60006020820190508181036000830152620006d98162000665565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200070457600080fd5b8060405250919050565b600067ffffffffffffffff8211156200072657600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000768826200073b565b9050919050565b60005b838110156200078f57808201518184015260208101905062000772565b838111156200079f576000848401525b50505050565b6142e580620007b56000396000f3fe608060405260043610610258576000357c0100000000000000000000000000000000000000000000000000000000900480637279e3cd1161014b578063b1eb3c2e116100c8578063d0613a5f1161008c578063d0613a5f1461097f578063df0a42ea146109bc578063ea36ac4a146109fa578063eccbe27214610a37578063fdc4793914610a7457610258565b8063b1eb3c2e1461089a578063b2236b64146108b1578063c116b3ba146108da578063c229316914610917578063cdd32d771461094257610258565b8063977b65901161010f578063977b65901461077d5780639786acf2146107a6578063a0b5ad1e146107e3578063ae6cb4c114610820578063af700e431461085d57610258565b80637279e3cd146106885780637d072252146106c557806380d52989146106ee5780638b6ceb4f1461072b57806391726a991461075457610258565b80634b532010116101d957806352fa65f41161019d57806352fa65f41461056b5780635fe906931461059457806366e1bd7f146105d15780636874ba701461060e57806368aa0d871461064b57610258565b80634b532010146104725780634c116b5c146104af5780634f263593146104d85780635089e2c8146105155780635218563e1461054057610258565b8063367c5c6b11610220578063367c5c6b146103555780633eab5fba146103925780633f90dee3146103cf5780634a47ceb71461040c5780634b17e3bb1461044957610258565b806305282c701461025d578063091d0757146102865780630a2b67ee146102c45780630ec991c2146103015780632817fe6a1461032c575b600080fd5b34801561026957600080fd5b50610284600480360361027f91908101906138f9565b610a9d565b005b34801561029257600080fd5b506102ad60048036036102a89190810190613bcd565b610bd7565b6040516102bb929190613f4b565b60405180910390f35b3480156102d057600080fd5b506102eb60048036036102e69190810190613922565b610cfd565b6040516102f89190613fcd565b60405180910390f35b34801561030d57600080fd5b50610316610d50565b6040516103239190613f0e565b60405180910390f35b34801561033857600080fd5b50610353600480360361034e91908101906139e6565b610d76565b005b34801561036157600080fd5b5061037c60048036036103779190810190613b06565b610dce565b604051610389919061410c565b60405180910390f35b34801561039e57600080fd5b506103b960048036036103b491908101906138f9565b610e16565b6040516103c6919061400a565b60405180910390f35b3480156103db57600080fd5b506103f660048036036103f19190810190613922565b610efa565b6040516104039190613fcd565b60405180910390f35b34801561041857600080fd5b50610433600480360361042e9190810190613b06565b6111f5565b6040516104409190613f29565b60405180910390f35b34801561045557600080fd5b50610470600480360361046b91908101906139e6565b61123e565b005b34801561047e57600080fd5b50610499600480360361049491908101906138f9565b611297565b6040516104a69190613f7b565b60405180910390f35b3480156104bb57600080fd5b506104d660048036036104d1919081019061397a565b6112ea565b005b3480156104e457600080fd5b506104ff60048036036104fa9190810190613922565b6113c9565b60405161050c9190613fcd565b60405180910390f35b34801561052157600080fd5b5061052a61141c565b6040516105379190613f0e565b60405180910390f35b34801561054c57600080fd5b50610555611442565b604051610562919061410c565b60405180910390f35b34801561057757600080fd5b50610592600480360361058d91908101906138f9565b611453565b005b3480156105a057600080fd5b506105bb60048036036105b691908101906138f9565b611539565b6040516105c8919061410c565b60405180910390f35b3480156105dd57600080fd5b506105f860048036036105f39190810190613b06565b61158c565b6040516106059190613fcd565b60405180910390f35b34801561061a57600080fd5b50610635600480360361063091908101906138f9565b611725565b604051610642919061410c565b60405180910390f35b34801561065757600080fd5b50610672600480360361066d9190810190613922565b611778565b60405161067f9190613fcd565b60405180910390f35b34801561069457600080fd5b506106af60048036036106aa91908101906138f9565b611a70565b6040516106bc919061410c565b60405180910390f35b3480156106d157600080fd5b506106ec60048036036106e79190810190613922565b611abf565b005b3480156106fa57600080fd5b50610715600480360361071091908101906138f9565b611b9c565b604051610722919061410c565b60405180910390f35b34801561073757600080fd5b50610752600480360361074d9190810190613add565b611bef565b005b34801561076057600080fd5b5061077b600480360361077691908101906138f9565b611d6b565b005b34801561078957600080fd5b506107a4600480360361079f9190810190613922565b611ecd565b005b3480156107b257600080fd5b506107cd60048036036107c89190810190613922565b611f2f565b6040516107da9190613fcd565b60405180910390f35b3480156107ef57600080fd5b5061080a600480360361080591908101906138f9565b611fb1565b604051610817919061410c565b60405180910390f35b34801561082c57600080fd5b506108476004803603610842919081019061397a565b612004565b604051","610854919061410c565b60405180910390f35b34801561086957600080fd5b50610884600480360361087f9190810190613b06565b6121b1565b6040516108919190613f29565b60405180910390f35b3480156108a657600080fd5b506108af6121fa565b005b3480156108bd57600080fd5b506108d860048036036108d39190810190613a22565b61228e565b005b3480156108e657600080fd5b5061090160048036036108fc91908101906138f9565b612467565b60405161090e9190613fcd565b60405180910390f35b34801561092357600080fd5b5061092c6124b8565b6040516109399190613fe8565b60405180910390f35b34801561094e57600080fd5b5061096960048036036109649190810190613b4b565b612556565b6040516109769190613f29565b60405180910390f35b34801561098b57600080fd5b506109a660048036036109a191908101906138f9565b612587565b6040516109b3919061410c565b60405180910390f35b3480156109c857600080fd5b506109e360048036036109de9190810190613a8e565b6125d6565b6040516109f1929190613f9d565b60405180910390f35b348015610a0657600080fd5b50610a216004803603610a1c9190810190613922565b61274f565b604051610a2e9190613fcd565b60405180910390f35b348015610a4357600080fd5b50610a5e6004803603610a5991908101906138f9565b61294d565b604051610a6b9190613f7b565b60405180910390f35b348015610a8057600080fd5b50610a9b6004803603610a9691908101906139e6565b6129a0565b005b610aa56121fa565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b17576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b0e9061408c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610be36134e7565b610bf7610bf060056129fb565b8686612a10565b90506000610c298260600151610c1b60018560800151612b6090919063ffffffff16565b612baa90919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610c605781602001602082028038833980820191505090505b50905060008090505b8360400151811015610ce257610c8b8184016005612c1e90919063ffffffff16565b8282815181101515610c9957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610c69565b50808360200151846080015114945094505050509250929050565b600080838360405180838380828437808301925050509250505060405180910390209050610d468560086000848152602001908152602001600020612c3990919063ffffffff16565b9150509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dca81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001612c6990919063ffffffff16565b5050565b600080838360405180838380828437808301925050509250505060405180910390209050610e0d600860008381526020019081526020016000206129fb565b91505092915050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610eee5780601f10610ec357610100808354040283529160200191610eee565b820191906000526020600020905b815481529060010190602001808311610ed157829003601f168201915b50505050509050919050565b6000610f07600354611bef565b6000838360405180838380828437808301925050509250505060405180910390209050610f7e81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612cc890919063ffffffff16565b15610fd957610fd781600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612cdf90919063ffffffff16565b505b61102d81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cc890919063ffffffff16565b15156110895761108781600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cf690919063ffffffff16565b505b6110ae8560086000848152602001908152602001600020612c3990919063ffffffff16565b156110da576110d88560086000848152602001908152602001600020612d0d90919063ffffffff16565b505b6110ff8560096000848152602001908152602001600020612c3990919063ffffffff16565b151561112c5761112a8560096000848152602001908152602001600020612d3d90919063ffffffff16565b505b600060019050606061114f60086000858152602001908152602001600020612d6d565b905060008090505b81518110156111e7576111cb8460046000858581518110151561117657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cc890919063ffffffff16565b15156111da57600092506111e7565b8080600101915050611157565b508193505050509392505050565b6060600083836040518083838082843780830192505050925050506040518091039020905061123560086000838152602001908152602001600020612d6d565b91505092915050565b611249600354611bef565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101819055505050565b60606112e3600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612d8d565b9050919050565b6112f5600354611bef565b600083836040518083838082843780830192505050925050506040518091039020905081600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055506113c181600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cf690919063ffffffff16565b505050505050565b6000808383604051808383808284378083019250505092505050604051809103902090506114128560096000848152602001908152602001600020612c3990919063ffffffff16565b9150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061144e60056129fb565b905090565b61145e600354611bef565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160008082016000905560018201600090555050600282016000808201600080820160006114cf9190613517565b50505050600482016000808201600080820160006114ed9190613517565b505050506006820160008082016000808201600061150b9190613517565b5050505060088201600061151f9190613538565b5050611535816005612d0d90919063ffffffff16565b5050565b6000611585600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612da2565b9050919050565b60008083836040518083838082843780830192505050925050506040518091039020905060016115cd600860008481526020019081526020016000206129fb565b1115156115de57600191505061171f565b60006007600061160a600060086000878152602001908152602001600020612c1e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000600190505b61167a600860008581526020019081526020016000206129fb565b81101561171757600760006116aa8360086000888152602001908152602001600020612c1e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020548214151561170a576000935050505061171f565b808060010191505061165f565b506001925050505b92915050565b6000611771600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612da2565b9050919050565b6000611785600354611bef565b60008383604051808383808284378083019250505092505050604051809103902090506117fc81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cc890919063ffffffff16565b156118575761185581600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cdf","90919063ffffffff16565b505b6118ab81600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612cc890919063ffffffff16565b156119065761190481600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612cdf90919063ffffffff16565b505b61192b8560096000848152602001908152602001600020612c3990919063ffffffff16565b15611957576119558560096000848152602001908152602001600020612d0d90919063ffffffff16565b505b61197c85600a6000848152602001908152602001600020612c3990919063ffffffff16565b156119a8576119a685600a6000848152602001908152602001600020612d0d90919063ffffffff16565b505b60006001905060606119cb600a6000858152602001908152602001600020612d6d565b905060008090505b8151811015611a6257611a47846004600085858151811015156119f257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cc890919063ffffffff16565b15611a555760009250611a62565b80806001019150506119d3565b508193505050509392505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600101549050919050565b611aca600354611bef565b6000828260405180838380828437808301925050509250505060405180910390209050600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009055611b9581600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cdf90919063ffffffff16565b5050505050565b6000611be8600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612da2565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d246040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d105780601f10611ce557610100808354040283529160200191611d10565b820191906000526020600020905b815481529060010190602001808311611cf357829003601f168201915b5050505050612db79092919063ffffffff16565b901515611d67576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611d5e919061400a565b60405180910390fd5b5050565b611d736121fa565b611d7c81612e8c565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611dc7929190613580565b50611e91600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b158015611e4f57600080fd5b505afa158015611e63573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611e8c9190810190613b8c565b612fc6565b60038190555060006003541415611eca577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b611ed8600354611bef565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008019190611f29929190613600565b50505050565b600080838360405180838380828437808301925050509250505060405180910390209050611fa781600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612cc890919063ffffffff16565b9150509392505050565b6000611ffd600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001612fd9565b9050919050565b6000612011600354611bef565b60008484604051808383808284378083019250505092505050604051809103902090506120598660086000848152602001908152602001600020612c3990919063ffffffff16565b15156120db576120848660086000848152602001908152602001600020612d3d90919063ffffffff16565b5082600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055505b61212f81600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612cc890919063ffffffff16565b151561218b5761218981600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201612cf690919063ffffffff16565b505b6121a6600860008381526020019081526020016000206129fb565b915050949350505050565b606060008383604051808383808284378083019250505092505050604051809103902090506121f1600a6000838152602001908152602001600020612d6d565b91505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561228c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612283906140cc565b60405180910390fd5b565b612299600354611bef565b6122a1613680565b6122a9613680565b6122b1613680565b60a06040519081016040528060408051908101604052806000815260200189815250815260200184815260200183815260200182815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815250600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000016000820151816000015560208201518160010155505060208201518160020160008201518160000160008201518160000190805190602001906123be92919061369a565b505050505060408201518160040160008201518160000160008201518160000190805190602001906123f192919061369a565b5050505050606082015181600601600082015181600001600082015181600001908051906020019061242492919061369a565b505050505060808201518160080190805190602001906124459291906136e7565b5090505061245d876005612d3d90919063ffffffff16565b5050505050505050565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160010154119050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561254e5780601f106125235761010080835404028352916020019161254e565b820191906000526020600020905b81548152906001019060200180831161253157829003601f168201915b505050505081565b606060008280519060200120905061257f60096000838152602001908152602001600020612d6d565b915050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600001549050919050565b606060006125e26134e7565b61263661262f600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401612da2565b8686612a10565b90506000612668826060015161265a60018560800151612b6090919063ffffffff16565b612baa90919063ffffffff16565b90506060826040015160405190808252806020026020018201604052801561269f5781602001602082028038833980820191505090505b50905060008090505b83604001518110156127335761270a818401600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040161301790919063ffffffff16565b828281518110151561271857fe5b906020019060200201818152505080806001019150506126a8565b5080836020015184608001511494509450505050935093915050565b600061275c600354611bef565b60008383604051808383808284378083019250505092505050604051809103902090506127a485600a6000848152602001908152602001600020612c3990919063ffffffff16565b15156127d1576127cf85600a6000848152602001908152602001600020612d3d90919063ffffffff16565b505b61282581600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601612cc890919063ffffffff16565b15156128815761287f81600460008873ffffffffffffffffffffffffffffffffffffffff16","","fd5b813561385f61385a82614154565b614127565b9150808252602083016020830185838301111561387b57600080fd5b613886838284614258565b50505092915050565b600082601f83011215156138a257600080fd5b81516138b56138b082614154565b614127565b915080825260208301602083018583830111156138d157600080fd5b6138dc838284614267565b50505092915050565b60006138f1823561424e565b905092915050565b60006020828403121561390b57600080fd5b6000613919848285016137c5565b91505092915050565b60008060006040848603121561393757600080fd5b6000613945868287016137c5565b935050602084013567ffffffffffffffff81111561396257600080fd5b61396e868287016137ed565b92509250509250925092565b6000806000806060858703121561399057600080fd5b600061399e878288016137c5565b945050602085013567ffffffffffffffff8111156139bb57600080fd5b6139c7878288016137ed565b935093505060406139da878288016138e5565b91505092959194509250565b600080604083850312156139f957600080fd5b6000613a07858286016137c5565b9250506020613a18858286016138e5565b9150509250929050565b60008060008060608587031215613a3857600080fd5b6000613a46878288016137c5565b9450506020613a57878288016138e5565b935050604085013567ffffffffffffffff811115613a7457600080fd5b613a80878288016137ed565b925092505092959194509250565b600080600060608486031215613aa357600080fd5b6000613ab1868287016137c5565b9350506020613ac2868287016138e5565b9250506040613ad3868287016138e5565b9150509250925092565b600060208284031215613aef57600080fd5b6000613afd848285016137d9565b91505092915050565b60008060208385031215613b1957600080fd5b600083013567ffffffffffffffff811115613b3357600080fd5b613b3f858286016137ed565b92509250509250929050565b600060208284031215613b5d57600080fd5b600082013567ffffffffffffffff811115613b7757600080fd5b613b8384828501613839565b91505092915050565b600060208284031215613b9e57600080fd5b600082015167ffffffffffffffff811115613bb857600080fd5b613bc48482850161388f565b91505092915050565b60008060408385031215613be057600080fd5b6000613bee858286016138e5565b9250506020613bff858286016138e5565b9150509250929050565b613c12816141e0565b82525050565b6000613c238261419a565b808452602084019350613c3583614180565b60005b82811015613c6757613c4b868351613c09565b613c54826141c6565b9150602086019550600181019050613c38565b50849250505092915050565b6000613c7e826141a5565b808452602084019350613c908361418d565b60005b82811015613cc257613ca6868351613cdd565b613caf826141d3565b9150602086019550600181019050613c93565b50849250505092915050565b613cd7816141f2565b82525050565b613ce6816141fe565b82525050565b6000613cf7826141bb565b808452613d0b816020860160208601614267565b613d148161429a565b602085010191505092915050565b6000613d2d826141b0565b808452613d41816020860160208601614267565b613d4a8161429a565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601d82527f53534d3a7573655370616365207370616365206e6f7420656e6f7567680000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601d82527f6e6577206f776e657220697320746865207a65726f20616464726573730000006020830152604082019050919050565b6000601f82527f6e6577206d616e6167657220697320746865207a65726f2061646472657373006020830152604082019050919050565b6000601782527f63616c6c6572206973206e6f7420746865206f776e65720000000000000000006020830152604082019050919050565b6000601982527f53534d3a667265655370616365206f7574206f662075736564000000000000006020830152604082019050919050565b613f0881614228565b82525050565b6000602082019050613f236000830184613c09565b92915050565b60006020820190508181036000830152613f438184613c18565b905092915050565b60006040820190508181036000830152613f658185613c18565b9050613f746020830184613cce565b9392505050565b60006020820190508181036000830152613f958184613c73565b905092915050565b60006040820190508181036000830152613fb78185613c73565b9050613fc66020830184613cce565b9392505050565b6000602082019050613fe26000830184613cce565b92915050565b600060208201905081810360008301526140028184613d22565b905092915050565b600060208201905081810360008301526140248184613cec565b905092915050565b6000602082019050818103600083015261404581613d58565b9050919050565b6000602082019050818103600083015261406581613db5565b9050919050565b6000602082019050818103600083015261408581613dec565b9050919050565b600060208201905081810360008301526140a581613e23565b9050919050565b600060208201905081810360008301526140c581613e5a565b9050919050565b600060208201905081810360008301526140e581613e91565b9050919050565b6000602082019050818103600083015261410581613ec8565b9050919050565b60006020820190506141216000830184613eff565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561414a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561416b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006141eb82614208565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061423d82614208565b9050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561428557808201518184015260208101905061426a565b83811115614294576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a72305820d430a737357762b6d15b39430597ab4ccfe5d4b3be586ecaa7b574a3297eee706c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isFileAdded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanAddFileNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isCanAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"fileExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanAddFileCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeCanAddFile\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanAddFileNodeCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getCidCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanDeleteFileCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeCanDeleteFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanDeleteFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeDeleteFile\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"freeStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"useStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCidHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getCanDeleteFileNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"availableSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeCanAddFileCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isSizeConsistent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"","name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ISFILEADDED = "isFileAdded";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETCANADDFILENODEADDRESSES = "getCanAddFileNodeAddresses";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_NODEADDFILE = "nodeAddFile";

    public static final String FUNC_ISCANADDFILE = "isCanAddFile";

    public static final String FUNC_GETNODECOUNT = "getNodeCount";

    public static final String FUNC_FILEEXIST = "fileExist";

    public static final String FUNC_NEWNODE = "newNode";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETNODECANADDFILECIDHASHES = "getNodeCanAddFileCidHashes";

    public static final String FUNC_GETALLNODEADDRESSES = "getAllNodeAddresses";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NODECANADDFILE = "nodeCanAddFile";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_GETNODEADDRESSES = "getNodeAddresses";

    public static final String FUNC_GETCANADDFILENODECOUNT = "getCanAddFileNodeCount";

    public static final String FUNC_GETCIDCOUNT = "getCidCount";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_GETNODECANDELETEFILECIDHASHES = "getNodeCanDeleteFileCidHashes";

    public static final String FUNC_NODECANDELETEFILE = "nodeCanDeleteFile";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETNODECANDELETEFILECOUNT = "getNodeCanDeleteFileCount";

    public static final String FUNC_NODEDELETEFILE = "nodeDeleteFile";

    public static final String FUNC_FREESTORAGE = "freeStorage";

    public static final String FUNC_USESTORAGE = "useStorage";

    public static final String FUNC_GETCIDHASHES = "getCidHashes";

    public static final String FUNC_GETCANDELETEFILENODEADDRESSES = "getCanDeleteFileNodeAddresses";

    public static final String FUNC_AVAILABLESPACE = "availableSpace";

    public static final String FUNC_GETNODECANADDFILECOUNT = "getNodeCanAddFileCount";

    public static final String FUNC_ISSIZECONSISTENT = "isSizeConsistent";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected NodeStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Boolean isFileAdded(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISFILEADDED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getCanAddFileNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANADDFILENODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getStorageUsed(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt deleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteNode(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteNode(String nodeAddress) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeAddFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeAddFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeAddFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODEADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isCanAddFile(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISCANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getNodeCount() throws ContractException {
        final Function function = new Function(FUNC_GETNODECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean fileExist(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_FILEEXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt newNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newNode(String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewNode(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NEWNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getNewNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Boolean exist(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getNodeCanAddFileCidHashes(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANADDFILECIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<String>, Boolean> getAllNodeAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLNODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanAddFile(String nodeAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanAddFile(String nodeAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getNodeCanAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getNodeCanAddFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODECANADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getStorageTotal(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String nodeAddress, BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String nodeAddress, BigInteger value) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List getNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETNODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getCanAddFileNodeCount(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANADDFILENODECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getCidCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETCIDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public List getNodeCanDeleteFileCidHashes(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANDELETEFILECIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt nodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeCanDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeCanDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeCanDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeCanDeleteFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODECANDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getExt(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getNodeCanDeleteFileCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANDELETEFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt nodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeDeleteFile(String nodeAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeDeleteFile(String nodeAddress, String cid) {
        final Function function = new Function(
                FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNodeDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getNodeDeleteFileOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NODEDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt freeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] freeStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFreeStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_FREESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFreeStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FREESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt useStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] useStorage(String nodeAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUseStorage(String nodeAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_USESTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUseStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USESTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<byte[]>, Boolean> getCidHashes(String nodeAddress, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, Boolean>(
                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public List getCanDeleteFileNodeAddresses(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETCANDELETEFILENODEADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger availableSpace(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_AVAILABLESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getNodeCanAddFileCount(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETNODECANADDFILECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isSizeConsistent(String cid) throws ContractException {
        final Function function = new Function(FUNC_ISSIZECONSISTENT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static NodeStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NodeStorage(contractAddress, client, credential);
    }

    public static NodeStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(NodeStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
