package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class File extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405160208062004426833981018060405262000033919081019062000342565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001327f46696c6500000000000000000000000000000000000000000000000000000000620001c8640100000000026401000000009004565b6060604051908101604052807f557365720000000000000000000000000000000000000000000000000000000081526020017f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f5461736b000000000000000000000000000000000000000000000000000000008152506004906003620001c092919062000203565b5050620003b6565b806040516020018082815260200191505060405160208183030381529060405260009080519060200190620001ff92919062000255565b5050565b82805482825590600052602060002090810192821562000242579160200282015b828111156200024157825182559160200191906001019062000224565b5b509050620002519190620002dc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029857805160ff1916838001178555620002c9565b82800160010185558215620002c9579182015b82811115620002c8578251825591602001919060010190620002ab565b5b509050620002d8919062000304565b5090565b6200030191905b80821115620002fd576000816000905550600101620002e3565b5090565b90565b6200032991905b80821115620003255760008160009055506001016200030b565b5090565b90565b60006200033a8251620003a2565b905092915050565b6000602082840312156200035557600080fd5b600062000365848285016200032c565b91505092915050565b60006200037b8262000382565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003af826200036e565b9050919050565b61406080620003c66000396000f3fe60806040526004361061019e576000357c0100000000000000000000000000000000000000000000000000000000900480639137c1a7116100ee578063d5c2c8ca116100a7578063e96d64a811610081578063e96d64a8146105db578063eb45a7f314610604578063ec18665d1461062f578063fd6fb471146106585761019e565b8063d5c2c8ca1461054a578063deda606614610561578063e0b3d83c1461059e5761019e565b80639137c1a714610417578063930fc6ad146104405780639fb8657b1461047d578063b0fe2182146104ba578063c533f8f8146104e3578063d0ebdbe7146105215761019e565b80632efc6ee71161015b5780636057d21b116101355780636057d21b1461035b57806375d0c0dc146103985780638aed3c32146103c35780638da5cb5b146103ec5761019e565b80632efc6ee7146102da5780633408f73a14610305578063481c6a75146103305761019e565b806301e8ffaa146101a357806304f3bcec146101e1578063057af1c41461020c578063126779c21461024957806313af40351461027457806321f8a7211461029d575b600080fd5b3480156101af57600080fd5b506101ca60048036036101c5919081019061385f565b610681565b6040516101d8929190613bab565b60405180910390f35b3480156101ed57600080fd5b506101f6610749565b6040516102039190613c33565b60405180910390f35b34801561021857600080fd5b50610233600480360361022e9190810190613756565b61076f565b6040516102409190613bfd565b60405180910390f35b34801561025557600080fd5b5061025e610827565b60405161026b9190613bdb565b60405180910390f35b34801561028057600080fd5b5061029b600480360361029691908101906135b1565b61087f565b005b3480156102a957600080fd5b506102c460048036036102bf919081019061372d565b610c0d565b6040516102d19190613aee565b60405180910390f35b3480156102e657600080fd5b506102ef610c4a565b6040516102fc9190613de6565b60405180910390f35b34801561031157600080fd5b5061031a610cf2565b6040516103279190613aee565b60405180910390f35b34801561033c57600080fd5b50610345610e94565b6040516103529190613aee565b60405180910390f35b34801561036757600080fd5b50610382600480360361037d9190810190613756565b610eba565b60405161038f9190613b89565b60405180910390f35b3480156103a457600080fd5b506103ad610f77565b6040516103ba9190613d72565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036036103e5919081019061372d565b611015565b005b3480156103f857600080fd5b506104016112d3565b60405161040e9190613aee565b60405180910390f35b34801561042357600080fd5b5061043e600480360361043991908101906135b1565b6112f9565b005b34801561044c57600080fd5b50610467600480360361046291908101906138cb565b611530565b6040516104749190613bfd565b60405180910390f35b34801561048957600080fd5b506104a4600480360361049f9190810190613756565b6115e8565b6040516104b19190613b89565b60405180910390f35b3480156104c657600080fd5b506104e160048036036104dc91908101906137f3565b6116a5565b005b3480156104ef57600080fd5b5061050a6004803603610505919081019061385f565b6119cf565b604051610518929190613bab565b60405180910390f35b34801561052d57600080fd5b50610548600480360361054391908101906135b1565b611a97565b005b34801561055657600080fd5b5061055f611e09565b005b34801561056d57600080fd5b5061058860048036036105839190810190613756565b6120da565b6040516105959190613de6565b60405180910390f35b3480156105aa57600080fd5b506105c560048036036105c091908101906138cb565b612192565b6040516105d29190613bfd565b60405180910390f35b3480156105e757600080fd5b5061060260048036036105fd9190810190613603565b61224a565b005b34801561061057600080fd5b506106196125eb565b6040516106269190613de6565b60405180910390f35b34801561063b57600080fd5b506106566004803603610651919081019061379b565b612693565b005b34801561066457600080fd5b5061067f600480360361067a9190810190613603565b612c30565b005b6060600061068d61300a565b73ffffffffffffffffffffffffffffffffffffffff166301e8ffaa878787876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016106e79493929190613d32565b60006040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061073c91908101906136b0565b9150915094509492505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061077961300a565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c484846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107cf929190613caa565b60206040518083038186803b1580156107e757600080fd5b505afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061081f9190810190613704565b905092915050565b6060600480548060200260200160405190810160405280929190818152602001828054801561087557602002820191906000526020600020905b815481526020019060010190808311610861575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b26040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561099f5780601f106109745761010080835404028352916020019161099f565b820191906000526020600020905b81548152906001019060200180831161098257829003601f168201915b505050505061301990919063ffffffff16565b9015156109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ec9190613d94565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b096040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610af65780601f10610acb57610100808354040283529160200191610af6565b820191906000526020600020905b815481529060010190602001808311610ad957829003601f168201915b505050505061301990919063ffffffff16565b901515610b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b439190613d94565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffff","ffffffffffffffffff169050919050565b6000610c5461300a565b73ffffffffffffffffffffffffffffffffffffffff16632efc6ee76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610cb557600080fd5b505afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ced919081019061391f565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e286040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e155780601f10610dea57610100808354040283529160200191610e15565b820191906000526020600020905b815481529060010190602001808311610df857829003601f168201915b505050505061301990919063ffffffff16565b901515610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e629190613d94565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060610ec461300a565b73ffffffffffffffffffffffffffffffffffffffff16636057d21b84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f1a929190613caa565b60006040518083038186803b158015610f3257600080fd5b505afa158015610f46573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610f6f919081019061366f565b905092915050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561100d5780601f10610fe25761010080835404028352916020019161100d565b820191906000526020600020905b815481529060010190602001808311610ff057829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111486040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111355780601f1061110a57610100808354040283529160200191611135565b820191906000526020600020905b81548152906001019060200180831161111857829003601f168201915b505050505061301990919063ffffffff16565b90151561118b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111829190613d94565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112039190613c18565b60206040518083038186803b15801561121b57600080fd5b505afa15801561122f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061125391908101906135da565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461142c6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114195780601f106113ee57610100808354040283529160200191611419565b820191906000526020600020905b8154815290600101906020018083116113fc57829003601f168201915b505050505061301990919063ffffffff16565b90151561146f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114669190613d94565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061153a61300a565b73ffffffffffffffffffffffffffffffffffffffff1663930fc6ad84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611590929190613db6565b60206040518083038186803b1580156115a857600080fd5b505afa1580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e09190810190613704565b905092915050565b60606115f261300a565b73ffffffffffffffffffffffffffffffffffffffff16639fb8657b84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611648929190613caa565b60006040518083038186803b15801561166057600080fd5b505afa158015611674573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061169d919081019061366f565b905092915050565b6116ad61300a565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c485856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611703929190613caa565b60206040518083038186803b15801561171b57600080fd5b505afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117539190810190613704565b15156118805761176161300a565b73ffffffffffffffffffffffffffffffffffffffff166397b7b0fb8585856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117b993929190613d00565b600060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050506117f36130e5565b73ffffffffffffffffffffffffffffffffffffffff16634bbac12a828686866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161184d9493929190613b49565b600060405180830381600087803b15801561186757600080fd5b505af115801561187b573d6000803e3d6000fd5b505050505b61188861300a565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8585846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118e093929190613cce565b60206040518083038186803b1580156118f857600080fd5b505afa15801561190c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119309190810190613704565b15156119c95761193e61300a565b73ffffffffffffffffffffffffffffffffffffffff1663d5958b868585846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161199693929190613cce565b600060405180830381600087803b1580156119b057600080fd5b505af11580156119c4573d6000803e3d6000fd5b505050505b50505050565b606060006119db61300a565b73ffffffffffffffffffffffffffffffffffffffff1663c533f8f8878787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a359493929190613d32565b60006040518083038186803b158015611a4d57600080fd5b505afa158015611a61573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611a8a91908101906136b0565b9150915094509492505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bca6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bb75780601f10611b8c57610100808354040283529160200191611bb7565b820191906000526020600020905b815481529060010190602001808311611b9a57829003601f168201915b505050505061301990919063ffffffff16565b901515611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c049190613d94565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffff","ffffff161415611d05606060405190810160405280602181526020016140066021913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cf25780601f10611cc757610100808354040283529160200191611cf2565b820191906000526020600020905b815481529060010190602001808311611cd557829003601f168201915b505050505061301990919063ffffffff16565b901515611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f9190613d94565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f3c6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f295780601f10611efe57610100808354040283529160200191611f29565b820191906000526020600020905b815481529060010190602001808311611f0c57829003601f168201915b505050505061301990919063ffffffff16565b901515611f7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f769190613d94565b60405180910390fd5b5060008090505b6004805490508110156120d7576000600482815481101515611fa457fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120289190613c18565b60206040518083038186803b15801561204057600080fd5b505afa158015612054573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061207891908101906135da565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050611f86565b50565b60006120e461300a565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161213a929190613caa565b60206040518083038186803b15801561215257600080fd5b505afa158015612166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061218a919081019061391f565b905092915050565b600061219c61300a565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121f2929190613db6565b60206040518083038186803b15801561220a57600080fd5b505afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122429190810190613704565b905092915050565b612252613115565b73ffffffffffffffffffffffffffffffffffffffff1663d24fbb1c848685856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122ac9493929190613b09565b600060405180830381600087803b1580156122c657600080fd5b505af11580156122da573d6000803e3d6000fd5b505050506122e661300a565b73ffffffffffffffffffffffffffffffffffffffff1663057af1c483836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161233c929190613caa565b60206040518083038186803b15801561235457600080fd5b505afa158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061238c9190810190613704565b1561247d576123df82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085611530565b1515612478576123ed61300a565b73ffffffffffffffffffffffffffffffffffffffff1663394129fc8383876040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161244593929190613cce565b600060405180830381600087803b15801561245f57600080fd5b505af1158015612473573d6000803e3d6000fd5b505050505b6125e5565b612485613145565b73ffffffffffffffffffffffffffffffffffffffff1663923c65666001858585896124ae61300a565b73ffffffffffffffffffffffffffffffffffffffff1663deda60668a8a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612504929190613caa565b60206040518083038186803b15801561251c57600080fd5b505afa158015612530573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612554919081019061391f565b6040518763ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161259196959493929190613c4e565b602060405180830381600087803b1580156125ab57600080fd5b505af11580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125e3919081019061391f565b505b50505050565b60006125f561300a565b73ffffffffffffffffffffffffffffffffffffffff1663eb45a7f36040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561265657600080fd5b505afa15801561266a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268e919081019061391f565b905090565b61269b61300a565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126f393929190613cce565b60206040518083038186803b15801561270b57600080fd5b505afa15801561271f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127439190810190613704565b156127db5761275061300a565b73ffffffffffffffffffffffffffffffffffffffff16633cef4fe38484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127a893929190613cce565b600060405180830381600087803b1580156127c257600080fd5b505af11580156127d6573d6000803e3d6000fd5b505050505b6127e361300a565b73ffffffffffffffffffffffffffffffffffffffff1663170c914e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612839929190613caa565b60206040518083038186803b15801561285157600080fd5b505afa158015612865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128899190810190613704565b15612c2b5761289661300a565b73ffffffffffffffffffffffffffffffffffffffff166371fd508284846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128ec929190613caa565b60206040518083038186803b15801561290457600080fd5b505afa158015612918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061293c9190810190613704565b156129d65761294961300a565b73ffffffffffffffffffffffffffffffffffffffff1663a991005484846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161299f929190613caa565b600060405180830381600087803b1580156129b957600080fd5b505af11580156129cd573d6000803e3d6000fd5b50505050612c2a565b60606129e061300a565b73ffffffffffffffffffffffffffffffffffffffff16639fb8657b85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a36929190613caa565b60006040518083038186803b158015612a4e57600080fd5b505afa158015612a62573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612a8b919081019061366f565b905060008090505b8151811015612c2757612aa4613145565b73ffffffffffffffffffffffffffffffffffffffff1663923c656660018588888787815181101515612ad257fe5b90602001906020020151612ae461300a565b73ffffffffffffffffffffffffffffffffffffffff1663deda60668d8d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b3a929190613caa565b60206040518083038186803b158015612b5257600080fd5b505afa158015612b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b8a919081019061391f565b6040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bc796959493929190613c4e565b602060405180830381600087803b158015612be157600080fd5b505af1158015612bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c19919081019061391f565b508080600101915050612a93565b50505b5b505050565b612c38613115565b73","","9050613c486000830184613a2b565b92915050565b600060a082019050613c636000830189613a3a565b613c706020830188613948565b8181036040830152613c83818688613a49565b9050613c926060830185613948565b613c9f6080830184613adf565b979650505050505050565b60006020820190508181036000830152613cc5818486613a49565b90509392505050565b60006040820190508181036000830152613ce9818587613a49565b9050613cf86020830184613948565b949350505050565b60006040820190508181036000830152613d1b818587613a49565b9050613d2a6020830184613adf565b949350505050565b60006060820190508181036000830152613d4d818688613a49565b9050613d5c6020830185613adf565b613d696040830184613adf565b95945050505050565b60006020820190508181036000830152613d8c8184613aa9565b905092915050565b60006020820190508181036000830152613dae8184613a73565b905092915050565b60006040820190508181036000830152613dd08185613a73565b9050613ddf6020830184613948565b9392505050565b6000602082019050613dfb6000830184613adf565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e2457600080fd5b8060405250919050565b600067ffffffffffffffff821115613e4557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613e6d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000613eed82613f20565b9050919050565b60008115159050919050565b6000819050919050565b6000600282101515613f1857fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613f5582613f20565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000613f8782613f8e565b9050919050565b6000613f9982613f20565b9050919050565b6000613fab82613f0a565b9050919050565b82818337600083830152505050565b60005b83811015613fdf578082015181840152602081019050613fc4565b83811115613fee576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820ddbbba132a0c160471a3e0a78003a99c5d363b0c238c24fdbb9a4a41fdd0f8786c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ff166319d30ca3848685856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c7f9493929190613b09565b600060405180830381600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b50505050610cb96130d6565b73ffffffffffffffffffffffffffffffffffffffff1663c5a734008383876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d1193929190613cce565b60206040518083038186803b158015610d2957600080fd5b505afa158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d619190810190613704565b15610df957610d6e6130d6565b73ffffffffffffffffffffffffffffffffffffffff16638cd6cbb08383876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dc693929190613cce565b600060405180830381600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b505050505b610e016130d6565b73ffffffffffffffffffffffffffffffffffffffff1663018c785183836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e57929190613caa565b60206040518083038186803b158015610e6f57600080fd5b505afa158015610e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ea79190810190613704565b15610ff157610eb46130d6565b73ffffffffffffffffffffffffffffffffffffffff166376f2571e83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f0a929190613caa565b60206040518083038186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f5a9190810190613704565b15610ff057610f676130d6565b73ffffffffffffffffffffffffffffffffffffffff1663b046a75683836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fbd929190613caa565b600060405180830381600087803b158015610fd757600080fd5b505af1158015610feb573d6000803e3d6000fd5b505050505b5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006110276130d6565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd84846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107d929190613db6565b60206040518083038186803b15801561109557600080fd5b505afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110cd9190810190613704565b905092915050565b6110dd6130d6565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41885856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611133929190613caa565b60206040518083038186803b15801561114b57600080fd5b505afa15801561115f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111839190810190613704565b15156112b0576111916130d6565b73ffffffffffffffffffffffffffffffffffffffff1663db41dd288585856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111e993929190613d00565b600060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b50505050611223613115565b73ffffffffffffffffffffffffffffffffffffffff16634c116b5c828686866040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161127d9493929190613b49565b600060405180830381600087803b15801561129757600080fd5b505af11580156112ab573d6000803e3d6000fd5b505050505b6112b86130d6565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8585846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161131093929190613cce565b60206040518083038186803b15801561132857600080fd5b505afa15801561133c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113609190810190613704565b15156113f95761136e6130d6565b73ffffffffffffffffffffffffffffffffffffffff1663a6dd9b5d8585846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113c693929190613cce565b600060405180830381600087803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b505050505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115326040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561151f5780601f106114f45761010080835404028352916020019161151f565b820191906000526020600020905b81548152906001019060200180831161150257829003601f168201915b505050505061300a90919063ffffffff16565b901515611575576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161156c9190613d94565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115ed9190613c18565b60206040518083038186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061163d91908101906135da565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117f36040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117e05780601f106117b5576101008083540402835291602001916117e0565b820191906000526020600020905b8154815290600101906020018083116117c357829003601f168201915b505050505061300a90919063ffffffff16565b901515611836576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161182d9190613d94565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606118696130d6565b73ffffffffffffffffffffffffffffffffffffffff16637828750784846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118bf929190613caa565b60006040518083038186803b1580156118d757600080fd5b505afa1580156118eb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611914919081019061366f565b905092915050565b60006119266130d6565b73ffffffffffffffffffffffffffffffffffffffff1663787dd24a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561198757600080fd5b505afa15801561199b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119bf919081019061391f565b905090565b6119cc6130d6565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a2493929190613cce565b60206040518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a749190810190613704565b15611b0c57611a816130d6565b73ffffffffffffffffffffffffffffffffffffffff16639b684a778484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ad993929190613cce565b600060405180830381600087803b158015611af357600080fd5b505af1158015611b07573d6000803e3d6000fd5b505050505b611b146130d6565b73ffffffffffffffffffffffffffffffffffffffff166376f2571e84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b6a929190613caa565b60206040518083038186803b158015611b8257600080fd5b505afa158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bba9190810190613704565b15611f5c57611bc76130d6565b73ffffffffffffffffffffffffffffffffffffffff1663018c785184846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c1d929190613caa565b60206040518083038186803b158015611c3557600080fd5b505afa15","8015611c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c6d9190810190613704565b15611d0757611c7a6130d6565b73ffffffffffffffffffffffffffffffffffffffff1663b046a75684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cd0929190613caa565b600060405180830381600087803b158015611cea57600080fd5b505af1158015611cfe573d6000803e3d6000fd5b50505050611f5b565b6060611d116130d6565b73ffffffffffffffffffffffffffffffffffffffff1663e578ab2085856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d67929190613caa565b60006040518083038186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611dbc919081019061366f565b905060008090505b8151811015611f5857611dd5613145565b73ffffffffffffffffffffffffffffffffffffffff166312238c3a60018588888787815181101515611e0357fe5b90602001906020020151611e156130d6565b73ffffffffffffffffffffffffffffffffffffffff16639bd761368d8d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e6b929190613caa565b60206040518083038186803b158015611e8357600080fd5b505afa158015611e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ebb919081019061391f565b6040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611ef896959493929190613c4e565b602060405180830381600087803b158015611f1257600080fd5b505af1158015611f26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4a919081019061391f565b508080600101915050611dc4565b50505b5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120946040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120815780601f1061205657610100808354040283529160200191612081565b820191906000526020600020905b81548152906001019060200180831161206457829003601f168201915b505050505061300a90919063ffffffff16565b9015156120d7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016120ce9190613d94565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121cf606060405190810160405280602181526020016140066021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121bc5780601f10612191576101008083540402835291602001916121bc565b820191906000526020600020905b81548152906001019060200180831161219f57829003601f168201915b505050505061300a90919063ffffffff16565b901515612212576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016122099190613d94565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006122dd6130d6565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612333929190613caa565b60206040518083038186803b15801561234b57600080fd5b505afa15801561235f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612383919081019061391f565b905092915050565b60006123956130d6565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41884846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123eb929190613caa565b60206040518083038186803b15801561240357600080fd5b505afa158015612417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061243b9190810190613704565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561253c5780601f106125115761010080835404028352916020019161253c565b820191906000526020600020905b81548152906001019060200180831161251f57829003601f168201915b505050505081565b600061254e6130d6565b73ffffffffffffffffffffffffffffffffffffffff1663c5a7340084846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125a4929190613db6565b60206040518083038186803b1580156125bc57600080fd5b505afa1580156125d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125f49190810190613704565b905092915050565b60006126066130d6565b73ffffffffffffffffffffffffffffffffffffffff1663cca8d82a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561266757600080fd5b505afa15801561267b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061269f919081019061391f565b905090565b6126ac6130e5565b73ffffffffffffffffffffffffffffffffffffffff166310faa2de848685856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127069493929190613b09565b600060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b505050506127406130d6565b73ffffffffffffffffffffffffffffffffffffffff1663b213a41883836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612796929190613caa565b60206040518083038186803b1580156127ae57600080fd5b505afa1580156127c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127e69190810190613704565b156128d75761283982828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505085612544565b15156128d2576128476130d6565b73ffffffffffffffffffffffffffffffffffffffff1663d3239f878383876040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161289f93929190613cce565b600060405180830381600087803b1580156128b957600080fd5b505af11580156128cd573d6000803e3d6000fd5b505050505b612a3f565b6128df613145565b73ffffffffffffffffffffffffffffffffffffffff166312238c3a6001858585896129086130d6565b73ffffffffffffffffffffffffffffffffffffffff16639bd761368a8a6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161295e929190613caa565b60206040518083038186803b15801561297657600080fd5b505afa15801561298a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129ae919081019061391f565b6040518763ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129eb96959493929190613c4e565b602060405180830381600087803b158015612a0557600080fd5b505af1158015612a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a3d919081019061391f565b505b50505050565b6060612a4f6130d6565b73ffffffffffffffffffffffffffffffffffffffff1663e578ab2084846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612aa5929190613caa565b60006040518083038186803b158015612abd57600080fd5b505afa158015612ad1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612afa919081019061366f565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c356040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c225780601f10612bf757610100808354040283529160200191612c22565b820191906000526020600020905b815481529060010190602001808311612c0557829003601f168201915b505050505061300a90919063ffffffff16565b90151561","","9050613c486000830184613a2b565b92915050565b600060a082019050613c636000830189613a3a565b613c706020830188613948565b8181036040830152613c83818688613a49565b9050613c926060830185613948565b613c9f6080830184613adf565b979650505050505050565b60006020820190508181036000830152613cc5818486613a49565b90509392505050565b60006040820190508181036000830152613ce9818587613a49565b9050613cf86020830184613948565b949350505050565b60006040820190508181036000830152613d1b818587613a49565b9050613d2a6020830184613adf565b949350505050565b60006060820190508181036000830152613d4d818688613a49565b9050613d5c6020830185613adf565b613d696040830184613adf565b95945050505050565b60006020820190508181036000830152613d8c8184613aa9565b905092915050565b60006020820190508181036000830152613dae8184613a73565b905092915050565b60006040820190508181036000830152613dd08185613a73565b9050613ddf6020830184613948565b9392505050565b6000602082019050613dfb6000830184613adf565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e2457600080fd5b8060405250919050565b600067ffffffffffffffff821115613e4557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613e6d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000613eed82613f20565b9050919050565b60008115159050919050565b6000819050919050565b6000600282101515613f1857fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613f5582613f20565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000613f8782613f8e565b9050919050565b6000613f9982613f20565b9050919050565b6000613fab82613f0a565b9050919050565b82818337600083830152505050565b60005b83811015613fdf578082015181840152602081019050613fc4565b83811115613fee576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820d6b9c3608f5a58e8ad402a9e91752a41b0268a9c3ff48603dd5733c79d2fe5406c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nodeExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addFileCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFileNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFileCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETNODES = "getNodes";

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETTOTALSIZE = "getTotalSize";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_GETOWNERS = "getOwners";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_NODEEXIST = "nodeExist";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_GETSIZE = "getSize";

    public static final String FUNC_OWNEREXIST = "ownerExist";

    public static final String FUNC_ADDFILECALLBACK = "addFileCallback";

    public static final String FUNC_GETTOTALFILENUMBER = "getTotalFileNumber";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_DELETEFILECALLBACK = "deleteFileCallback";

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected File(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple2<List<String>, Boolean> getNodes(String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String cid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getTotalSize() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getOwners(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean nodeExist(String cid, String node) throws ContractException {
        final Function function = new Function(FUNC_NODEEXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getNodes(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETNODES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt addFile(String cid, BigInteger size, String owner) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String cid, BigInteger size, String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String cid, BigInteger size, String owner) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getOwners(String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getSize(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean ownerExist(String cid, String owner) throws ContractException {
        final Function function = new Function(FUNC_OWNEREXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addFileCallback(String node, String owner, String cid) {
        final Function function = new Function(
                FUNC_ADDFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFileCallback(String node, String owner, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFileCallback(String node, String owner, String cid) {
        final Function function = new Function(
                FUNC_ADDFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getAddFileCallbackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILECALLBACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getTotalFileNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALFILENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt deleteFile(String cid, String owner) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String cid, String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String cid, String owner) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt deleteFileCallback(String node, String owner, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFileCallback(String node, String owner, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFileCallback(String node, String owner, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILECALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getDeleteFileCallbackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILECALLBACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static File load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new File(contractAddress, client, credential);
    }

    public static File deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(File.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
