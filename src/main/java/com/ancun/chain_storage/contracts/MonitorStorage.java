package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MonitorStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","048b91908101906124b7565b611177565b60405161049f939291906128e5565b60405180910390f35b3480156104b457600080fd5b506104cf60048036036104ca91908101906124b7565b611203565b005b3480156104dd57600080fd5b506104f860048036036104f39190810190612597565b61124e565b604051610506929190612794565b60405180910390f35b34801561051b57600080fd5b50610536600480360361053191908101906123fa565b611374565b60405161054391906128ca565b60405180910390f35b34801561055857600080fd5b50610573600480360361056e91908101906123fa565b6113c0565b005b34801561058157600080fd5b5061059c600480360361059791908101906123fa565b611691565b005b60a060405190810160405280600060038111156105b757fe5b8152602001600081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600381111561067e57fe5b0217905550602082015181600101556040820151816002015560608201518160030190805190602001906106b392919061216b565b5060808201518160040160006101000a81548160ff0219169083151502179055509050506106eb8360056116a990919063ffffffff16565b50505050565b6107058160076116a990919063ffffffff16565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083c6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108295780601f106107fe57610100808354040283529160200191610829565b820191906000526020600020905b81548152906001019060200180831161080c57829003601f168201915b50505050506116d990919063ffffffff16565b90151561087f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108769190612868565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109936040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b50505050506116d990919063ffffffff16565b9015156109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd9190612868565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836003811115610af557fe5b02179055505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60606000610baf6121eb565b610bc3610bbc60076117a5565b86866117ba565b90506000610bf58260600151610be76001856080015161190a90919063ffffffff16565b61195490919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610c2c5781602001602082028038833980820191505090505b50905060008090505b8360400151811015610cae57610c5781840160076119c890919063ffffffff16565b8282815181101515610c6557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610c35565b50808360200151846080015114945094505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020606060405190810160405280868152602001856001811115610da757fe5b815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010160006101000a81548160ff02191690836001811115610e0957fe5b0217905550604082015181600201555050905080600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610efd5780601f10610ed257610100808354040283529160200191610efd565b820191906000526020600020905b815481529060010190602001808311610ee057829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090556002820160009055600382016000610f9f919061221b565b6004820160006101000a81549060ff02191690555050610fc98160056119e390919063ffffffff16565b5050565b600080600060606000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff168160010154826002015483600301808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110cc5780601f106110a1576101008083540402835291602001916110cc565b820191906000526020600020905b8154815290600101906020018083116110af57829003601f168201915b505050505090509450945094509450509193509193565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858154811015156111c957fe5b9060005260206000209060030201905080600001548160010160009054906101000a900460ff168260020154935093509350509250925092565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050565b6060600061125a6121eb565b61126e61126760056117a5565b86866117ba565b905060006112a082606001516112926001856080015161190a90919063ffffffff16565b61195490919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156112d75781602001602082028038833980820191505090505b50905060008090505b83604001518110156113595761130281840160056119c890919063ffffffff16565b828281518110151561131057fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506112e0565b50808360200151846080015114945094505050509250929050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114f36040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001","828054600181600116156101000203166002900480156114e05780601f106114b5576101008083540402835291602001916114e0565b820191906000526020600020905b8154815290600101906020018083116114c357829003601f168201915b50505050506116d990919063ffffffff16565b901515611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d9190612868565b60405180910390fd5b5061154081611a13565b6040805190810160405280600781526020017f53746f72616765000000000000000000000000000000000000000000000000008152506000908051906020019061158b929190612263565b50611655600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506116509190810190612556565b611d85565b6003819055506000600354141561168e577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6116a58160076119e390919063ffffffff16565b5050565b60006116d1836000018373ffffffffffffffffffffffffffffffffffffffff16600102611d98565b905092915050565b606082826040516020018083805190602001908083835b60208310151561171557805182526020820191506020810190506020830392506116f0565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156117685780518252602082019150602081019050602083039250611743565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006117b382600001611e0d565b9050919050565b6117c26121eb565b6117ca6121eb565b60a0604051908101604052808681526020016000815260200160008152602001600081526020016001815250905060008514806118075750600084145b156118155780915050611903565b603284116118235783611826565b60325b8160600181815250508060600151816040018181525050611854816060015186611e1e90919063ffffffff16565b8160200181815250506000611876826060015187611e6890919063ffffffff16565b905060008111156118a35761189960018360200151611eb290919063ffffffff16565b8260200181815250505b60018411156118b757838260800181815250505b8160200151826080015111156118d65781602001518260800181815250505b816020015182608001511480156118ed5750600081115b156118fd57808260400181815250505b81925050505b9392505050565b600061194c83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611f09565b905092915050565b60008083141561196757600090506119c2565b6000828402905082848281151561197a57fe5b041415156119bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b4906128aa565b60405180910390fd5b809150505b92915050565b60006119d78360000183611f66565b60019004905092915050565b6000611a0b836000018373ffffffffffffffffffffffffffffffffffffffff16600102611f8c565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b466040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b335780601f10611b0857610100808354040283529160200191611b33565b820191906000526020600020905b815481529060010190602001808311611b1657829003601f168201915b50505050506116d990919063ffffffff16565b901515611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b809190612868565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c8160606040519081016040528060218152602001612adb6021913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c6e5780601f10611c4357610100808354040283529160200191611c6e565b820191906000526020600020905b815481529060010190602001808311611c5157829003601f168201915b50505050506116d990919063ffffffff16565b901515611cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cbb9190612868565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000611da48383612083565b1515611e02578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050611e07565b600090505b92915050565b600081600001805490509050919050565b6000611e6083836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506120a6565b905092915050565b6000611eaa83836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525061210b565b905092915050565b6000808284019050838110151515611eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef69061288a565b60405180910390fd5b8091505092915050565b60008383111582901515611f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4a9190612868565b60405180910390fd5b5060008385039050809150509392505050565b60008260000182815481101515611f7957fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020549050600081141515612077576000600182039050600060018660000180549050039050818114151561202d5760008660000182815481101515611fe457fe5b9060005260206000200154905080876000018481548110151561200357fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561203c57fe5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061207d565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808311829015156120ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e69190612868565b60405180910390fd5b50600083858115156120fd57fe5b049050809150509392505050565b60008083141582901515612155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214c9190612868565b60405180910390fd5b50828481151561216157fe5b0690509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121ac57805160ff19168380011785556121da565b828001600101855582156121da579182015b828111156121d95782518255916020019190600101906121be565b5b5090506121e791906122e3565b5090565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b50805460018160011615610100020316600290046000825580601f106122415750612260565b601f01602090049060005260206000209081019061225f91906122e3565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106122a457805160ff19168380011785556122d2565b828001600101855582156122d2579182015b828111156122d15782518255916020019190600101906122b6565b5b5090506122df91906122e3565b5090565b61230591905b808211156123015760008160009055506001016122e9565b5090565b90565b60006123148235612a24565b905092915050565b60006123288235612a36565b905092915050565b600061233c8235612a4f565b905092915050565b60008083601f840112151561235857600080fd5b8235905067ffffffffffffffff81111561237157600080fd5b60208301915083600182028301111561238957600080fd5b9250929050565b600082601f83011215156123a357600080fd5b81516123b66123b182612949565b61291c565b915080825260208301602083018583830111156123d257600080fd5b6123dd838284612a96565b50505092915050565b60006123f28235612a68565b905092915050565b60006020828403121561240c57600080fd5b600061241a84828501612308565b91505092915050565b6000806040838503121561243657600080fd5b600061244485828601612308565b925050602061245585828601612330565b9150509250929050565b60008060006040848603121561247457600080fd5b6000612482868287016123","08565b935050602084013567ffffffffffffffff81111561249f57600080fd5b6124ab86828701612344565b92509250509250925092565b600080604083850312156124ca57600080fd5b60006124d885828601612308565b92505060206124e9858286016123e6565b9150509250929050565b6000806000806080858703121561250957600080fd5b600061251787828801612308565b9450506020612528878288016123e6565b93505060406125398782880161231c565b925050606061254a878288016123e6565b91505092959194509250565b60006020828403121561256857600080fd5b600082015167ffffffffffffffff81111561258257600080fd5b61258e84828501612390565b91505092915050565b600080604083850312156125aa57600080fd5b60006125b8858286016123e6565b92505060206125c9858286016123e6565b9150509250929050565b6125dc816129b0565b82525050565b60006125ed82612982565b8084526020840193506125ff83612975565b60005b82811015612631576126158683516125d3565b61261e826129a3565b9150602086019550600181019050612602565b50849250505092915050565b612646816129c2565b82525050565b61265581612a72565b82525050565b61266481612a84565b82525050565b600061267582612998565b808452612689816020860160208601612a96565b61269281612ac9565b602085010191505092915050565b60006126ab8261298d565b8084526126bf816020860160208601612a96565b6126c881612ac9565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b61277381612a1a565b82525050565b600060208201905061278e60008301846125d3565b92915050565b600060408201905081810360008301526127ae81856125e2565b90506127bd602083018461263d565b9392505050565b60006020820190506127d9600083018461263d565b92915050565b60006020820190506127f4600083018461265b565b92915050565b600060808201905061280f600083018761265b565b61281c602083018661276a565b612829604083018561276a565b818103606083015261283b818461266a565b905095945050505050565b6000602082019050818103600083015261286081846126a0565b905092915050565b60006020820190508181036000830152612882818461266a565b905092915050565b600060208201905081810360008301526128a3816126d6565b9050919050565b600060208201905081810360008301526128c38161270d565b9050919050565b60006020820190506128df600083018461276a565b92915050565b60006060820190506128fa600083018661276a565b612907602083018561264c565b612914604083018461276a565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561293f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561296057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60006129bb826129fa565b9050919050565b60008115159050919050565b60006002821015156129dc57fe5b819050919050565b60006004821015156129f257fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a2f826129fa565b9050919050565b6000600282101515612a4757600080fd5b819050919050565b6000600482101515612a6057600080fd5b819050919050565b6000819050919050565b6000612a7d826129ce565b9050919050565b6000612a8f826129e4565b9050919050565b60005b83811015612ab4578082015181840152602081019050612a99565b83811115612ac3576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820aa9ada1cf3b7f09cc5bbefbc6e638121490e7353dc4b968c4bdc4ea5376d86c16c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","8657600080fd5b5061048f6113d4565b60405161049c9190612846565b60405180910390f35b3480156104b157600080fd5b506104cc60048036036104c791908101906123fa565b611472565b6040516104d991906128ca565b60405180910390f35b3480156104ee57600080fd5b50610509600480360361050491908101906123fa565b6114be565b60405161051691906128ca565b60405180910390f35b34801561052b57600080fd5b50610546600480360361054191908101906124b7565b611507565b604051610555939291906128e5565b60405180910390f35b34801561056a57600080fd5b50610585600480360361058091908101906123fa565b611593565b60405161059594939291906127fa565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d16040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b50505050506116a990919063ffffffff16565b901515610714576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161070b9190612868565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108286040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b50505050506116a990919063ffffffff16565b90151561086b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016108629190612868565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60a0604051908101604052806000600381111561096b57fe5b8152602001600081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690836003811115610a3257fe5b021790555060208201518160010155604082015181600201556060820151816003019080519060200190610a6792919061216b565b5060808201518160040160006101000a81548160ff021916908315150217905550905050610a9f83600561177590919063ffffffff16565b50505050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690836003811115610b0357fe5b02179055505050565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549060ff021916905560018201600090556002820160009055600382016000610b8091906121eb565b6004820160006101000a81549060ff02191690555050610baa8160056117a590919063ffffffff16565b5050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610c2b612233565b610c3f610c3860056117d5565b86866117ea565b90506000610c718260600151610c636001856080015161193a90919063ffffffff16565b61198490919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610ca85781602001602082028038833980820191505090505b50905060008090505b8360400151811015610d2a57610cd381840160056119f890919063ffffffff16565b8282815181101515610ce157fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610cb1565b50808360200151846080015114945094505050509250929050565b610d5981600761177590919063ffffffff16565b5050565b60606000610d69612233565b610d7d610d7660076117d5565b86866117ea565b90506000610daf8260600151610da16001856080015161193a90919063ffffffff16565b61198490919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610de65781602001602082028038833980820191505090505b50905060008090505b8360400151811015610e6857610e1181840160076119f890919063ffffffff16565b8282815181101515610e1f57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610def565b50808360200151846080015114945094505050509250929050565b610e978160076117a590919063ffffffff16565b5050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110656040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110525780601f1061102757610100808354040283529160200191611052565b820191906000526020600020905b81548152906001019060200180831161103557829003601f168201915b50505050506116a990919063ffffffff16565b9015156110a8576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161109f9190612868565b60405180910390fd5b506110b281611a13565b6040805190810160405280600781526020017f53746f7261676500000000000000000000000000000000000000000000000000815250600090805190602001906110fd929190612263565b506111c7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561118557600080fd5b505afa158015611199573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111c29190810190612556565b611d85565b60038190555060006003541415611200577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff169050919050565b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052808681526020018560018111156112bb57fe5b815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010160006101000a81548160ff0219169083600181111561131d57fe5b0217905550604082015181600201555050905080600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561146a5780601f1061143f5761010080835404028352916020019161146a565b820191906000526020600020905b81548152906001019060200180831161144d57829003601f168201915b505050505081565b6000600460008373ffffffffff","ffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110151561155957fe5b9060005260206000209060030201905080600001548160010160009054906101000a900460ff168260020154935093509350509250925092565b600080600060606000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff168160010154826002015483600301808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116925780601f1061166757610100808354040283529160200191611692565b820191906000526020600020905b81548152906001019060200180831161167557829003601f168201915b505050505090509450945094509450509193509193565b606082826040516020018083805190602001908083835b6020831015156116e557805182526020820191506020810190506020830392506116c0565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156117385780518252602082019150602081019050602083039250611713565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061179d836000018373ffffffffffffffffffffffffffffffffffffffff16600102611d98565b905092915050565b60006117cd836000018373ffffffffffffffffffffffffffffffffffffffff16600102611e0d565b905092915050565b60006117e382600001611f04565b9050919050565b6117f2612233565b6117fa612233565b60a0604051908101604052808681526020016000815260200160008152602001600081526020016001815250905060008514806118375750600084145b156118455780915050611933565b603284116118535783611856565b60325b8160600181815250508060600151816040018181525050611884816060015186611f1590919063ffffffff16565b81602001818152505060006118a6826060015187611f5f90919063ffffffff16565b905060008111156118d3576118c960018360200151611fa990919063ffffffff16565b8260200181815250505b60018411156118e757838260800181815250505b8160200151826080015111156119065781602001518260800181815250505b8160200151826080015114801561191d5750600081115b1561192d57808260400181815250505b81925050505b9392505050565b600061197c83836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612000565b905092915050565b60008083141561199757600090506119f2565b600082840290508284828115156119aa57fe5b041415156119ed576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016119e49061288a565b60405180910390fd5b809150505b92915050565b6000611a07836000018361205d565b60019004905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b466040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b335780601f10611b0857610100808354040283529160200191611b33565b820191906000526020600020905b815481529060010190602001808311611b1657829003601f168201915b50505050506116a990919063ffffffff16565b901515611b89576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611b809190612868565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c8160606040519081016040528060218152602001612adb6021913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c6e5780601f10611c4357610100808354040283529160200191611c6e565b820191906000526020600020905b815481529060010190602001808311611c5157829003601f168201915b50505050506116a990919063ffffffff16565b901515611cc4576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611cbb9190612868565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6000611da48383612083565b1515611e02578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050611e07565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081141515611ef85760006001820390506000600186600001805490500390508181141515611eae5760008660000182815481101515611e6557fe5b90600052602060002001549050808760000184815481101515611e8457fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054801515611ebd57fe5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611efe565b60009150505b92915050565b600081600001805490509050919050565b6000611f5783836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506120a6565b905092915050565b6000611fa183836040805190810160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525061210b565b905092915050565b6000808284019050838110151515611ff6576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611fed906128aa565b60405180910390fd5b8091505092915050565b6000838311158290151561204a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016120419190612868565b60405180910390fd5b5060008385039050809150509392505050565b6000826000018281548110151561207057fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808311829015156120ef576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016120e69190612868565b60405180910390fd5b50600083858115156120fd57fe5b049050809150509392505050565b60008083141582901515612155576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161214c9190612868565b60405180910390fd5b50828481151561216157fe5b0690509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106121ac57805160ff19168380011785556121da565b828001600101855582156121da579182015b828111156121d95782518255916020019190600101906121be565b5b5090506121e791906122e3565b5090565b50805460018160011615610100020316600290046000825580601f106122115750612230565b601f01602090049060005260206000209081019061222f91906122e3565b5b50565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106122a457805160ff19168380011785556122d2565b828001600101855582156122d2579182015b828111156122d15782518255916020019190600101906122b6565b5b5090506122df91906122e3565b5090565b61230591905b808211156123015760008160009055506001016122e9565b5090565b90565b60006123148235612a24565b905092915050565b60006123288235612a36565b905092915050565b600061233c8235612a4f565b905092915050565b60008083601f840112151561235857600080fd5b8235905067ffffffffffffffff81111561237157600080fd5b60208301915083600182028301111561238957600080fd5b9250929050565b600082601f83011215156123a357600080fd5b81516123b66123b182612949565b61291c565b915080825260208301602083018583830111156123d257600080fd5b6123dd838284612a96565b50505092915050565b60006123f28235612a68565b905092915050565b60006020828403121561240c57600080fd5b600061241a84828501612308565b91505092915050565b6000806040838503121561243657600080fd5b600061244485828601612308565b925050602061245585828601612330565b9150509250929050565b60008060006040848603121561247457600080fd5b6000612482868287016123","08565b935050602084013567ffffffffffffffff81111561249f57600080fd5b6124ab86828701612344565b92509250509250925092565b600080604083850312156124ca57600080fd5b60006124d885828601612308565b92505060206124e9858286016123e6565b9150509250929050565b6000806000806080858703121561250957600080fd5b600061251787828801612308565b9450506020612528878288016123e6565b93505060406125398782880161231c565b925050606061254a878288016123e6565b91505092959194509250565b60006020828403121561256857600080fd5b600082015167ffffffffffffffff81111561258257600080fd5b61258e84828501612390565b91505092915050565b600080604083850312156125aa57600080fd5b60006125b8858286016123e6565b92505060206125c9858286016123e6565b9150509250929050565b6125dc816129b0565b82525050565b60006125ed82612982565b8084526020840193506125ff83612975565b60005b82811015612631576126158683516125d3565b61261e826129a3565b9150602086019550600181019050612602565b50849250505092915050565b612646816129c2565b82525050565b61265581612a72565b82525050565b61266481612a84565b82525050565b600061267582612998565b808452612689816020860160208601612a96565b61269281612ac9565b602085010191505092915050565b60006126ab8261298d565b8084526126bf816020860160208601612a96565b6126c881612ac9565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61277381612a1a565b82525050565b600060208201905061278e60008301846125d3565b92915050565b600060408201905081810360008301526127ae81856125e2565b90506127bd602083018461263d565b9392505050565b60006020820190506127d9600083018461263d565b92915050565b60006020820190506127f4600083018461265b565b92915050565b600060808201905061280f600083018761265b565b61281c602083018661276a565b612829604083018561276a565b818103606083015261283b818461266a565b905095945050505050565b6000602082019050818103600083015261286081846126a0565b905092915050565b60006020820190508181036000830152612882818461266a565b905092915050565b600060208201905081810360008301526128a3816126d6565b9050919050565b600060208201905081810360008301526128c381612733565b9050919050565b60006020820190506128df600083018461276a565b92915050565b60006060820190506128fa600083018661276a565b612907602083018561264c565b612914604083018461276a565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561293f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561296057600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b60006129bb826129fa565b9050919050565b60008115159050919050565b60006002821015156129dc57fe5b819050919050565b60006004821015156129f257fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a2f826129fa565b9050919050565b6000600282101515612a4757600080fd5b819050919050565b6000600482101515612a6057600080fd5b819050919050565b6000819050919050565b6000612a7d826129ce565b9050919050565b6000612a8f826129e4565b9050919050565b60005b83811015612ab4578082015181840152602081019050612a99565b83811115612ac3576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a723058205d743caa42953abd8050df0192ab5b66f8961cb53b72d96ec06591de422c9f6f6c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addOnlineMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFirstOnlineTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllOnlineMonitorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"reportType\",\"type\":\"uint8\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMonitor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"setFirstOnlineTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReportNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getReport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"setCurrentTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllMonitorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deleteOnlineMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_NEWMONITOR = "newMonitor";

    public static final String FUNC_ADDONLINEMONITOR = "addOnlineMonitor";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_GETFIRSTONLINETID = "getFirstOnlineTid";

    public static final String FUNC_GETALLONLINEMONITORADDRESSES = "getAllOnlineMonitorAddresses";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_ADDREPORT = "addReport";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_DELETEMONITOR = "deleteMonitor";

    public static final String FUNC_GETMONITOR = "getMonitor";

    public static final String FUNC_SETFIRSTONLINETID = "setFirstOnlineTid";

    public static final String FUNC_GETREPORTNUMBER = "getReportNumber";

    public static final String FUNC_GETREPORT = "getReport";

    public static final String FUNC_SETCURRENTTID = "setCurrentTid";

    public static final String FUNC_GETALLMONITORADDRESSES = "getAllMonitorAddresses";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_DELETEONLINEMONITOR = "deleteOnlineMonitor";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected MonitorStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt newMonitor(String addr, String ext) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newMonitor(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewMonitor(String addr, String ext) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new Address(addr),
                new Utf8String(ext)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNewMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt addOnlineMonitor(String addr) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addOnlineMonitor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOnlineMonitor(String addr) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddOnlineMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStatus(String addr, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatus(String addr, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatus(String addr, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new Address(addr),
                new Uint8(status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getStatus(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getFirstOnlineTid(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETFIRSTONLINETID, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<String>, Boolean> getAllOnlineMonitorAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINEMONITORADDRESSES, 
                Arrays.<Type>asList(new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String addr) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addReport(String addr, BigInteger tid, BigInteger reportType, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid),
                new Uint8(reportType),
                new Uint256(timestamp)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addReport(String addr, BigInteger tid, BigInteger reportType, BigInteger timestamp, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid),
                new Uint8(reportType),
                new Uint256(timestamp)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddReport(String addr, BigInteger tid, BigInteger reportType, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid),
                new Uint8(reportType),
                new Uint256(timestamp)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getAddReportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteMonitor(String addr) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteMonitor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteMonitor(String addr) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple4<BigInteger, BigInteger, BigInteger, String> getMonitor(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, BigInteger, BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public TransactionReceipt setFirstOnlineTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFirstOnlineTid(String addr, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFirstOnlineTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetFirstOnlineTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getReportNumber(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETREPORTNUMBER, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getReport(String addr, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETREPORT, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt setCurrentTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setCurrentTid(String addr, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCurrentTid(String addr, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new Address(addr),
                new Uint256(tid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetCurrentTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getAllMonitorAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLMONITORADDRESSES, 
                Arrays.<Type>asList(new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getCurrentTid(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteOnlineMonitor(String addr) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteOnlineMonitor(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOnlineMonitor(String addr) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteOnlineMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static MonitorStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MonitorStorage(contractAddress, client, credential);
    }

    public static MonitorStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_manager)));
        return deploy(MonitorStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
