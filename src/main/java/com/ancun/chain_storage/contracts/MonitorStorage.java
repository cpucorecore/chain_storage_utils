package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MonitorStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b5060405160208062003132833981018060405260208110156200005757600080fd5b81019080805190602001909291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000105816200010d640100000000026401000000009004565b505062000612565b6200012662000309640100000000026401000000009004565b6200014581620003d164010000000002620021f1176401000000009004565b6040805190810160405280600781526020017f53746f7261676500000000000000000000000000000000000000000000000000815250600090805190602001906200019292919062000563565b50620002cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200021c57600080fd5b505afa15801562000231573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156200025c57600080fd5b8101908080516401000000008111156200027557600080fd5b828101905060208101848111156200028c57600080fd5b8151856001820283011164010000000082111715620002aa57600080fd5b505092919050505062000550640100000000026200235e176401000000009004565b6003819055506000600354141562000306577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620003cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b620003ea62000309640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562000490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005a657805160ff1916838001178555620005d7565b82800160010185558215620005d7579182015b82811115620005d6578251825591602001919060010190620005b9565b5b509050620005e69190620005ea565b5090565b6200060f91905b808211156200060b576000816000905550600101620005f1565b5090565b90565b612b1080620006226000396000f3fe60806040526004361061019e576000357c0100000000000000000000000000000000000000000000000000000000900480638e762521116100ee578063acb20302116100a7578063cb36172711610081578063cb36172714610b5a578063d0ebdbe714610b95578063d962c33b14610be6578063db1a720f14610cb05761019e565b8063acb20302146109f5578063b5a7946a14610a50578063b6ef3cea14610af55761019e565b80638e762521146106e257806390eb46db1461073357806394fc2a4e14610812578063959864f8146108b85780639647d5a5146109135780639847eb6c146109785761019e565b806341cbbdd91161015b5780634dfefc4b116101355780634dfefc4b1461053757806375d0c0dc146105a05780637e55d59c146106305780638da5cb5b1461068b5761019e565b806341cbbdd9146103d6578063458910d61461043b578063481c6a75146104e05761019e565b806304fb8024146101a35780630b1758521461024957806313af40351461029a5780631c9fd120146102eb57806330ccebb5146103025780633f3f45c414610367575b600080fd5b3480156101af57600080fd5b50610247600480360360408110156101c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561020357600080fd5b82018360208201111561021557600080fd5b8035906020019184600183028401116401000000008311171561023757600080fd5b9091929391929390505050610d01565b005b34801561025557600080fd5b506102986004803603602081101561026c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e35565b005b3480156102a657600080fd5b506102e9600480360360208110156102bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e58565b005b3480156102f757600080fd5b50610300610fc5565b005b34801561030e57600080fd5b506103516004803603602081101561032557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061108c565b6040518082815260200191505060405180910390f35b34801561037357600080fd5b506103d46004803603608081101561038a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506110d8565b005b3480156103e257600080fd5b50610425600480360360208110156103f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111d8565b6040518082815260200191505060405180910390f35b34801561044757600080fd5b5061047e6004803603604081101561045e57600080fd5b810190808035906020019092919080359060200190929190505050611224565b604051808060200183151515158152602001828103825284818151815260200191508051906020019060200280838360005b838110156104cb5780820151818401526020810190506104b0565b50505050905001935050505060405180910390f35b3480156104ec57600080fd5b506104f561134a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054357600080fd5b506105866004803603602081101561055a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611370565b604051808215151515815260200191505060405180910390f35b3480156105ac57600080fd5b506105b56113c9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105f55780820151818401526020810190506105da565b50505050905090810190601f1680156106225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561063c57600080fd5b506106896004803603604081101561065357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611467565b005b34801561069757600080fd5b506106a06114bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106ee57600080fd5b506107316004803603602081101561070557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114e3565b005b34801561073f57600080fd5b506107826004803603602081101561075657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611584565b6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156107d45780820151818401526020810190506107b9565b50505050905090810190601f1680156108015780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561081e57600080fd5b506108b66004803603604081101561083557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561087257600080fd5b82018360208201111561088457600080fd5b803590602001918460018302840111640100000000831117156108a657600080fd5b909192939192939050505061168d565b005b3480156108c457600080fd5b50610911600480360360408110156108db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116e4565b005b34801561091f57600080fd5b506109626004803603602081101561093657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173a565b6040518082815260200191505060405180910390f35b34801561098457600080fd5b506109d16004803603604081101561099b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611783565b604051808481526020018381","52602001828152602001935050505060405180910390f35b348015610a0157600080fd5b50610a4e60048036036040811015610a1857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611802565b005b348015610a5c57600080fd5b50610a9360048036036040811015610a7357600080fd5b810190808035906020019092919080359060200190929190505050611858565b604051808060200183151515158152602001828103825284818151815260200191508051906020019060200280838360005b83811015610ae0578082015181840152602081019050610ac5565b50505050905001935050505060405180910390f35b348015610b0157600080fd5b50610b4460048036036020811015610b1857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061197e565b6040518082815260200191505060405180910390f35b348015610b6657600080fd5b50610b9360048036036020811015610b7d57600080fd5b81019080803590602001909291905050506119ca565b005b348015610ba157600080fd5b50610be460048036036020811015610bb857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bab565b005b348015610bf257600080fd5b50610c3560048036036020811015610c0957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d61565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c75578082015181840152602081019050610c5a565b50505050905090810190601f168015610ca25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cbc57600080fd5b50610cff60048036036020811015610cd357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e45565b005b610d0c6003546119ca565b60a06040519081016040528060018152602001600081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190610df79291906128a6565b5060808201518160040160006101000a81548160ff021916908315150217905550905050610e2f836005611e6890919063ffffffff16565b50505050565b610e406003546119ca565b610e54816007611e6890919063ffffffff16565b5050565b610e60610fc5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6110e36003546119ca565b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060606040519081016040528086815260200185815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010155604082015181600201555050905080600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60606000611230612926565b61124461123d6007611e98565b8686611ead565b90506000611276826060015161126860018560800151611ffd90919063ffffffff16565b61204790919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156112ad5781602001602082028038833980820191505090505b50905060008090505b836040015181101561132f576112d881840160076120d190919063ffffffff16565b82828151811015156112e657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506112b6565b50808360200151846080015114945094505050509250929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561145f5780601f106114345761010080835404028352916020019161145f565b820191906000526020600020905b81548152906001019060200180831161144257829003601f168201915b505050505081565b6114726003546119ca565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114ee6003546119ca565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000905560028201600090556003820160006115569190612956565b6004820160006101000a81549060ff021916905550506115808160056120ec90919063ffffffff16565b5050565b600080600060606000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080600001548160010154826002015483600301808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116765780601f1061164b57610100808354040283529160200191611676565b820191906000526020600020905b81548152906001019060200180831161165957829003601f168201915b505050505090509450945094509450509193509193565b8181600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030191906116de92919061299e565b50505050565b6116ef6003546119ca565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020858154811015156117d557fe5b90600052602060002090600302019050806000015481600101548260020154935093509350509250925092565b61180d6003546119ca565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050565b60606000611864612926565b6118786118716005611e98565b8686611ead565b905060006118aa826060015161189c60018560800151611ffd90919063ffffffff16565b61204790919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156118e15781602001602082028038833980820191505090505b50905060008090505b83604001518110156119635761190c81840160056120d190919063ffffffff16565b828281518110151561191a57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506118ea565b50808360200151846080015114945094505050509250929050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600260009054906101000a900473ffffffffff","","565b82800160010185558215612a0d579182015b82811115612a0c5782358255916020019190600101906129f1565b5b509050612a1a9190612a9e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a5f57805160ff1916838001178555612a8d565b82800160010185558215612a8d579182015b82811115612a8c578251825591602001919060010190612a71565b5b509050612a9a9190612a9e565b5090565b612ac091905b80821115612abc576000816000905550600101612aa4565b5090565b9056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a72305820f72148be3a2a79cb3e9b1432689181917504957b107c00829a3627a596254e070029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0390f35b3480156109ed57600080fd5b50610a3060048036036020811015610a0457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b53565b604051808215151515815260200191505060405180910390f35b348015610a5657600080fd5b50610a5f611bac565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a9f578082015181840152602081019050610a84565b50505050905090810190601f168015610acc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ae657600080fd5b50610b2960048036036020811015610afd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c4a565b6040518082815260200191505060405180910390f35b348015610b4b57600080fd5b50610b8e60048036036020811015610b6257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c96565b6040518082815260200191505060405180910390f35b348015610bb057600080fd5b50610bfd60048036036040811015610bc757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611cdf565b60405180848152602001838152602001828152602001935050505060405180910390f35b348015610c2d57600080fd5b50610c7060048036036020811015610c4457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d5e565b6040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cc2578082015181840152602081019050610ca7565b50505050905090810190601f168015610cef5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b610d0b600354611652565b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060606040519081016040528086815260200185815260200184815250908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820151816000015560208201518160010155604082015181600201555050905080600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b610e08611a40565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ead576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f9e600354611652565b60a06040519081016040528060018152602001600081526020016000815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160011515815250600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030190805190602001906110899291906128a5565b5060808201518160040160006101000a81548160ff0219169083151502179055509050506110c1836005611e6790919063ffffffff16565b50505050565b6110d2600354611652565b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055600282016000905560038201600061113a9190612925565b6004820160006101000a81549060ff02191690555050611164816005611e9790919063ffffffff16565b5050565b611173600354611652565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112965780601f1061126b57610100808354040283529160200191611296565b820191906000526020600020905b81548152906001019060200180831161127957829003601f168201915b50505050509050919050565b6112ad600354611652565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600061132a61296d565b61133e6113376005611ec7565b8686611edc565b9050600061137082606001516113626001856080015161202c90919063ffffffff16565b61207690919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156113a75781602001602082028038833980820191505090505b50905060008090505b8360400151811015611429576113d2818401600561210090919063ffffffff16565b82828151811015156113e057fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506113b0565b50808360200151846080015114945094505050509250929050565b61144f600354611652565b611463816007611e6790919063ffffffff16565b5050565b6060600061147361296d565b6114876114806007611ec7565b8686611edc565b905060006114b982606001516114ab6001856080015161202c90919063ffffffff16565b61207690919063ffffffff16565b9050606082604001516040519080825280602002602001820160405280156114f05781602001602082028038833980820191505090505b50905060008090505b83604001518110156115725761151b818401600761210090919063ffffffff16565b828281518110151561152957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506114f9565b50808360200151846080015114945094505050509250929050565b611598600354611652565b6115ac816007611e9790919063ffffffff16565b5050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b611607600354611652565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117876040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117735780601f1061174857610100808354040283529160200191611773565b820191906000526020600020905b81548152906001019060200180831161175657829003601f168201915b505050505061211b9092919063ffffffff16565b90151561182f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156117f45780820151818401526020810190506117d9565b50505050905090810190601f1680156118215780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b61183b611a40565b611844816121f0565b6040805190810160405280600781526020017f53746f72616765000000000000000000000000000000000000000000000000008152506000908051906020019061188f92919061299d565b506119ad600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561191757600080fd5b505afa15801561192b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561195557600080fd5b81019080805164010000000081111561196d57600080fd5b8281019050602081018481111561198357600080fd5b81518560018202830111640100000000821117156119a057600080fd5b505092919050505061235d565b600381905550600060035414156119e6577f6d616e616765720000000000000000000000000000000000000000000000","","5b82800160010185558215612a0c579182015b82811115612a0b5782518255916020019190600101906129f0565b5b509050612a199190612a9d565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a5e57803560ff1916838001178555612a8c565b82800160010185558215612a8c579182015b82811115612a8b578235825591602001919060010190612a70565b5b509050612a999190612a9d565b5090565b612abf91905b80821115612abb576000816000905550600101612aa3565b5090565b9056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a165627a7a723058209b44afa34ead03b2159a993176d67072b8ead5a87c0ddb9d342761e1317d7e800029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"newMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"addOnlineMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"reportType\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"addReport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getFirstOnlineTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllOnlineMonitorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"deleteMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getMonitor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"setFirstOnlineTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getReportNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getReport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"setCurrentTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getAllMonitorAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"monitorAddress\",\"type\":\"address\"}],\"name\":\"deleteOnlineMonitor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_NEWMONITOR = "newMonitor";

    public static final String FUNC_ADDONLINEMONITOR = "addOnlineMonitor";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETSTATUS = "getStatus";

    public static final String FUNC_ADDREPORT = "addReport";

    public static final String FUNC_GETFIRSTONLINETID = "getFirstOnlineTid";

    public static final String FUNC_GETALLONLINEMONITORADDRESSES = "getAllOnlineMonitorAddresses";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_SETSTATUS = "setStatus";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_DELETEMONITOR = "deleteMonitor";

    public static final String FUNC_GETMONITOR = "getMonitor";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETFIRSTONLINETID = "setFirstOnlineTid";

    public static final String FUNC_GETREPORTNUMBER = "getReportNumber";

    public static final String FUNC_GETREPORT = "getReport";

    public static final String FUNC_SETCURRENTTID = "setCurrentTid";

    public static final String FUNC_GETALLMONITORADDRESSES = "getAllMonitorAddresses";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_DELETEONLINEMONITOR = "deleteOnlineMonitor";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected MonitorStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt newMonitor(String monitorAddress, String ext) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newMonitor(String monitorAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewMonitor(String monitorAddress, String ext) {
        final Function function = new Function(
                FUNC_NEWMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getNewMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt addOnlineMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addOnlineMonitor(String monitorAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOnlineMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddOnlineMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDONLINEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public BigInteger getStatus(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addReport(String monitorAddress, BigInteger tid, BigInteger reportType, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reportType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addReport(String monitorAddress, BigInteger tid, BigInteger reportType, BigInteger timestamp, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reportType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddReport(String monitorAddress, BigInteger tid, BigInteger reportType, BigInteger timestamp) {
        final Function function = new Function(
                FUNC_ADDREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(reportType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getAddReportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public BigInteger getFirstOnlineTid(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETFIRSTONLINETID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<List<String>, Boolean> getAllOnlineMonitorAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLONLINEMONITORADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStatus(String monitorAddress, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatus(String monitorAddress, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatus(String monitorAddress, BigInteger status) {
        final Function function = new Function(
                FUNC_SETSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteMonitor(String monitorAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple4<BigInteger, BigInteger, BigInteger, String> getMonitor(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, BigInteger, BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public TransactionReceipt setExt(String monitorAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String monitorAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String monitorAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFirstOnlineTid(String monitorAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFirstOnlineTid(String monitorAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFirstOnlineTid(String monitorAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetFirstOnlineTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFIRSTONLINETID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getReportNumber(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETREPORTNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getReport(String monitorAddress, BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt setCurrentTid(String monitorAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setCurrentTid(String monitorAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCurrentTid(String monitorAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetCurrentTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getAllMonitorAddresses(BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETALLMONITORADDRESSES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public BigInteger getCurrentTid(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getExt(String monitorAddress) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteOnlineMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteOnlineMonitor(String monitorAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOnlineMonitor(String monitorAddress) {
        final Function function = new Function(
                FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(monitorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteOnlineMonitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEONLINEMONITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static MonitorStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MonitorStorage(contractAddress, client, credential);
    }

    public static MonitorStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(MonitorStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
