package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class FileStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","5050906001820390600052602060002001600090919290919091505550826000018054905083600101600084815260200190815260200160002081905550600190506124cb565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083118290151561253d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125349190612d75565b60405180910390fd5b506000838581151561254b57fe5b049050809150509392505050565b600080831415829015156125a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259a9190612d75565b60405180910390fd5b5082848115156125af57fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b6020604051908101604052806125fd6127b9565b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061264457805160ff1916838001178555612672565b82800160010185558215612672579182015b82811115612671578251825591602001919060010190612656565b5b50905061267f91906127cd565b5090565b8280548282559060005260206000209081019282156126bf579160200282015b828111156126be5782518255916020019190600101906126a3565b5b5090506126cc91906127f2565b5090565b50805460018160011615610100020316600290046000825580601f106126f65750612715565b601f01602090049060005260206000209081019061271491906127cd565b5b50565b508054600082559060005260206000209081019061273691906127f2565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061277a57805160ff19168380011785556127a8565b828001600101855582156127a8579182015b828111156127a757825182559160200191906001019061278c565b5b5090506127b591906127cd565b5090565b602060405190810160405280606081525090565b6127ef91905b808211156127eb5760008160009055506001016127d3565b5090565b90565b61281491905b808211156128105760008160009055506001016127f8565b5090565b90565b60006128238235612ece565b905092915050565b60008083601f840112151561283f57600080fd5b8235905067ffffffffffffffff81111561285857600080fd5b60208301915083600182028301111561287057600080fd5b9250929050565b600082601f830112151561288a57600080fd5b813561289d61289882612e1f565b612df2565b915080825260208301602083018583830111156128b957600080fd5b6128c4838284612eea565b50505092915050565b600082601f83011215156128e057600080fd5b81516128f36128ee82612e1f565b612df2565b9150808252602083016020830185838301111561290f57600080fd5b61291a838284612ef9565b50505092915050565b600061292f8235612ee0565b905092915050565b60006020828403121561294957600080fd5b600061295784828501612817565b91505092915050565b6000806020838503121561297357600080fd5b600083013567ffffffffffffffff81111561298d57600080fd5b6129998582860161282b565b92509250509250929050565b6000806000604084860312156129ba57600080fd5b600084013567ffffffffffffffff8111156129d457600080fd5b6129e08682870161282b565b935093505060206129f386828701612817565b9150509250925092565b600080600060408486031215612a1257600080fd5b600084013567ffffffffffffffff811115612a2c57600080fd5b612a388682870161282b565b93509350506020612a4b86828701612923565b9150509250925092565b60008060008060608587031215612a6b57600080fd5b600085013567ffffffffffffffff811115612a8557600080fd5b612a918782880161282b565b94509450506020612aa487828801612923565b9250506040612ab587828801612923565b91505092959194509250565b600060208284031215612ad357600080fd5b600082013567ffffffffffffffff811115612aed57600080fd5b612af984828501612877565b91505092915050565b600060208284031215612b1457600080fd5b600082015167ffffffffffffffff811115612b2e57600080fd5b612b3a848285016128cd565b91505092915050565b612b4c81612e86565b82525050565b6000612b5d82612e58565b808452602084019350612b6f83612e4b565b60005b82811015612ba157612b85868351612b43565b612b8e82612e79565b9150602086019550600181019050612b72565b50849250505092915050565b612bb681612e98565b82525050565b6000612bc782612e6e565b808452612bdb816020860160208601612ef9565b612be481612f2c565b602085010191505092915050565b6000612bfd82612e63565b808452612c11816020860160208601612ef9565b612c1a81612f2c565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b612cc581612ec4565b82525050565b6000602082019050612ce06000830184612b43565b92915050565b60006020820190508181036000830152612d008184612b52565b905092915050565b60006040820190508181036000830152612d228185612b52565b9050612d316020830184612bad565b9392505050565b6000602082019050612d4d6000830184612bad565b92915050565b60006020820190508181036000830152612d6d8184612bf2565b905092915050565b60006020820190508181036000830152612d8f8184612bbc565b905092915050565b60006020820190508181036000830152612db081612c28565b9050919050565b60006020820190508181036000830152612dd081612c5f565b9050919050565b6000602082019050612dec6000830184612cbc565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612e1557600080fd5b8060405250919050565b600067ffffffffffffffff821115612e3657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000612e9182612ea4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612ed982612ea4565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f17578082015181840152602081019050612efc565b83811115612f26576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a723058201ce867eb17242226eaf78f7411171c12d1096d9e3595762fb915ee3b1ca7035f6c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","8a91908101906129a5565b6112ba565b005b34801561049d57600080fd5b506104b860048036036104b39190810190612960565b61130c565b005b3480156104c657600080fd5b506104e160048036036104dc9190810190612ac1565b611549565b6040516104ee9190612d38565b60405180910390f35b34801561050357600080fd5b5061050c611582565b6040516105199190612d53565b60405180910390f35b34801561052e57600080fd5b50610549600480360361054491908101906129a5565b611620565b6040516105569190612d38565b60405180910390f35b34801561056b57600080fd5b50610574611676565b6040516105819190612dd7565b60405180910390f35b34801561059657600080fd5b506105b160048036036105ac91908101906129a5565b611680565b005b3480156105bf57600080fd5b506105da60048036036105d591908101906129fd565b6116d2565b005b3480156105e857600080fd5b5061060360048036036105fe9190810190612960565b6119c1565b6040516106109190612ce6565b60405180910390f35b60008083836040518083838082843780830192505050925050506040518091039020905061065b60046000838152602001908152602001600020600401611ac7565b60001491505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079a6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107875780601f1061075c57610100808354040283529160200191610787565b820191906000526020600020905b81548152906001019060200180831161076a57829003601f168201915b5050505050611adc90919063ffffffff16565b9015156107dd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016107d49190612d75565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108f16040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b5050505050611adc90919063ffffffff16565b901515610934576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161092b9190612d75565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600083836040518083838082843780830192505050925050506040518091039020905081600460008381526020019081526020016000206001018190555050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000808686604051808383808284378083019250505092505050604051809103902090506000600460008381526020019081526020016000206002019050610aa76125b9565b610aba610ab383611ac7565b8888611ba8565b90506000610aec8260600151610ade60018560800151611cf890919063ffffffff16565b611d4290919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610b235781602001602082028038833980820191505090505b50905060008090505b8360400151811015610ba457610b4d81840186611db690919063ffffffff16565b8282815181101515610b5b57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610b2c565b5080836020015184608001511496509650505050505094509492505050565b60606000808686604051808383808284378083019250505092505050604051809103902090506000600460008381526020019081526020016000206004019050610c0b6125b9565b610c1e610c1783611ac7565b8888611ba8565b90506000610c508260600151610c4260018560800151611cf890919063ffffffff16565b611d4290919063ffffffff16565b905060608260400151604051908082528060200260200182016040528015610c875781602001602082028038833980820191505090505b50905060008090505b8360400151811015610d0857610cb181840186611db690919063ffffffff16565b8282815181101515610cbf57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610c90565b5080836080015184602001511496509650505050505094509492505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080848460405180838380828437808301925050509250505060405180910390209050610d998360046000848152602001908152602001600020600201611dd190919063ffffffff16565b9150509392505050565b600080838360405180838380828437808301925050509250505060405180910390209050610de560046000838152602001908152602001600020600201611ac7565b60001491505092915050565b6060600083836040518083838082843780830192505050925050506040518091039020905060006004600083815260200190815260200160002060020190506000610e3b82611ac7565b9050606081604051908082528060200260200182016040528015610e6e5781602001602082028038833980820191505090505b50905060008090505b82811015610ee957610e928185611db690919063ffffffff16565b8282815181101515610ea057fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610e77565b508094505050505092915050565b6000600654905090565b6000838360405180838380828437808301925050509250505060405180910390209050610f4c8260046000848152602001908152602001600020600401611e0190919063ffffffff16565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110866040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110735780601f1061104857610100808354040283529160200191611073565b820191906000526020600020905b81548152906001019060200180831161105657829003601f168201915b5050505050611adc90919063ffffffff16565b9015156110c9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016110c09190612d75565b60405180910390fd5b506110d381611e31565b6040805190810160405280600781526020017f53746f72616765000000000000000000000000000000000000000000000000008152506000908051906020019061111e9291906125e9565b506111e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156111a657600080fd5b505afa1580156111ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506111e39190810190612b02565b6121a3565b60038190555060006003541415611221577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600083836040518083838082843780830192505050925050506040518091039020905061126f8260046000848152602001908152602001600020600201611e0190919063ffffffff16565b5050505050565b600080838360405180838380828437808301925050509250505060405180910390209050600460008281526020019081526020016000206001015491505092915050565b600083836040518083838082843780830192505050925050506040518091039020905061130582600460008481526020019081526020016000206002016121b690919063ffffffff16565b5050505050565b60008282604051808383808284378083019250505092505050604051809103902090506004600082815260200190815260200160002060060160009054906101000a900460ff166114356040805190810160405280601081526020017f3a2066696c65206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114225780601f106113f757610100808354040283529160200191611422565b820191906000526020600020905b81548152906001019060200180831161140557829003601f168201915b5050505050611adc90919063ffffffff16565b901515611478576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161146f9190612d75565b60405180910390fd5b506114a4600460","","600061248b8383612365565b15156124e95782600001829080600181540180825580915050906001820390600052602060002001600090919290919091505550826000018054905083600101600084815260200190815260200160002081905550600190506124ee565b600090505b92915050565b60008083118290151561253d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016125349190612d75565b60405180910390fd5b506000838581151561254b57fe5b049050809150509392505050565b600080831415829015156125a3576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161259a9190612d75565b60405180910390fd5b5082848115156125af57fe5b0690509392505050565b60a06040519081016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061262a57805160ff1916838001178555612658565b82800160010185558215612658579182015b8281111561265757825182559160200191906001019061263c565b5b50905061266591906127b9565b5090565b50805460018160011615610100020316600290046000825580601f1061268f57506126ae565b601f0160209004906000526020600020908101906126ad91906127b9565b5b50565b50805460008255906000526020600020908101906126cf91906127de565b50565b6020604051908101604052806126e6612803565b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061272d57805160ff191683800117855561275b565b8280016001018555821561275b579182015b8281111561275a57825182559160200191906001019061273f565b5b50905061276891906127b9565b5090565b8280548282559060005260206000209081019282156127a8579160200282015b828111156127a757825182559160200191906001019061278c565b5b5090506127b591906127de565b5090565b6127db91905b808211156127d75760008160009055506001016127bf565b5090565b90565b61280091905b808211156127fc5760008160009055506001016127e4565b5090565b90565b602060405190810160405280606081525090565b60006128238235612ece565b905092915050565b60008083601f840112151561283f57600080fd5b8235905067ffffffffffffffff81111561285857600080fd5b60208301915083600182028301111561287057600080fd5b9250929050565b600082601f830112151561288a57600080fd5b813561289d61289882612e1f565b612df2565b915080825260208301602083018583830111156128b957600080fd5b6128c4838284612eea565b50505092915050565b600082601f83011215156128e057600080fd5b81516128f36128ee82612e1f565b612df2565b9150808252602083016020830185838301111561290f57600080fd5b61291a838284612ef9565b50505092915050565b600061292f8235612ee0565b905092915050565b60006020828403121561294957600080fd5b600061295784828501612817565b91505092915050565b6000806020838503121561297357600080fd5b600083013567ffffffffffffffff81111561298d57600080fd5b6129998582860161282b565b92509250509250929050565b6000806000604084860312156129ba57600080fd5b600084013567ffffffffffffffff8111156129d457600080fd5b6129e08682870161282b565b935093505060206129f386828701612817565b9150509250925092565b600080600060408486031215612a1257600080fd5b600084013567ffffffffffffffff811115612a2c57600080fd5b612a388682870161282b565b93509350506020612a4b86828701612923565b9150509250925092565b60008060008060608587031215612a6b57600080fd5b600085013567ffffffffffffffff811115612a8557600080fd5b612a918782880161282b565b94509450506020612aa487828801612923565b9250506040612ab587828801612923565b91505092959194509250565b600060208284031215612ad357600080fd5b600082013567ffffffffffffffff811115612aed57600080fd5b612af984828501612877565b91505092915050565b600060208284031215612b1457600080fd5b600082015167ffffffffffffffff811115612b2e57600080fd5b612b3a848285016128cd565b91505092915050565b612b4c81612e86565b82525050565b6000612b5d82612e58565b808452602084019350612b6f83612e4b565b60005b82811015612ba157612b85868351612b43565b612b8e82612e79565b9150602086019550600181019050612b72565b50849250505092915050565b612bb681612e98565b82525050565b6000612bc782612e6e565b808452612bdb816020860160208601612ef9565b612be481612f2c565b602085010191505092915050565b6000612bfd82612e63565b808452612c11816020860160208601612ef9565b612c1a81612f2c565b602085010191505092915050565b6000602182527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60208301527f77000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b612cc581612ec4565b82525050565b6000602082019050612ce06000830184612b43565b92915050565b60006020820190508181036000830152612d008184612b52565b905092915050565b60006040820190508181036000830152612d228185612b52565b9050612d316020830184612bad565b9392505050565b6000602082019050612d4d6000830184612bad565b92915050565b60006020820190508181036000830152612d6d8184612bf2565b905092915050565b60006020820190508181036000830152612d8f8184612bbc565b905092915050565b60006020820190508181036000830152612db081612c28565b9050919050565b60006020820190508181036000830152612dd081612c85565b9050919050565b6000602082019050612dec6000830184612cbc565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612e1557600080fd5b8060405250919050565b600067ffffffffffffffff821115612e3657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000612e9182612ea4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612ed982612ea4565b9050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612f17578082015181840152602081019050612efc565b83811115612f26576000848401525b50505050565b6000601f19601f830116905091905056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820025ea405f3679b221e0bacf60ff6c485516828f4c3281230bd86a71ce9ed67c86c6578706572696d656e74616cf500373a206e6577206d616e6167657220697320746865207a65726f2061646472657373"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"ownerEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"deleteNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"nodeEmpty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"nodeExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"newFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFileNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setSize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETNODES = "getNodes";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_OWNEREMPTY = "ownerEmpty";

    public static final String FUNC_GETTOTALSIZE = "getTotalSize";

    public static final String FUNC_DELETENODE = "deleteNode";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_DELETEOWNER = "deleteOwner";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_GETOWNERS = "getOwners";

    public static final String FUNC_NODEEMPTY = "nodeEmpty";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_NODEEXIST = "nodeExist";

    public static final String FUNC_NEWFILE = "newFile";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_ADDOWNER = "addOwner";

    public static final String FUNC_GETSIZE = "getSize";

    public static final String FUNC_OWNEREXIST = "ownerExist";

    public static final String FUNC_GETTOTALFILENUMBER = "getTotalFileNumber";

    public static final String FUNC_SETSIZE = "setSize";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected FileStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple2<List<String>, Boolean> getNodes(String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNODES, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public Boolean exist(String cid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new Address(_owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean ownerEmpty(String cid) throws ContractException {
        final Function function = new Function(FUNC_OWNEREMPTY, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getTotalSize() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt deleteNode(String cid, String node) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteNode(String cid, String node, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteNode(String cid, String node) {
        final Function function = new Function(
                FUNC_DELETENODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETENODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt addNode(String cid, String node) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addNode(String cid, String node, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddNode(String cid, String node) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddNodeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDNODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt deleteOwner(String cid, String owner) {
        final Function function = new Function(
                FUNC_DELETEOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteOwner(String cid, String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteOwner(String cid, String owner) {
        final Function function = new Function(
                FUNC_DELETEOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getOwners(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean nodeEmpty(String cid) throws ContractException {
        final Function function = new Function(FUNC_NODEEMPTY, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean nodeExist(String cid, String node) throws ContractException {
        final Function function = new Function(FUNC_NODEEXIST, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(node)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt newFile(String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NEWFILE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newFile(String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWFILE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewFile(String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_NEWFILE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getNewFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List getNodes(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETNODES, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt deleteFile(String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<List<String>, Boolean> getOwners(String cid, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(pageSize),
                new Uint256(pageNumber)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Address>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new Address(_manager)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt addOwner(String cid, String owner) {
        final Function function = new Function(
                FUNC_ADDOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addOwner(String cid, String owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddOwner(String cid, String owner) {
        final Function function = new Function(
                FUNC_ADDOWNER, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public BigInteger getSize(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETSIZE, 
                Arrays.<Type>asList(new Utf8String(cid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean ownerExist(String cid, String owner) throws ContractException {
        final Function function = new Function(FUNC_OWNEREXIST, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Address(owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public BigInteger getTotalFileNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALFILENUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setSize(String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSIZE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setSize(String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSIZE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetSize(String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSIZE, 
                Arrays.<Type>asList(new Utf8String(cid),
                new Uint256(size)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetSizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static FileStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new FileStorage(contractAddress, client, credential);
    }

    public static FileStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_manager)));
        return deploy(FileStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
