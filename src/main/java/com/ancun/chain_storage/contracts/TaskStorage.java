package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TaskStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040527f6d616e61676572000000000000000000000000000000000000000000000000006003553480156200003557600080fd5b5060405160208062002b76833981018060405260208110156200005757600080fd5b81019080805190602001909291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000105816200010d640100000000026401000000009004565b505062000612565b6200012662000309640100000000026401000000009004565b6200014581620003d16401000000000262002083176401000000009004565b6040805190810160405280600781526020017f53746f7261676500000000000000000000000000000000000000000000000000815250600090805190602001906200019292919062000563565b50620002cc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156200021c57600080fd5b505afa15801562000231573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156200025c57600080fd5b8101908080516401000000008111156200027557600080fd5b828101905060208101848111156200028c57600080fd5b8151856001820283011164010000000082111715620002aa57600080fd5b50509291905050506200055064010000000002620021f0176401000000009004565b6003819055506000600354141562000306577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620003cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b620003ea62000309640100000000026401000000009004565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151562000490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005a657805160ff1916838001178555620005d7565b82800160010185558215620005d7579182015b82811115620005d6578251825591602001919060010190620005b9565b5b509050620005e69190620005ea565b5090565b6200060f91905b808211156200060b576000816000905550600101620005f1565b5090565b90565b61255480620006226000396000f3fe608060405260043610610147576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100c8578063c812fae41161008c578063c812fae41461088b578063cb361727146108de578063cd12d54a14610919578063d0ebdbe714610968578063dea05fcd146109b9578063ffcce77614610a5f57610147565b80638da5cb5b1461066d578063a065b7fa146106c4578063af11d2f314610736578063c2709dc114610785578063c2759fae146107b057610147565b8063481c6a751161010f578063481c6a75146103f45780634ebbc92a1461044b5780635d077fe51461049e57806375d0c0dc146104ed578063865356aa1461057d57610147565b806313af40351461014c5780631b39d8791461019d5780631c9fd120146101f35780631d65e77e1461020a57806323b1534b14610336575b600080fd5b34801561015857600080fd5b5061019b6004803603602081101561016f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610adf565b005b3480156101a957600080fd5b506101d6600480360360208110156101c057600080fd5b8101908080359060200190929190505050610c4c565b604051808381526020018281526020019250505060405180910390f35b3480156101ff57600080fd5b50610208610d58565b005b34801561021657600080fd5b506102436004803603602081101561022d57600080fd5b8101908080359060200190929190505050610e1f565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102f75780820151818401526020810190506102dc565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561034257600080fd5b506103da6004803603604081101561035957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561039657600080fd5b8201836020820111156103a857600080fd5b803590602001918460018302840111640100000000831117156103ca57600080fd5b9091929391929390505050610f53565b604051808215151515815260200191505060405180910390f35b34801561040057600080fd5b50610409610fcd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561045757600080fd5b506104846004803603602081101561046e57600080fd5b8101908080359060200190929190505050610ff3565b604051808215151515815260200191505060405180910390f35b3480156104aa57600080fd5b506104eb600480360360608110156104c157600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611062565b005b3480156104f957600080fd5b506105026110d9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610542578082015181840152602081019050610527565b50505050905090810190601f16801561056f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058957600080fd5b50610657600480360360a08110156105a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156105e757600080fd5b8201836020820111156105f957600080fd5b8035906020019184600183028401116401000000008311171561061b57600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611177565b6040518082815260200191505060405180910390f35b34801561067957600080fd5b50610682611561565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d057600080fd5b506106fd600480360360208110156106e757600080fd5b8101908080359060200190929190505050611587565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b34801561074257600080fd5b506107836004803603606081101561075957600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506115db565b005b34801561079157600080fd5b5061079a611898565b6040518082815260200191505060405180910390f35b3480156107bc57600080fd5b50610834600480360360208110156107d357600080fd5b81019080803590602001906401000000008111156107f057600080fd5b82018360208201111561080257600080fd5b8035906020019184600183028401116401000000008311171561082457600080fd5b90919293919293905050506118a2565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561087757808201518184015260208101905061085c565b505050509050019250505060405180910390f35b34801561089757600080fd5b506108c4600480360360208110156108ae57600080fd5b81019080803590602001909291905050506118db565b604051808215151515815260200191505060405180910390f35b3480156108ea57600080fd5b506109176004803603602081101561090157600080fd5b810190808035906020019092919050505061196a565b005b34801561092557600080fd5b506109666004803603606081101561093c57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611b4b565b005b34801561097457600080fd5b506109b76004803603602081101561098b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bc2565b005b3480156109c557600080fd5b50610a08600480360360208110156109dc57600080fd5b81","019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d78565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a4b578082015181840152602081019050610a30565b505050509050019250505060405180910390f35b348015610a6b57600080fd5b50610a9860048036036020811015610a8257600080fd5b8101908080359060200190929190505050611dc8565b604051808981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b610ae7610d58565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600660008481526020019081526020016000206000015491508160011415610c8f5760066000848152602001908152602001600020600201549050610d53565b8160021415610cb65760066000848152602001908152602001600020600301549050610d52565b8160031415610cdd5760066000848152602001908152602001600020600401549050610d51565b8160041415610d045760066000848152602001908152602001600020600501549050610d50565b8160051415610d2b5760066000848152602001908152602001600020600601549050610d4f565b8160061415610d4e57600660008481526020019081526020016000206007015490505b5b5b5b5b5b915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b600080600080606060006005600088815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160149054906101000a900460ff1684600301808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f385780601f10610f0d57610100808354040283529160200191610f38565b820191906000526020600020905b815481529060010190602001808311610f1b57829003601f168201915b50505050509050955095509550955095505091939590929450565b6000610fc483836040518083838082843780830192505050925050506040518091039020600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e2f90919063ffffffff16565b90509392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61106d60035461196a565b81600760008581526020019081526020016000206000018190555060076000848152602001908152602001600020600201546007600085815260200190815260200160002060010181905550806007600085815260200190815260200160002060020181905550505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561116f5780601f106111445761010080835404028352916020019161116f565b820191906000526020600020905b81548152906001019060200180831161115257829003601f168201915b505050505081565b600061118460035461196a565b61119a6001600454611e4690919063ffffffff16565b60048190555060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018473ffffffffffffffffffffffffffffffffffffffff168152602001831515815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060056000600454815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019080519060200190611323929190612403565b509050506101006040519081016040528060018152602001438152602001428152602001600081526020016000815260200160008152602001600081526020016000815250600660006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015590505085600014156115525760c06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250600760006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015590505060008585604051808383808284378083019250505092505050604051809103902090506114d581600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611ed090919063ffffffff16565b5061150f84600988886040518083838082843780830192505050925050509081526020016040518091039020611ee790919063ffffffff16565b15156115505761154e84600988886040518083838082843780830192505050925050509081526020016040518091039020611f1790919063ffffffff16565b505b505b60045490509695505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008060006007600089815260200190815260200160002090508060000154816001015482600201548360030154846004015485600501549650965096509650965096505091939550919395565b6115e660035461196a565b816006600085815260200190815260200160002060000181905550816002141561162a578060066000858152602001908152602001600020600301819055506116ce565b8160031415611653578060066000858152602001908152602001600020600401819055506116cd565b816004141561167c578060066000858152602001908152602001600020600501819055506116cc565b81600514156116a5578060066000858152602001908152602001600020600601819055506116cb565b81600614156116ca578060066000858152602001908152602001600020600701819055505b5b5b5b5b6000600560008581526020019081526020016000209050806001015460001480156116fa575082600214155b156118925760008160030160405180828054600181600116156101000203166002900480156117605780601f1061173e576101008083540402835291820191611760565b820191906000526020600020905b81548152906001019060200180831161174c575b5050915050604051809103902090506117e481600860008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f4790919063ffffffff16565b5061188f8260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600984600301604051808280546001816001161561010002031660029004801561186e5780601f1061184c57610100808354040283529182019161186e565b820191906000526020600020905b81548152906001019060200180831161185a575b50509150509081526020016040518091039020611f5e90919063ffffffff16565b50505b50505050565b6000600454905090565b60606118d3600984846040518083838082843780830192505050925050509081526020016040518091039020611f8e565b905092915050565b600080600090506005600084815260200190815260200160002060010154600014156119445760066000848152602001908152602001600020600001546001148061193c575060066000848152602001908152602001600020600001546002145b159050611961565b600660008481526020019081526020016000206000015460041490505b80915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a9f6040805190810160405280601481526020017f3a2063616c6c657220697320","6e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a8b5780601f10611a6057610100808354040283529160200191611a8b565b820191906000526020600020905b815481529060010190602001808311611a6e57829003601f168201915b5050505050611fae9092919063ffffffff16565b901515611b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b0c578082015181840152602081019050611af1565b50505050905090810190601f168015611b395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b611b5660035461196a565b81600760008581526020019081526020016000206000018190555060076000848152602001908152602001600020600501546007600085815260200190815260200160002060040181905550806007600085815260200190815260200160002060050181905550505050565b611bca610d58565b611bd381612083565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611c1e929190612483565b50611d3c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375d0c0dc6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b158015611ca657600080fd5b505afa158015611cba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611ce457600080fd5b810190808051640100000000811115611cfc57600080fd5b82810190506020810184811115611d1257600080fd5b8151856001820283011164010000000082111715611d2f57600080fd5b50509291905050506121f0565b60038190555060006003541415611d75577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6060611dc1600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612203565b9050919050565b6000806000806000806000806000600660008b81526020019081526020016000209050806000015481600101548260020154836003015484600401548560050154866006015487600701549850985098509850985098509850985050919395975091939597565b6000611e3e8360000183612218565b905092915050565b6000808284019050838110151515611ec6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000611edf836000018361223b565b905092915050565b6000611f0f836000018373ffffffffffffffffffffffffffffffffffffffff16600102612218565b905092915050565b6000611f3f836000018373ffffffffffffffffffffffffffffffffffffffff1660010261223b565b905092915050565b6000611f5683600001836122b0565b905092915050565b6000611f86836000018373ffffffffffffffffffffffffffffffffffffffff166001026122b0565b905092915050565b606080611f9d836000016123a7565b905060608190508092505050919050565b60608383836040516020018084805190602001908083835b602083101515611feb5780518252602082019150602081019050602083039250611fc6565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b60208310151561203e5780518252602082019150602081019050602083039250612019565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b61208b610d58565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6060612211826000016123a7565b9050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60006122478383612218565b15156122a55782600001829080600181540180825580915050906001820390600052602060002001600090919290919091505550826000018054905083600101600084815260200190815260200160002081905550600190506122aa565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114151561239b5760006001820390506000600186600001805490500390508181141515612351576000866000018281548110151561230857fe5b9060005260206000200154905080876000018481548110151561232757fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480151561236057fe5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506123a1565b60009150505b92915050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156123f757602002820191906000526020600020905b8154815260200190600101908083116123e3575b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061244457805160ff1916838001178555612472565b82800160010185558215612472579182015b82811115612471578251825591602001919060010190612456565b5b50905061247f9190612503565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124c457805160ff19168380011785556124f2565b828001600101855582156124f2579182015b828111156124f15782518255916020019190600101906124d6565b5b5090506124ff9190612503565b5090565b61252591905b80821115612521576000816000905550600101612509565b5090565b9056fea165627a7a72305820700d517f624ef45ebc786d514c8a7a213e10196a0ba0c92457948d321baaaeeb0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","60005b838110156109fb5780820151818401526020810190506109e0565b505050509050019250505060405180910390f35b348015610a1b57600080fd5b50610a24611a5c565b6040518082815260200191505060405180910390f35b348015610a4657600080fd5b50610a7360048036036020811015610a5d57600080fd5b8101908080359060200190929190505050611a66565b604051808381526020018281526020019250505060405180910390f35b348015610a9c57600080fd5b50610add60048036036060811015610ab357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611b72565b005b610ae7611658565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b8c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c7f60035461124a565b610c956001600454611e2f90919063ffffffff16565b60048190555060a0604051908101604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018473ffffffffffffffffffffffffffffffffffffffff168152602001831515815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060056000600454815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003019080519060200190610e1e929190612403565b509050506101006040519081016040528060018152602001438152602001428152602001600081526020016000815260200160008152602001600081526020016000815250600660006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050856000141561104d5760c06040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250600760006004548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050506000858560405180838380828437808301925050509250505060405180910390209050610fd081600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611eb990919063ffffffff16565b5061100a84600988886040518083838082843780830192505050925050509081526020016040518091039020611ed090919063ffffffff16565b151561104b5761104984600988886040518083838082843780830192505050925050509081526020016040518091039020611f0090919063ffffffff16565b505b505b60045490509695505050505050565b60606110a5600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f30565b9050919050565b600080600090506005600084815260200190815260200160002060010154600014156111155760066000848152602001908152602001600020600001546001148061110d575060066000848152602001908152602001600020600001546002145b159050611132565b600660008481526020019081526020016000206000015460041490505b80915050919050565b60006111ac83836040518083838082843780830192505050925050506040518091039020600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611f4590919063ffffffff16565b90509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461137f6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136b5780601f106113405761010080835404028352916020019161136b565b820191906000526020600020905b81548152906001019060200180831161134e57829003601f168201915b5050505050611f5c9092919063ffffffff16565b901515611427576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113ec5780820151818401526020810190506113d1565b50505050905090810190601f1680156114195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b611433611658565b61143c81612031565b6040805190810160405280600781526020017f53746f726167650000000000000000000000000000000000000000000000000081525060009080519060200190611487929190612483565b506115a5600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c22931696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b15801561150f57600080fd5b505afa158015611523573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561154d57600080fd5b81019080805164010000000081111561156557600080fd5b8281019050602081018481111561157b57600080fd5b815185600182028301116401000000008211171561159857600080fd5b505092919050505061219e565b600381905550600060035414156115de577f6d616e61676572000000000000000000000000000000000000000000000000006003819055505b50565b6115ec60035461124a565b81600760008581526020019081526020016000206000018190555060076000848152602001908152602001600020600201546007600085815260200190815260200160002060010181905550806007600085815260200190815260200160002060020181905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b61172a60035461124a565b81600760008581526020019081526020016000206000018190555060076000848152602001908152602001600020600501546007600085815260200190815260200160002060040181905550806007600085815260200190815260200160002060050181905550505050565b60008060008060008060006007600089815260200190815260200160002090508060000154816001015482600201548360030154846004015485600501549650965096509650965096505091939550919395565b600080600080606060006005600088815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600101548260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020160149054906101000a900460ff1684600301808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119035780601f106118d857610100808354040283529160200191611903565b820191906000526020600020905b8154815290600101906020018083116118e657829003601f168201915b50505050509050955095509550955095505091939590929450565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119b45780601f10611989576101008083540402835291602001916119b4565b820191906000526020600020905b81548152906001019060200180831161199757829003601f168201915b505050505081565b6000806000806000806000806000600660008b8152602001908152602001600020","9050806000015481600101548260020154836003015484600401548560050154866006015487600701549850985098509850985098509850985050919395975091939597565b6060611a546009848460405180838380828437808301925050509250505090815260200160405180910390206121b1565b905092915050565b6000600454905090565b600080600660008481526020019081526020016000206000015491508160011415611aa95760066000848152602001908152602001600020600201549050611b6d565b8160021415611ad05760066000848152602001908152602001600020600301549050611b6c565b8160031415611af75760066000848152602001908152602001600020600401549050611b6b565b8160041415611b1e5760066000848152602001908152602001600020600501549050611b6a565b8160051415611b455760066000848152602001908152602001600020600601549050611b69565b8160061415611b6857600660008481526020019081526020016000206007015490505b5b5b5b5b5b915091565b611b7d60035461124a565b8160066000858152602001908152602001600020600001819055508160021415611bc157806006600085815260200190815260200160002060030181905550611c65565b8160031415611bea57806006600085815260200190815260200160002060040181905550611c64565b8160041415611c1357806006600085815260200190815260200160002060050181905550611c63565b8160051415611c3c57806006600085815260200190815260200160002060060181905550611c62565b8160061415611c61578060066000858152602001908152602001600020600701819055505b5b5b5b5b600060056000858152602001908152602001600020905080600101546000148015611c91575082600214155b15611e29576000816003016040518082805460018160011615610100020316600290048015611cf75780601f10611cd5576101008083540402835291820191611cf7565b820191906000526020600020905b815481529060010190602001808311611ce3575b505091505060405180910390209050611d7b81600860008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206121d190919063ffffffff16565b50611e268260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166009846003016040518082805460018160011615610100020316600290048015611e055780601f10611de3576101008083540402835291820191611e05565b820191906000526020600020905b815481529060010190602001808311611df1575b505091505090815260200160405180910390206121e890919063ffffffff16565b50505b50505050565b6000808284019050838110151515611eaf576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000611ec88360000183612218565b905092915050565b6000611ef8836000018373ffffffffffffffffffffffffffffffffffffffff1660010261228d565b905092915050565b6000611f28836000018373ffffffffffffffffffffffffffffffffffffffff16600102612218565b905092915050565b6060611f3e826000016122b0565b9050919050565b6000611f54836000018361228d565b905092915050565b60608383836040516020018084805190602001908083835b602083101515611f995780518252602082019150602081019050602083039250611f74565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515611fec5780518252602082019150602081019050602083039250611fc7565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b612039611658565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120de576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806020830151905080915050919050565b6060806121c0836000016122b0565b905060608190508092505050919050565b60006121e0836000018361230c565b905092915050565b6000612210836000018373ffffffffffffffffffffffffffffffffffffffff1660010261230c565b905092915050565b6000612224838361228d565b1515612282578260000182908060018154018082558091505090600182039060005260206000200160009091929091909150555082600001805490508360010160008481526020019081526020016000208190555060019050612287565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561230057602002820191906000526020600020905b8154815260200190600101908083116122ec575b50505050509050919050565b6000808360010160008481526020019081526020016000205490506000811415156123f757600060018203905060006001866000018054905003905081811415156123ad576000866000018281548110151561236457fe5b9060005260206000200154905080876000018481548110151561238357fe5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548015156123bc57fe5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506123fd565b60009150505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061244457805160ff1916838001178555612472565b82800160010185558215612472579182015b82811115612471578251825591602001919060010190612456565b5b50905061247f9190612503565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124c457805160ff19168380011785556124f2565b828001600101855582156124f2579182015b828111156124f15782518255916020019190600101906124d6565b5b5090506124ff9190612503565b5090565b61252591905b80821115612521576000816000905550600101612509565b5090565b9056fea165627a7a72305820a7a65591a6289acb335e286cfd1e7f1f4f94f704509bc31c9fbe8692f74cbd410029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatusAndTime\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isNodeAddFileCidDuplicated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskProgressBySize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"action\",\"type\":\"uint256\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"noCallback\",\"type\":\"bool\"}],\"name\":\"newTask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAddFileTaskProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStatusAndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getAddFileNodes\",\"outputs\":[{\"name\":\"nodeAddresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"isOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskProgressByPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getAddFileCidHashes\",\"outputs\":[{\"name\":\"cidHashes\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTaskState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETSTATUSANDTIME = "getStatusAndTime";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_ISNODEADDFILECIDDUPLICATED = "isNodeAddFileCidDuplicated";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_SETADDFILETASKPROGRESSBYSIZE = "setAddFileTaskProgressBySize";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NEWTASK = "newTask";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETADDFILETASKPROGRESS = "getAddFileTaskProgress";

    public static final String FUNC_SETSTATUSANDTIME = "setStatusAndTime";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_GETADDFILENODES = "getAddFileNodes";

    public static final String FUNC_ISOVER = "isOver";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE = "setAddFileTaskProgressByPercentage";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_GETADDFILECIDHASHES = "getAddFileCidHashes";

    public static final String FUNC_GETTASKSTATE = "getTaskState";

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected TaskStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getStatusAndTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, Boolean, String> getTask(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, String, Boolean, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public Boolean isNodeAddFileCidDuplicated(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISNODEADDFILECIDDUPLICATED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt setAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskProgressBySize(BigInteger tid, BigInteger time, BigInteger size) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetAddFileTaskProgressBySizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKPROGRESSBYSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt newTask(String userAddress, BigInteger action, String cid, String nodeAddress, Boolean noCallback) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] newTask(String userAddress, BigInteger action, String cid, String nodeAddress, Boolean noCallback, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewTask(String userAddress, BigInteger action, String cid, String nodeAddress, Boolean noCallback) {
        final Function function = new Function(
                FUNC_NEWTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, String, Boolean> getNewTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, BigInteger, String, String, Boolean>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (Boolean) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getNewTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getAddFileTaskProgress(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKPROGRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue());
    }

    public TransactionReceipt setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStatusAndTime(BigInteger tid, BigInteger status, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStatusAndTime(BigInteger tid, BigInteger status, BigInteger time) {
        final Function function = new Function(
                FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetStatusAndTimeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTATUSANDTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger getCurrentTid() throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getAddFileNodes(String cid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILENODES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Boolean isOver(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_ISOVER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskProgressByPercentage(BigInteger tid, BigInteger time, BigInteger percentage) {
        final Function function = new Function(
                FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(time), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getSetAddFileTaskProgressByPercentageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getAddFileCidHashes(String nodeAddress) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILECIDHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getTaskState(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASKSTATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue());
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TaskStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TaskStorage(contractAddress, client, credential);
    }

    public static TaskStorage deploy(Client client, CryptoKeyPair credential, String _manager) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)));
        return deploy(TaskStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
