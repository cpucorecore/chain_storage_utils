package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Node extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ff167c0100000000000000000000000000000000000000000000000000000000028152600401611c1d91906155f9565b600060405180830381600087803b158015611c3757600080fd5b505af1158015611c4b573d6000803e3d6000fd5b505050505b5050505050565b611c807f46696c6500000000000000000000000000000000000000000000000000000000610d3d565b6000611c8a614196565b73ffffffffffffffffffffffffffffffffffffffff1663f97060e76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611ceb57600080fd5b505afa158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d239190810190615135565b905080600014151515611d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6290615965565b60405180910390fd5b60606000611d9f83611d7b610b75565b73ffffffffffffffffffffffffffffffffffffffff1661438b90919063ffffffff16565b91509150801515611de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddc906158a5565b60405180910390fd5b60008090505b8251811015611ed357611dfc613efd565b73ffffffffffffffffffffffffffffffffffffffff16631d76a54660008989898887815181101515611e2a57fe5b9060200190602002015160006040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e7396959493929190615a00565b602060405180830381600087803b158015611e8d57600080fd5b505af1158015611ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611ec59190810190615135565b508080600101915050611deb565b50505050505050565b611ee4610aa4565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f5b919061578b565b60206040518083038186803b158015611f7357600080fd5b505afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fab9190810190614df0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612059610aa4565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6121427f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b61214b83613c5d565b612153613d4d565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e8484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016121ab9392919061569e565b600060405180830381600087803b1580156121c557600080fd5b505af11580156121d9573d6000803e3d6000fd5b50505050505050565b61220b7f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b61221481613c5d565b600061221e613d4d565b73ffffffffffffffffffffffffffffffffffffffff166330ccebb5836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161227291906155f9565b60206040518083038186803b15801561228a57600080fd5b505afa15801561229e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506122c29190810190615135565b905080600114806122d35750806003145b806122de5750806004145b151561231f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231690615845565b60405180910390fd5b6000612329613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663e7b80239846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161237d91906155f9565b60006040518083038186803b15801561239557600080fd5b505afa1580156123a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506123d29190810190615079565b51905080600014151561241a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161241190615945565b60405180910390fd5b612422613d4d565b73ffffffffffffffffffffffffffffffffffffffff16637e55d59c8460026040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612479929190615700565b600060405180830381600087803b15801561249357600080fd5b505af11580156124a7573d6000803e3d6000fd5b505050506124b3613d4d565b73ffffffffffffffffffffffffffffffffffffffff16634d0fc70e846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161250791906155f9565b600060405180830381600087803b15801561252157600080fd5b505af1158015612535573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f60209dac71fd37f83dd6769f9be4bfe01f345e282f2bee99970e4a20af63f1c5836002604051612582929190615ab6565b60405180910390a2505050565b6125b87f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b6125c182613c5d565b6125c9613d4d565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161261d91906155f9565b60206040518083038186803b15801561263557600080fd5b505afa158015612649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061266d9190810190615135565b81101515156126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a8906159a5565b60405180910390fd5b6126b9613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161270f929190615700565b600060405180830381600087803b15801561272957600080fd5b505af115801561273d573d6000803e3d6000fd5b505050505050565b61276e7f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b81612777613d4d565b73ffffffffffffffffffffffffffffffffffffffff166385edee71856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127cb91906155f9565b60206040518083038186803b1580156127e357600080fd5b505afa1580156127f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061281b9190810190615135565b14151561285d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612854906159c5565b60405180910390fd5b6000806000606061286c613efd565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128c091906159e5565b60006040518083038186803b1580156128d857600080fd5b505afa1580156128ec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506129159190810190614ead565b9450945050935093508260001415612ade5761292f6141c6565b73ffffffffffffffffffffffffffffffffffffffff1663db2ddc18888684896040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129899493929190615652565b600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b505050506129c3613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663e9bf46b088876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a19929190615700565b600060405180830381600087803b158015612a3357600080fd5b505af1158015612a47573d6000803e3d6000fd5b50505050612a53613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663f117b583826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612aa791906157e3565b600060405180830381600087803b158015612ac157600080fd5b505af1158015612ad5573d6000803e3d6000fd5b50505050612cbe565b8260011415612cbd57612aef613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca88612b136141c6565b73ffffffffffffffffffffffffffffffffffffffff1663deda6066856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612b6791906157e3565b60206040518083038186803b158015612b7f57600080fd5b505afa158015612b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bb79190810190615135565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bf09291906157","00565b600060405180830381600087803b158015612c0a57600080fd5b505af1158015612c1e573d6000803e3d6000fd5b50505050811515612cbc57612c316141c6565b73ffffffffffffffffffffffffffffffffffffffff1663b37fdf0f8886846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c8993929190615614565b600060405180830381600087803b158015612ca357600080fd5b505af1158015612cb7573d6000803e3d6000fd5b505050505b5b5b612cc6613efd565b73ffffffffffffffffffffffffffffffffffffffff1663e51c212288886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d1c929190615700565b600060405180830381600087803b158015612d3657600080fd5b505af1158015612d4a573d6000803e3d6000fd5b50505050612d56613d4d565b73ffffffffffffffffffffffffffffffffffffffff16631262a0ac886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612daa91906155f9565b600060405180830381600087803b158015612dc457600080fd5b505af1158015612dd8573d6000803e3d6000fd5b5050505050505050505050565b612e0e7f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b80612e17613d4d565b73ffffffffffffffffffffffffffffffffffffffff166385edee71846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e6b91906155f9565b60206040518083038186803b158015612e8357600080fd5b505afa158015612e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ebb9190810190615135565b141515612efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef4906159c5565b60405180910390fd5b6000806060612f0a613efd565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f5e91906159e5565b60006040518083038186803b158015612f7657600080fd5b505afa158015612f8a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612fb39190810190614ead565b94505050925092506000612fc5614196565b73ffffffffffffffffffffffffffffffffffffffff166335a5c0036040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561302657600080fd5b505afa15801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061305e9190810190615135565b9050600061306a613d4d565b73ffffffffffffffffffffffffffffffffffffffff166334f3ac4d846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016130be91906157e3565b602060405180830381600087803b1580156130d857600080fd5b505af11580156130ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131109190810190615135565b905083600014156131aa57613123613d4d565b73ffffffffffffffffffffffffffffffffffffffff16631262a0ac886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161317791906155f9565b600060405180830381600087803b15801561319157600080fd5b505af11580156131a5573d6000803e3d6000fd5b505050505b818110151561324d576131bb6141c6565b73ffffffffffffffffffffffffffffffffffffffff16633bb87bcc86856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132119291906156d0565b600060405180830381600087803b15801561322b57600080fd5b505af115801561323f573d6000803e3d6000fd5b50505050505050505061344c565b83600014156133b65761325e614196565b73ffffffffffffffffffffffffffffffffffffffff1663f97060e76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156132bf57600080fd5b505afa1580156132d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132f79190810190615135565b6132ff6141c6565b73ffffffffffffffffffffffffffffffffffffffff1663245ebf21856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161335391906157e3565b60206040518083038186803b15801561336b57600080fd5b505afa15801561337f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133a39190810190615135565b10156133b5576133b48584896141f6565b5b5b6133be613efd565b73ffffffffffffffffffffffffffffffffffffffff1663bf824c6488886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613414929190615700565b600060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b5050505050505050505b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146135856040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135715780601f1061354657610100808354040283529160200191613571565b820191906000526020600020905b81548152906001019060200180831161355457829003601f168201915b5050505050613e289092919063ffffffff16565b9015156135c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135bf91906157e3565b60405180910390fd5b5050565b60148151101515613612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360990615805565b60405180910390fd5b600080905060008090505b82518110156136ba5760056000848381518110151561363857fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156136ad57600191506136ba565b808060010191505061361d565b508015156136fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136f490615885565b60405180910390fd5b5050565b613709610aa4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561377b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613772906158c5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613843610aa4565b60008090505b60048054905081101561399a57600060048281548110151561386757fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016138eb919061578b565b60206040518083038186803b15801561390357600080fd5b505afa158015613917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061393b9190810190614df0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613849565b50565b6139c67f436861696e53746f726167650000000000000000000000000000000000000000610d3d565b6139ce613d4d565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a2291906155f9565b60206040518083038186803b158015613a3a57600080fd5b505afa158015613a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613a7291908101906150ba565b151515613ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613aab90615865565b60405180910390fd5b613abc613d4d565b73ffffffffffffffffffffffffffffffffffffffff16633fbbd75e858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613b169493929190615729565b600060405180830381600087803b158015613b3057600080fd5b505af1158015613b44573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f60209dac71fd37f83dd6769f9be4bfe01f345e282f2bee99970e4a20af63f1c560006001604051613b92929190615ab6565b60405180910390a250505050565b613bc97f5461736b00000000000000000000000000000000000000000000000000000000610d3d565b613bd1613d4d565b73ffffffffffffffffffffffffffffffffffffffff1663fbd7296c83","836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c27929190615700565b600060405180830381600087803b158015613c4157600080fd5b505af1158015613c55573d6000803e3d6000fd5b505050505050565b613c65613d4d565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613cb991906155f9565b60206040518083038186803b158015613cd157600080fd5b505afa158015613ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d0991908101906150ba565b1515613d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d4190615925565b60405180910390fd5b50565b6000613d57610b75565b905090565b606082826040516020018083805190602001908083835b602083101515613d985780518252602082019150602081019050602083039250613d73565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515613deb5780518252602082019150602081019050602083039250613dc6565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b602083101515613e655780518252602082019150602081019050602083039250613e40565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515613eb85780518252602082019150602081019050602083039250613e93565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b6000613f287f5461736b000000000000000000000000000000000000000000000000000000006145b4565b905090565b6000613f37613d4d565b73ffffffffffffffffffffffffffffffffffffffff166330ccebb5836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f8b91906155f9565b60206040518083038186803b158015613fa357600080fd5b505afa158015613fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fdb9190810190615135565b9050806002141515614022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161401990615985565b60405180910390fd5b61402a613d4d565b73ffffffffffffffffffffffffffffffffffffffff16637e55d59c8360046040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614081929190615700565b600060405180830381600087803b15801561409b57600080fd5b505af11580156140af573d6000803e3d6000fd5b505050506140bb613d4d565b73ffffffffffffffffffffffffffffffffffffffff16634c6ccbac836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161410f91906155f9565b600060405180830381600087803b15801561412957600080fd5b505af115801561413d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f60209dac71fd37f83dd6769f9be4bfe01f345e282f2bee99970e4a20af63f1c582600460405161418a929190615ab6565b60405180910390a25050565b60006141c17f53657474696e67000000000000000000000000000000000000000000000000006145b4565b905090565b60006141f17f46696c65000000000000000000000000000000000000000000000000000000006145b4565b905090565b6000614200610b75565b90506000806142846142317f46696c65000000000000000000000000000000000000000000000000000000006145b4565b61425a7f5461736b000000000000000000000000000000000000000000000000000000006145b4565b86888773ffffffffffffffffffffffffffffffffffffffff1661477c90949392919063ffffffff16565b915091508015156142ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016142c1906158a5565b60405180910390fd5b6142d2613efd565b73ffffffffffffffffffffffffffffffffffffffff16631d76a546600088888660006040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614330959493929190615a5c565b602060405180830381600087803b15801561434a57600080fd5b505af115801561435e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506143829190810190615135565b50505050505050565b60606000606061439a85614b00565b73ffffffffffffffffffffffffffffffffffffffff166319ad3d716040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156143fb57600080fd5b505afa15801561440f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506144389190810190614ff7565b905083815110156144505780600092509250506145ad565b83815114156144665780600192509250506145ad565b6060846040519080825280602002602001820160405280156144975781602001602082028038833980820191505090505b509050600042604051602001808281526020019150506040516020818303038152906040528051906020012060019004905060008684518115156144d757fe5b04905060008785518115156144e857fe5b0611156144f6576001810190505b6000818381151561450357fe5b069050600088820290506001830382141561451f578886510390505b60008090505b8981101561459e578681830181518110151561453d57fe5b90602001906020020151868281518110151561455557fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050614525565b50846001975097505050505050505b9250929050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156146fd6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146e95780601f106146be576101008083540402835291602001916146e9565b820191906000526020600020905b8154815290600101906020018083116146cc57829003601f168201915b5050505050613e289092919063ffffffff16565b901515614740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161473791906157e3565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080606061478a88614b00565b73ffffffffffffffffffffffffffffffffffffffff166319ad3d716040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160006040518083038186803b1580156147eb57600080fd5b505afa1580156147ff573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506148289190810190614ff7565b9050805160001415614844576000808191509250925050614af6565b606061484f88614b0a565b73ffffffffffffffffffffffffffffffffffffffff16639fb8657b866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148a391906157e3565b60006040518083038186803b1580156148bb57600080fd5b505afa1580156148cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506148f89190810190614ff7565b905060008090505b8251811015614af25760006001905060008090505b835181101561499657838181518110151561492c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16858481518110151561495a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614156149895760009150614996565b8080600101915050614915565b508773ffffffffffffffffffffffffffffffffffffffff1684838151811015156149bc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614156149e757600090505b6149f089614b14565b73ffffffffffffffffffffffffffffffffffffffff166323b1534b8584815181101515614a1957fe5b90602001906020020151896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a5d9291906156d0565b60206040518083038186803b158015614a7557600080fd5b505afa158015614a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614aad91908101906150ba565b15614ab757600090505b8015614ae4578382815181101515614acb57fe5b9060200190602002015160019550955050505050614af6565b508080600101915050614900565b5050505b9550959350505050565b6000819050919050565b6000819050919050565b6000819050919050565b6000614b2a8235615c3d565b905092915050565b6000614b3e8251615c3d565b905092915050565b600082601f8301121515614b5957600080fd5b8151614b6c614b6782615b0c565b615adf565b91508181835260208401935060208101905083856020840282011115614b9157600080fd5b60005b83811015614bc15781614ba78882614b32565b845260208401935060208301925050600181019050614b94565b5050505092915050565b600082601f8301121515614bde57600080fd5b8135614bf1614bec82615b34565b61","","615bf682615c13565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000615c4882615c13565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000615c7a82615c81565b9050919050565b6000615c8c82615c13565b9050919050565b82818337600083830152505050565b60005b83811015615cc0578082015181840152602081019050615ca5565b83811115615ccf576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058206dd664fb77d62d1a8eb7e374fd0f28217d205c78a91c5d3d5a4f700c59bb97ed6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","0000000000000000000000000000000000000000000000006128bd565b60008060006060611c19613c5d565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611c6d91906159e5565b60006040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611cc29190810190614ead565b94505093509350935084611cd4613c8d565b73ffffffffffffffffffffffffffffffffffffffff16638d6a7b00846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d2891906155f9565b60206040518083038186803b158015611d4057600080fd5b505afa158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d789190810190615135565b141515611dba576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611db190615845565b60405180910390fd5b611dc382613c9c565b611dcb613c5d565b73ffffffffffffffffffffffffffffffffffffffff1663e5451837866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e1f91906159e5565b600060405180830381600087803b158015611e3957600080fd5b505af1158015611e4d573d6000803e3d6000fd5b50505050826000141561204857611e62613f05565b73ffffffffffffffffffffffffffffffffffffffff16631e0c7ae16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611ec357600080fd5b505afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611efb9190810190615135565b611f03613f35565b73ffffffffffffffffffffffffffffffffffffffff16632aadc3e5836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f5791906157e3565b60206040518083038186803b158015611f6f57600080fd5b505afa158015611f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611fa79190810190615135565b1015611fb957611fb8848284613f65565b5b611fc1613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663c27155a2836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161201591906155f9565b600060405180830381600087803b15801561202f57600080fd5b505af1158015612043573d6000803e3d6000fd5b505050505b5050505050565b6120576130ea565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156120c9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016120c090615905565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6121b27f436861696e53746f7261676500000000000000000000000000000000000000006128bd565b6121bb836140fa565b6121c3613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161221b9392919061569e565b600060405180830381600087803b15801561223557600080fd5b505af1158015612249573d6000803e3d6000fd5b50505050505050565b61227b7f436861696e53746f7261676500000000000000000000000000000000000000006128bd565b80612284613c8d565b73ffffffffffffffffffffffffffffffffffffffff16638d6a7b00846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122d891906155f9565b60206040518083038186803b1580156122f057600080fd5b505afa158015612304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123289190810190615135565b14151561236a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161236190615845565b60405180910390fd5b6000806060612377613c5d565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123cb91906159e5565b60006040518083038186803b1580156123e357600080fd5b505afa1580156123f7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506124209190810190614ead565b94505050925092506000612432613f05565b73ffffffffffffffffffffffffffffffffffffffff1663dbe449be6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561249357600080fd5b505afa1580156124a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124cb9190810190615135565b905060006124d7613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663ae60e9be846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161252b91906157e3565b602060405180830381600087803b15801561254557600080fd5b505af1158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061257d9190810190615135565b9050836000141561261757612590613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663c27155a2886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016125e491906155f9565b600060405180830381600087803b1580156125fe57600080fd5b505af1158015612612573d6000803e3d6000fd5b505050505b81811015156126ba57612628613f35565b73ffffffffffffffffffffffffffffffffffffffff1663ced207f986856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161267e9291906156d0565b600060405180830381600087803b15801561269857600080fd5b505af11580156126ac573d6000803e3d6000fd5b5050505050505050506128b9565b8360001415612823576126cb613f05565b73ffffffffffffffffffffffffffffffffffffffff16631e0c7ae16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561272c57600080fd5b505afa158015612740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127649190810190615135565b61276c613f35565b73ffffffffffffffffffffffffffffffffffffffff16632aadc3e5856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016127c091906157e3565b60206040518083038186803b1580156127d857600080fd5b505afa1580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128109190810190615135565b101561282257612821858489613f65565b5b5b61282b613c5d565b73ffffffffffffffffffffffffffffffffffffffff16639d39f7a888886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612881929190615700565b600060405180830381600087803b15801561289b57600080fd5b505af11580156128af573d6000803e3d6000fd5b5050505050505050505b5050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a036040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129ef5780601f106129c4576101008083540402835291602001916129ef565b820191906000526020600020905b8154815290600101906020018083116129d257829003601f168201915b50505050506144df9092919063ffffffff16565b901515612a46576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612a3d91906157e3565b60405180910390fd5b5050565b612a737f436861696e53746f7261676500000000000000000000000000000000000000006128bd565b81612a7c613c8d565b73ffffffffffffffffffffffffffffffffffffffff16638d6a7b00856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ad091906155f9565b60206040518083038186803b158015612ae857600080fd5b505afa158015612afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b209190810190615135565b141515612b62576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612b5990615845565b60405180910390fd5b60008060006060612b71613c5d565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bc591906159e5565b60006040518083038186803b158015612bdd57600080fd5b505afa158015612bf1573d6000803e3d","6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250612c1a9190810190614ead565b9450945050935093508260001415612de357612c34613f35565b73ffffffffffffffffffffffffffffffffffffffff16630c6614f3888684896040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c8e9493929190615652565b600060405180830381600087803b158015612ca857600080fd5b505af1158015612cbc573d6000803e3d6000fd5b50505050612cc8613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663fdc4793988876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d1e929190615700565b600060405180830381600087803b158015612d3857600080fd5b505af1158015612d4c573d6000803e3d6000fd5b50505050612d58613c8d565b73ffffffffffffffffffffffffffffffffffffffff16632c4ad139826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612dac91906157e3565b600060405180830381600087803b158015612dc657600080fd5b505af1158015612dda573d6000803e3d6000fd5b50505050612fc3565b8260011415612fc257612df4613c8d565b73ffffffffffffffffffffffffffffffffffffffff16632817fe6a88612e18613f35565b73ffffffffffffffffffffffffffffffffffffffff16639bd76136856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e6c91906157e3565b60206040518083038186803b158015612e8457600080fd5b505afa158015612e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ebc9190810190615135565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ef5929190615700565b600060405180830381600087803b158015612f0f57600080fd5b505af1158015612f23573d6000803e3d6000fd5b50505050811515612fc157612f36613f35565b73ffffffffffffffffffffffffffffffffffffffff1663531525c08886846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612f8e93929190615614565b600060405180830381600087803b158015612fa857600080fd5b505af1158015612fbc573d6000803e3d6000fd5b505050505b5b5b612fcb613c5d565b73ffffffffffffffffffffffffffffffffffffffff1663856ebe9e88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613021929190615700565b600060405180830381600087803b15801561303b57600080fd5b505af115801561304f573d6000803e3d6000fd5b5050505061305b613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663c27155a2886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016130af91906155f9565b600060405180830381600087803b1580156130c957600080fd5b505af11580156130dd573d6000803e3d6000fd5b5050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561317c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613173906159c5565b60405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6131cd7f5461736b000000000000000000000000000000000000000000000000000000006128bd565b6131d5613c8d565b73ffffffffffffffffffffffffffffffffffffffff166383dd275083836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161322b929190615700565b600060405180830381600087803b15801561324557600080fd5b505af1158015613259573d6000803e3d6000fd5b505050505050565b61328a7f436861696e53746f7261676500000000000000000000000000000000000000006128bd565b613293816140fa565b600061329d613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663bca14431836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132f191906155f9565b60206040518083038186803b15801561330957600080fd5b505afa15801561331d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133419190810190615135565b905080600114806133525750806003145b1515613393576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161338a906158a5565b60405180910390fd5b61339b613c8d565b73ffffffffffffffffffffffffffffffffffffffff166352fa65f4836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016133ef91906155f9565b600060405180830381600087803b15801561340957600080fd5b505af115801561341d573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f47bc25f27688fd7281fcac6b8f9ed226c6d9ffbb2720debab621469c7ed2ef2982600060405161346a929190615ab6565b60405180910390a25050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135495780601f1061351e57610100808354040283529160200191613549565b820191906000526020600020905b81548152906001019060200180831161352c57829003601f168201915b505050505081565b60148151101515613597576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161358e90615945565b60405180910390fd5b600080905060008090505b825181101561363f576005600084838151811015156135bd57fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415613632576001915061363f565b80806001019150506135a2565b50801515613682576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161367990615885565b60405180910390fd5b5050565b6136af7f436861696e53746f7261676500000000000000000000000000000000000000006128bd565b6136b8816140fa565b60006136c2613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663bca14431836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161371691906155f9565b60206040518083038186803b15801561372e57600080fd5b505afa158015613742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506137669190810190615135565b905080600114806137775750806003145b806137825750806004145b15156137c3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016137ba90615865565b60405180910390fd5b60006137cd613c8d565b73ffffffffffffffffffffffffffffffffffffffff16639d804d1c846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161382191906155f9565b60006040518083038186803b15801561383957600080fd5b505afa15801561384d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506138769190810190615079565b5190508060001415156138be576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138b590615825565b60405180910390fd5b6138c6613c8d565b73ffffffffffffffffffffffffffffffffffffffff16632d1110848460026040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161391d929190615700565b600060405180830381600087803b15801561393757600080fd5b505af115801561394b573d6000803e3d6000fd5b50505050613957613c8d565b73ffffffffffffffffffffffffffffffffffffffff1663405ad445846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139ab91906155f9565b600060405180830381600087803b1580156139c557600080fd5b505af11580156139d9573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f47bc25f27688fd7281fcac6b8f9ed226c6d9ffbb2720debab621469c7ed2ef29836002604051613a26929190615ab6565b60405180910390a2505050565b613a3b6130ea565b60008090505b600480549050811015613b92576000600482815481101515613a5f57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ae3919061578b565b60206040518083038186803b158015613afb57600080fd5b505afa158015613b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613b339190810190614df0565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613a41565b50565b613b9d6130ea565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16","","","615bf682615c13565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000615c4882615c13565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000615c7a82615c81565b9050919050565b6000615c8c82615c13565b9050919050565b82818337600083830152505050565b60005b83811015615cc0578082015181840152602081019050615ca5565b83811115615ccf576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058208b38520ac0e1852a99babe3be87f1dcb7e7998e5d2d9b4fee89f2cc0dd5b0af16c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"maintain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"reportTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"reportAcceptTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"online\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"finishTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"failTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"taskIssuedCallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"NodeStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_MAINTAIN = "maintain";

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_REPORTTASKTIMEOUT = "reportTaskTimeout";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_REPORTACCEPTTASKTIMEOUT = "reportAcceptTaskTimeout";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_ONLINE = "online";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_FINISHTASK = "finishTask";

    public static final String FUNC_FAILTASK = "failTask";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_TASKISSUEDCALLBACK = "taskIssuedCallback";

    public static final Event NODESTATUSCHANGED_EVENT = new Event("NodeStatusChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Node(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt maintain(String nodeAddress) {
        final Function function = new Function(
                FUNC_MAINTAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] maintain(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MAINTAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMaintain(String nodeAddress) {
        final Function function = new Function(
                FUNC_MAINTAIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getMaintainInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MAINTAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt reportTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_REPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportTaskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_REPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getReportTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTTASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt deRegister(String nodeAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String nodeAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt reportAcceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_REPORTACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportAcceptTaskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportAcceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_REPORTACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getReportAcceptTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String userAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String nodeAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String nodeAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt online(String nodeAddress) {
        final Function function = new Function(
                FUNC_ONLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] online(String nodeAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnline(String nodeAddress) {
        final Function function = new Function(
                FUNC_ONLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getOnlineInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONLINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String nodeAddress, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String nodeAddress, BigInteger storageTotal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String nodeAddress, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt finishTask(String nodeAddress, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] finishTask(String nodeAddress, BigInteger tid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinishTask(String nodeAddress, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getFinishTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINISHTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt failTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] failTask(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFailTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFailTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FAILTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt register(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String nodeAddress, BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String nodeAddress, BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt taskIssuedCallback(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKISSUEDCALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] taskIssuedCallback(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TASKISSUEDCALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTaskIssuedCallback(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKISSUEDCALLBACK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getTaskIssuedCallbackInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TASKISSUEDCALLBACK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<NodeStatusChangedEventResponse> getNodeStatusChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NODESTATUSCHANGED_EVENT, transactionReceipt);
        ArrayList<NodeStatusChangedEventResponse> responses = new ArrayList<NodeStatusChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NodeStatusChangedEventResponse typedResponse = new NodeStatusChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeNodeStatusChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(NODESTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeNodeStatusChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(NODESTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Node load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Node(contractAddress, client, credential);
    }

    public static Node deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(Node.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class NodeStatusChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public BigInteger from;

        public BigInteger to;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
