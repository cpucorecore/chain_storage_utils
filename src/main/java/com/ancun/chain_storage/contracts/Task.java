package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Task extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405260408051908101604052807f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081525060079060026200006b9291906200027c565b503480156200007957600080fd5b5060405160208062004ebb833981018060405260208110156200009b57600080fd5b81019080805190602001909291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001ab7f5461736b0000000000000000000000000000000000000000000000000000000062000241640100000000026401000000009004565b6060604051908101604052807f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081526020017f436861696e53746f726167650000000000000000000000000000000000000000815250600490600362000239929190620002ce565b5050620003f7565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200027892919062000320565b5050565b828054828255906000526020600020908101928215620002bb579160200282015b82811115620002ba5782518255916020019190600101906200029d565b5b509050620002ca9190620003a7565b5090565b8280548282559060005260206000209081019282156200030d579160200282015b828111156200030c578251825591602001919060010190620002ef565b5b5090506200031c9190620003a7565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036357805160ff191683800117855562000394565b8280016001018555821562000394579182015b828111156200039357825182559160200191906001019062000376565b5b509050620003a39190620003cf565b5090565b620003cc91905b80821115620003c8576000816000905550600101620003ae565b5090565b90565b620003f491905b80821115620003f0576000816000905550600101620003d6565b5090565b90565b614ab480620004076000396000f3fe6080604052600436106101f5576000357c0100000000000000000000000000000000000000000000000000000000900480635adfb0541161011f578063bf824c64116100b2578063cc54949e11610081578063cc54949e14610ca0578063d0ebdbe714610d65578063d5c2c8ca14610db6578063e51c212214610dcd576101f5565b8063bf824c6414610b8c578063c2709dc114610be7578063c812fae414610c12578063cb36172714610c65576101f5565b80639137c1a7116100ee5780639137c1a714610a2957806391c48c7614610a7a5780639acb490e14610adf578063a065b7fa14610b1a576101f5565b80635adfb054146108a257806375d0c0dc146109075780638aed3c32146109975780638da5cb5b146109d2576101f5565b806321f8a72111610197578063481c6a7511610166578063481c6a75146107625780634ebbc92a146107b95780634f2942fe1461080c578063539ccb3a14610847576101f5565b806321f8a7211461059757806323b1534b1461061257806330f6c31d146106d05780633408f73a1461070b576101f5565b80631b39d879116101d35780631b39d8791461030e5780631c9fd120146103645780631d65e77e1461037b5780631d76a546146104a7576101f5565b806304f3bcec146101fa578063126779c21461025157806313af4035146102bd575b600080fd5b34801561020657600080fd5b5061020f610e28565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025d57600080fd5b50610266610e4e565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102a957808201518184015260208101905061028e565b505050509050019250505060405180910390f35b3480156102c957600080fd5b5061030c600480360360208110156102e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ea6565b005b34801561031a57600080fd5b506103476004803603602081101561033157600080fd5b8101908080359060200190929190505050611013565b604051808381526020018281526020019250505060405180910390f35b34801561037057600080fd5b506103796110d7565b005b34801561038757600080fd5b506103b46004803603602081101561039e57600080fd5b810190808035906020019092919050505061119e565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561046857808201518184015260208101905061044d565b50505050905090810190601f1680156104955780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b3480156104b357600080fd5b50610581600480360360a08110156104ca57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561051157600080fd5b82018360208201111561052357600080fd5b8035906020019184600183028401116401000000008311171561054557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506112e6565b6040518082815260200191505060405180910390f35b3480156105a357600080fd5b506105d0600480360360208110156105ba57600080fd5b810190808035906020019092919050505061161a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061e57600080fd5b506106b66004803603604081101561063557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561067257600080fd5b82018360208201111561068457600080fd5b803590602001918460018302840111640100000000831117156106a657600080fd5b9091929391929390505050611657565b604051808215151515815260200191505060405180910390f35b3480156106dc57600080fd5b50610709600480360360208110156106f357600080fd5b8101908080359060200190929190505050611771565b005b34801561071757600080fd5b50610720611b1b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076e57600080fd5b50610777611d22565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107c557600080fd5b506107f2600480360360208110156107dc57600080fd5b8101908080359060200190929190505050611d48565b604051808215151515815260200191505060405180910390f35b34801561081857600080fd5b506108456004803603602081101561082f57600080fd5b8101908080359060200190929190505050611e00565b005b34801561085357600080fd5b506108a06004803603604081101561086a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ff2565b005b3480156108ae57600080fd5b50610905600480360360608110156108c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506124dd565b005b34801561091357600080fd5b5061091c6128a4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561095c578082015181840152602081019050610941565b50505050905090810190601f1680156109895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109a357600080fd5b506109d0600480360360208110156109ba57600080fd5b8101908080359060200190929190505050612942565b005b3480156109de57600080fd5b506109e7612a94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a3557600080fd5b50610a7860048036036020811015610a4c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612aba565b005b348015610a8657600080fd5b50610add60048036036060811015610a9d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612b82565b005b348015610aeb57600080fd5b50610b1860048036036020811015610b0257600080fd5b8101908080359060200190929190505050612fc2565b005b348015610b2657600080fd5b50610b5360048036036020811015610b3d57600080fd5b810190808035906020019092919050505061336c565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b348015610b9857600080fd5b50610be560048036036040811015610baf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061346b565b005b348015610bf357600080fd5b50610bfc61","3931565b6040518082815260200191505060405180910390f35b348015610c1e57600080fd5b50610c4b60048036036020811015610c3557600080fd5b81019080803590602001909291905050506139dc565b604051808215151515815260200191505060405180910390f35b348015610c7157600080fd5b50610c9e60048036036020811015610c8857600080fd5b8101908080359060200190929190505050613a94565b005b348015610cac57600080fd5b50610d6360048036036020811015610cc357600080fd5b8101908080359060200190640100000000811115610ce057600080fd5b820183602082011115610cf257600080fd5b80359060200191846020830284011164010000000083111715610d1457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613c75565b005b348015610d7157600080fd5b50610db460048036036020811015610d8857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613e10565b005b348015610dc257600080fd5b50610dcb613f7d565b005b348015610dd957600080fd5b50610e2660048036036040811015610df057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506140e2565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020018280548015610e9c57602002820191906000526020600020905b815481526020019060010190808311610e88575b5050505050905090565b610eae6110d7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061101e614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561108957600080fd5b505afa15801561109d573d6000803e3d6000fd5b505050506040513d60408110156110b357600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60008060008060606111ae614530565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561121a57600080fd5b505afa15801561122e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561125857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805164010000000081111561129857600080fd5b828101905060208101848111156112ae57600080fd5b81518560018202830111640100000000821117156112cb57600080fd5b50509291905050509450945094509450945091939590929450565b6000611341600780548060200260200160405190810160405280929190818152602001828054801561133757602002820191906000526020600020905b815481526020019060010190808311611323575b5050505050613c75565b600061134b614530565b73ffffffffffffffffffffffffffffffffffffffff1663865356aa888a898989896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001831515151581526020018281038252868682818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b15801561146157600080fd5b505af1158015611475573d6000803e3d6000fd5b505050506040513d602081101561148b57600080fd5b81019080805190602001909291905050509050808473ffffffffffffffffffffffffffffffffffffffff167fe0f704081705ae0bfc1d02ebb379c95742e4984fb7c2e77016a969fdc878619260405160405180910390a38373ffffffffffffffffffffffffffffffffffffffff167fb0a508644ce7a6785f2e58fef91db30149a94c5ddde654b83fafbe6cd92301ab828a600060016040518085815260200184815260200183815260200182815260200194505050505060405180910390a261155261453f565b73ffffffffffffffffffffffffffffffffffffffff1663fea240f285836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b50505050809150509695505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000611661614530565b73ffffffffffffffffffffffffffffffffffffffff166323b1534b8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b15801561172d57600080fd5b505afa158015611741573d6000803e3d6000fd5b505050506040513d602081101561175757600080fd5b810190808051906020019092919050505090509392505050565b61179a7f4e6f646500000000000000000000000000000000000000000000000000000000611e00565b6117a38161456f565b6000806117ae614530565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561185857600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805164010000000081111561189857600080fd5b828101905060208101848111156118ae57600080fd5b81518560018202830111640100000000821117156118cb57600080fd5b50509291905050505050925092505060006118e4614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561194f57600080fd5b505afa158015611963573d6000803e3d6000fd5b505050506040513d604081101561197957600080fd5b810190808051906020019092919080519060200190929190505050509050806001141515611a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f543a7461736b20737461747573206973206e6f7420437265617465640000000081525060200191505060405180910390fd5b611a17614530565b73ffffffffffffffffffffffffffffffffffffffff1663af11d2f3856003426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015611a9657600080fd5b505af1158015611aaa573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167fb0a508644ce7a6785f2e58fef91db30149a94c5ddde654b83fafbe6cd92301ab85858460056040518085815260200184815260200183815260200182815260200194505050505060405180910390a250505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c516040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c3e5780","","000000000000000000000281526004018082815260200191505060006040518083038186803b158015612c2a57600080fd5b505afa158015612c3e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a0811015612c6857600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051640100000000811115612ca857600080fd5b82810190506020810184811115612cbe57600080fd5b8151856001820283011164010000000082111715612cdb57600080fd5b50509291905050505050925050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515612d8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f543a6e6f64652068617665206e6f2074686973207461736b000000000000000081525060200191505060405180910390fd5b60648211151515612e05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f543a70657263656e74616765206d757374203c3d31303000000000000000000081525060200191505060405180910390fd5b6000612e0f614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d6040811015612ea457600080fd5b810190808051906020019092919080519060200190929190505050509050806002141515612f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180614a646025913960400191505060405180910390fd5b612f25614530565b73ffffffffffffffffffffffffffffffffffffffff1663cd12d54a8542866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015612fa357600080fd5b505af1158015612fb7573d6000803e3d6000fd5b505050505050505050565b612feb7f4e6f646500000000000000000000000000000000000000000000000000000000611e00565b612ff48161456f565b6000612ffe614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561306957600080fd5b505afa15801561307d573d6000803e3d6000fd5b505050506040513d604081101561309357600080fd5b8101908080519060200190929190805190602001909291905050505090506000806130bc614530565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561312857600080fd5b505afa15801561313c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561316657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080516401000000008111156131a657600080fd5b828101905060208101848111156131bc57600080fd5b81518560018202830111640100000000821117156131d957600080fd5b505092919050505050509250925050826002141515613260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f543a7461736b20737461747573206973206e6f7420416363657074656400000081525060200191505060405180910390fd5b613268614530565b73ffffffffffffffffffffffffffffffffffffffff1663af11d2f3856006426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156132e757600080fd5b505af11580156132fb573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167fb0a508644ce7a6785f2e58fef91db30149a94c5ddde654b83fafbe6cd92301ab85848660066040518085815260200184815260200183815260200182815260200194505050505060405180910390a250505050565b60008060008060008061337d614530565b73ffffffffffffffffffffffffffffffffffffffff1663a065b7fa886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060c06040518083038186803b1580156133e957600080fd5b505afa1580156133fd573d6000803e3d6000fd5b505050506040513d60c081101561341357600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505095509550955095509550955091939550919395565b6134947f4e6f646500000000000000000000000000000000000000000000000000000000611e00565b61349d8161456f565b6000806134a8614530565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561351457600080fd5b505afa158015613528573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561355257600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805164010000000081111561359257600080fd5b828101905060208101848111156135a857600080fd5b81518560018202830111640100000000821117156135c557600080fd5b50509291905050505050925092505081600014151561364c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f543a6f6e6c79206164642066696c65207461736b2063616e206661696c00000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415156136ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4e3a6e6f64652068617665206e6f742074686973207461736b0000000000000081525060200191505060405180910390fd5b60006136f9614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561376457600080fd5b505afa158015613778573d6000803e3d6000fd5b505050506040513d604081101561378e57600080fd5b810190808051906020019092919080519060200190929190505050509050806002141515613824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f543a7461736b20737461747573206973206e6f7420416363657074656400000081525060200191505060405180910390fd5b61382c614530565b73ffffffffffffffffffffffffffffffffffffffff1663af11d2f3856005426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156138ab57600080fd5b505af11580156138bf573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167fb0a508644ce7a6785f2e58fef91db30149a94c5ddde654b83fafbe6cd92301ab85858460056040518085815260200184815260200183815260200182815260200194505050505060405180910390a25050505050565b600061393b614530565b73ffffffffffffffffffffffffffffffffffffffff1663c2709dc16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561399c57600080fd5b505afa1580156139b0573d6000803e3d6000fd5b505050506040513d60208110156139c657600080fd5b8101908080519060200190929190505050905090565b60006139e6614530565b73ffffffffffffffffffffffffffffffffffffffff1663c812fae4836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015613a5257600080fd5b505afa158015613a66573d6000803e3d6000fd5b505050506040513d6020811015613a7c57600080fd5b81019080805190602001909291905050509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613bc96040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bb55780601f10613b8a57610100808354040283529160200191613bb5565b820191906000526020600020905b815481529060010190602001808311613b9857829003601f168201915b50505050506147619092919063ffffffff16565b901515613c71576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004","018080602001828103825283818151815260200191508051906020019080838360005b83811015613c36578082015181840152602081019050613c1b565b50505050905090810190601f168015613c635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b60148151101515613cee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b8251811015613d9657600560008483815181101515613d1457fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415613d895760019150613d96565b8080600101915050613cf9565b50801515613e0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b613e186110d7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613f856110d7565b60008090505b6004805490508110156140df576000600482815481101515613fa957fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561404557600080fd5b505afa158015614059573d6000803e3d6000fd5b505050506040513d602081101561406f57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613f8b565b50565b61410b7f4e6f646500000000000000000000000000000000000000000000000000000000611e00565b6141148161456f565b600061411e614530565b73ffffffffffffffffffffffffffffffffffffffff16631b39d879836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561418957600080fd5b505afa15801561419d573d6000803e3d6000fd5b505050506040513d60408110156141b357600080fd5b8101908080519060200190929190805190602001909291905050505090506000806141dc614530565b73ffffffffffffffffffffffffffffffffffffffff16631d65e77e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561424857600080fd5b505afa15801561425c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561428657600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080516401000000008111156142c657600080fd5b828101905060208101848111156142dc57600080fd5b81518560018202830111640100000000821117156142f957600080fd5b505092919050505050509250925050826002141515614380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f543a7461736b20737461747573206973206e6f7420416363657074656400000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515614423576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f543a6e6f64652068617665206e6f742074686973207461736b0000000000000081525060200191505060405180910390fd5b61442b614530565b73ffffffffffffffffffffffffffffffffffffffff1663af11d2f3856004426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156144aa57600080fd5b505af11580156144be573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167fb0a508644ce7a6785f2e58fef91db30149a94c5ddde654b83fafbe6cd92301ab85848660046040518085815260200184815260200183815260200182815260200194505050505060405180910390a25050505050565b600061453a611b1b565b905090565b600061456a7f4e6f646500000000000000000000000000000000000000000000000000000000614836565b905090565b614577614530565b73ffffffffffffffffffffffffffffffffffffffff16634ebbc92a826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156145e357600080fd5b505afa1580156145f7573d6000803e3d6000fd5b505050506040513d602081101561460d57600080fd5b81019080805190602001909291905050501515614692576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f543a7461736b206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b50565b606082826040516020018083805190602001908083835b6020831015156146d157805182526020820191506020810190506020830392506146ac565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310151561472457805182526020820191506020810190506020830392506146ff565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b60208310151561479e5780518252602082019150602081019050602083039250614779565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156147f157805182526020820191506020810190506020830392506147cc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561497f6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561496b5780601f106149405761010080835404028352916020019161496b565b820191906000526020600020905b81548152906001019060200180831161494e57829003601f168201915b50505050506147619092919063ffffffff16565b901515614a27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156149ec5780820151818401526020810190506149d1565b50505050905090810190601f168015614a195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905091905056fe543a77726f6e67207461736b207374617475732c6d757374205461736b4163636570746564a165627a7a7230582074d284247b203bd8dfb0c074d5d6767c8b25649c3837bf56429cd099c95f87910029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405260408051908101604052807f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081525060079060026200006b9291906200027c565b503480156200007957600080fd5b5060405160208062004ebb833981018060405260208110156200009b57600080fd5b81019080805190602001909291905050508033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001ab7f5461736b0000000000000000000000000000000000000000000000000000000062000241640100000000026401000000009004565b6060604051908101604052807f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081526020017f436861696e53746f726167650000000000000000000000000000000000000000815250600490600362000239929190620002ce565b5050620003f7565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200027892919062000320565b5050565b828054828255906000526020600020908101928215620002bb579160200282015b82811115620002ba5782518255916020019190600101906200029d565b5b509050620002ca9190620003a7565b5090565b8280548282559060005260206000209081019282156200030d579160200282015b828111156200030c578251825591602001919060010190620002ef565b5b5090506200031c9190620003a7565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036357805160ff191683800117855562000394565b8280016001018555821562000394579182015b828111156200039357825182559160200191906001019062000376565b5b509050620003a39190620003cf565b5090565b620003cc91905b80821115620003c8576000816000905550600101620003ae565b5090565b90565b620003f491905b80821115620003f0576000816000905550600101620003d6565b5090565b90565b614ab480620004076000396000f3fe6080604052600436106101f5576000357c01000000000000000000000000000000000000000000000000000000009004806391726a991161011f578063c2293169116100b2578063d8cba2fd11610081578063d8cba2fd14610d2f578063e545183714610d85578063f9de6e8514610dc0578063facc639614610dd7576101f5565b8063c229316914610b4a578063d27072d914610bda578063d2814b3814610c9f578063d6f0374d14610d04576101f5565b8063b722765a116100ee578063b722765a146108da578063bef24c4b14610931578063c05a72b2146109a3578063c0c22a6214610acf576101f5565b806391726a99146107dc5780639d39f7a81461082d578063a202914a14610888578063b1eb3c2e146108c3576101f5565b806338b8878c116101975780637f8f6197116101665780637f8f619714610698578063856ebe9e146106f3578063888885391461074e5780638b6ceb4f146107a1576101f5565b806338b8878c1461054a5780635089e2c8146105af5780636b58506b146106065780636e1f75ad14610641576101f5565b80631db0dbc9116101d35780631db0dbc914610392578063250b8af6146103fe5780632dda56f51461045157806335de54291461050f576101f5565b806305282c70146101fa5780630ec991c21461024b578063184ee039146102a2575b600080fd5b34801561020657600080fd5b506102496004803603602081101561021d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e28565b005b34801561025757600080fd5b50610260610f95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ae57600080fd5b5061037c600480360360a08110156102c557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561030c57600080fd5b82018360208201111561031e57600080fd5b8035906020019184600183028401116401000000008311171561034057600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610fbb565b6040518082815260200191505060405180910390f35b34801561039e57600080fd5b506103a76112ef565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103ea5780820151818401526020810190506103cf565b505050509050019250505060405180910390f35b34801561040a57600080fd5b506104376004803603602081101561042157600080fd5b8101908080359060200190929190505050611347565b604051808215151515815260200191505060405180910390f35b34801561045d57600080fd5b506104f56004803603604081101561047457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156104b157600080fd5b8201836020820111156104c357600080fd5b803590602001918460018302840111640100000000831117156104e557600080fd5b90919293919293905050506113ff565b604051808215151515815260200191505060405180910390f35b34801561051b57600080fd5b506105486004803603602081101561053257600080fd5b8101908080359060200190929190505050611519565b005b34801561055657600080fd5b506105ad6004803603606081101561056d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506118c3565b005b3480156105bb57600080fd5b506105c4611d03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061257600080fd5b5061063f6004803603602081101561062957600080fd5b8101908080359060200190929190505050611d29565b005b34801561064d57600080fd5b50610656611e7b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a457600080fd5b506106f1600480360360408110156106bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612082565b005b3480156106ff57600080fd5b5061074c6004803603604081101561071657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061256d565b005b34801561075a57600080fd5b506107876004803603602081101561077157600080fd5b81019080803590602001909291905050506129bb565b604051808215151515815260200191505060405180910390f35b3480156107ad57600080fd5b506107da600480360360208110156107c457600080fd5b8101908080359060200190929190505050612a73565b005b3480156107e857600080fd5b5061082b600480360360208110156107ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c54565b005b34801561083957600080fd5b506108866004803603604081101561085057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dc1565b005b34801561089457600080fd5b506108c1600480360360208110156108ab57600080fd5b8101908080359060200190929190505050613287565b005b3480156108cf57600080fd5b506108d8613479565b005b3480156108e657600080fd5b506108ef613540565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561093d57600080fd5b5061096a6004803603602081101561095457600080fd5b8101908080359060200190929190505050613566565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b3480156109af57600080fd5b506109dc600480360360208110156109c657600080fd5b8101908080359060200190929190505050613665565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a90578082015181840152602081019050610a75565b50505050905090810190601f168015610abd5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015610adb57600080fd5b50610b0860048036036020811015610af257600080fd5b81019080803590602001909291905050506137ad565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b5657600080fd5b50610b5f6137ea565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b9f578082015181840152602081019050610b84565b50505050905090810190601f168015610bcc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610be657600080fd5b50610c9d60048036036020811015610bfd57","600080fd5b8101908080359060200190640100000000811115610c1a57600080fd5b820183602082011115610c2c57600080fd5b80359060200191846020830284011164010000000083111715610c4e57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613888565b005b348015610cab57600080fd5b50610d0260048036036060811015610cc257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613a23565b005b348015610d1057600080fd5b50610d19613dea565b6040518082815260200191505060405180910390f35b348015610d3b57600080fd5b50610d6860048036036020811015610d5257600080fd5b8101908080359060200190929190505050613e95565b604051808381526020018281526020019250505060405180910390f35b348015610d9157600080fd5b50610dbe60048036036020811015610da857600080fd5b8101908080359060200190929190505050613f59565b005b348015610dcc57600080fd5b50610dd5614303565b005b348015610de357600080fd5b50610e2660048036036020811015610dfa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614468565b005b610e30613479565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ed5576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611016600780548060200260200160405190810160405280929190818152602001828054801561100c57602002820191906000526020600020905b815481526020019060010190808311610ff8575b5050505050613888565b6000611020614530565b73ffffffffffffffffffffffffffffffffffffffff16631d14f131888a898989896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001831515151581526020018281038252868682818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b15801561113657600080fd5b505af115801561114a573d6000803e3d6000fd5b505050506040513d602081101561116057600080fd5b81019080805190602001909291905050509050808473ffffffffffffffffffffffffffffffffffffffff167fb27e68a4b7a253fb0e7807c6a935733f64eb5f6b34ec0c84a471f18895d39dea60405160405180910390a38373ffffffffffffffffffffffffffffffffffffffff167f146d5e1d4c4ac5150dd1e30a2053cc4e382a3d6686a4fa234ecab9de097c3ab2828a600060016040518085815260200184815260200183815260200182815260200194505050505060405180910390a261122761453f565b73ffffffffffffffffffffffffffffffffffffffff1663bcc23e0f85836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156112c957600080fd5b505af11580156112dd573d6000803e3d6000fd5b50505050809150509695505050505050565b6060600480548060200260200160405190810160405280929190818152602001828054801561133d57602002820191906000526020600020905b815481526020019060010190808311611329575b5050505050905090565b6000611351614530565b73ffffffffffffffffffffffffffffffffffffffff1663250b8af6836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156113bd57600080fd5b505afa1580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b81019080805190602001909291905050509050919050565b6000611409614530565b73ffffffffffffffffffffffffffffffffffffffff16632dda56f58585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b1580156114d557600080fd5b505afa1580156114e9573d6000803e3d6000fd5b505050506040513d60208110156114ff57600080fd5b810190808051906020019092919050505090509392505050565b6115427f4e6f646500000000000000000000000000000000000000000000000000000000613287565b61154b8161456f565b6000611555614530565b73ffffffffffffffffffffffffffffffffffffffff1663d8cba2fd836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b1580156115c057600080fd5b505afa1580156115d4573d6000803e3d6000fd5b505050506040513d60408110156115ea57600080fd5b810190808051906020019092919080519060200190929190505050509050600080611613614530565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561167f57600080fd5b505afa158015611693573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a08110156116bd57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080516401000000008111156116fd57600080fd5b8281019050602081018481111561171357600080fd5b815185600182028301116401000000008211171561173057600080fd5b5050929190505050505092509250508260021415156117b7576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f543a7461736b20737461747573206973206e6f7420416363657074656400000081525060200191505060405180910390fd5b6117bf614530565b73ffffffffffffffffffffffffffffffffffffffff1663f76d3f52856006426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561183e57600080fd5b505af1158015611852573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167f146d5e1d4c4ac5150dd1e30a2053cc4e382a3d6686a4fa234ecab9de097c3ab285848660066040518085815260200184815260200183815260200182815260200194505050505060405180910390a250505050565b6118ec7f436861696e53746f726167650000000000000000000000000000000000000000613287565b6118f58261456f565b60006118ff614530565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a08110156119a957600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080516401000000008111156119e957600080fd5b828101905060208101848111156119ff57600080fd5b8151856001820283011164010000000082111715611a1c57600080fd5b50509291905050505050925050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515611acd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f543a6e6f64652068617665206e6f2074686973207461736b000000000000000081525060200191505060405180910390fd5b60648211151515611b46576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f543a70657263656e74616765206d757374203c3d31303000000000000000000081525060200191505060405180910390fd5b6000611b50614530565b73ffffffffffffffffffffffffffffffffffffffff1663d8cba2fd856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015611bbb57600080fd5b505afa158015611bcf573d6000803e3d6000fd5b505050506040513d6040811015611be557600080fd5b81019080805190602001909291908051906020","","","01807f543a6e6f64652068617665206e6f2074686973207461736b000000000000000081525060200191505060405180910390fd5b6000613c37614530565b73ffffffffffffffffffffffffffffffffffffffff1663d8cba2fd856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015613ca257600080fd5b505afa158015613cb6573d6000803e3d6000fd5b505050506040513d6040811015613ccc57600080fd5b810190808051906020019092919080519060200190929190505050509050806002141515613d45576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180614a646025913960400191505060405180910390fd5b613d4d614530565b73ffffffffffffffffffffffffffffffffffffffff1663a94427cc8542866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015613dcb57600080fd5b505af1158015613ddf573d6000803e3d6000fd5b505050505050505050565b6000613df4614530565b73ffffffffffffffffffffffffffffffffffffffff1663d6f0374d6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613e5557600080fd5b505afa158015613e69573d6000803e3d6000fd5b505050506040513d6020811015613e7f57600080fd5b8101908080519060200190929190505050905090565b600080613ea0614530565b73ffffffffffffffffffffffffffffffffffffffff1663d8cba2fd846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b158015613f0b57600080fd5b505afa158015613f1f573d6000803e3d6000fd5b505050506040513d6040811015613f3557600080fd5b81019080805190602001909291908051906020019092919050505091509150915091565b613f827f4e6f646500000000000000000000000000000000000000000000000000000000613287565b613f8b8161456f565b600080613f96614530565b73ffffffffffffffffffffffffffffffffffffffff1663c05a72b2846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561400257600080fd5b505afa158015614016573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060a081101561404057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805164010000000081111561408057600080fd5b8281019050602081018481111561409657600080fd5b81518560018202830111640100000000821117156140b357600080fd5b50509291905050505050925092505060006140cc614530565b73ffffffffffffffffffffffffffffffffffffffff1663d8cba2fd856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050604080518083038186803b15801561413757600080fd5b505afa15801561414b573d6000803e3d6000fd5b505050506040513d604081101561416157600080fd5b8101908080519060200190929190805190602001909291905050505090508060011415156141f7576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f543a7461736b20737461747573206973206e6f7420437265617465640000000081525060200191505060405180910390fd5b6141ff614530565b73ffffffffffffffffffffffffffffffffffffffff1663f76d3f52856003426040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561427e57600080fd5b505af1158015614292573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f146d5e1d4c4ac5150dd1e30a2053cc4e382a3d6686a4fa234ecab9de097c3ab285858460056040518085815260200184815260200183815260200182815260200194505050505060405180910390a250505050565b61430b613479565b60008090505b60048054905081101561446557600060048281548110151561432f57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156143cb57600080fd5b505afa1580156143df573d6000803e3d6000fd5b505050506040513d60208110156143f557600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614311565b50565b614470613479565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061453a611e7b565b905090565b600061456a7f4e6f646500000000000000000000000000000000000000000000000000000000614836565b905090565b614577614530565b73ffffffffffffffffffffffffffffffffffffffff166388888539826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156145e357600080fd5b505afa1580156145f7573d6000803e3d6000fd5b505050506040513d602081101561460d57600080fd5b81019080805190602001909291905050501515614692576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f543a7461736b206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b50565b606082826040516020018083805190602001908083835b6020831015156146d157805182526020820191506020810190506020830392506146ac565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310151561472457805182526020820191506020810190506020830392506146ff565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b60208310151561479e5780518252602082019150602081019050602083039250614779565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b6020831015156147f157805182526020820191506020810190506020830392506147cc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561497f6040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561496b5780601f106149405761010080835404028352916020019161496b565b820191906000526020600020905b81548152906001019060200180831161494e57829003601f168201915b50505050506147619092919063ffffffff16565b901515614a27576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156149ec5780820151818401526020810190506149d1565b50505050905090810190601f168015614a195780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905091905056fe543a77726f6e67207461736b207374617475732c6d757374205461736b4163636570746564a165627a7a72305820b2038aad45f1052688e822b209670511c4b11da15f17781ad6199f18fd943bf80029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getStatusAndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"action\",\"type\":\"uint256\"},{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"noCallback\",\"type\":\"bool\"}],\"name\":\"issueTask\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"isNodeAddFileCidDuplicated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"acceptTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"acceptTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"reportAddFileProgressBySize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"reportAddFileProgressByPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"taskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"getAddFileTaskProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"failTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"isOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nodeAddress\",\"type\":\"address\"},{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"finishTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"TaskIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"TaskStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETSTATUSANDTIME = "getStatusAndTime";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETTASK = "getTask";

    public static final String FUNC_ISSUETASK = "issueTask";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_ISNODEADDFILECIDDUPLICATED = "isNodeAddFileCidDuplicated";

    public static final String FUNC_ACCEPTTASKTIMEOUT = "acceptTaskTimeout";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_ACCEPTTASK = "acceptTask";

    public static final String FUNC_REPORTADDFILEPROGRESSBYSIZE = "reportAddFileProgressBySize";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE = "reportAddFileProgressByPercentage";

    public static final String FUNC_TASKTIMEOUT = "taskTimeout";

    public static final String FUNC_GETADDFILETASKPROGRESS = "getAddFileTaskProgress";

    public static final String FUNC_FAILTASK = "failTask";

    public static final String FUNC_GETCURRENTTID = "getCurrentTid";

    public static final String FUNC_ISOVER = "isOver";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_FINISHTASK = "finishTask";

    public static final Event TASKISSUED_EVENT = new Event("TaskIssued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TASKSTATUSCHANGED_EVENT = new Event("TaskStatusChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Task(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getStatusAndTime(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETSTATUSANDTIME, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, BigInteger, String, Boolean, String> getTask(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, BigInteger, String, Boolean, String>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (Boolean) results.get(3).getValue(), 
                (String) results.get(4).getValue());
    }

    public TransactionReceipt issueTask(BigInteger action, String userAddress, String cid, String nodeAddress, Boolean noCallback) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] issueTask(BigInteger action, String userAddress, String cid, String nodeAddress, Boolean noCallback, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueTask(BigInteger action, String userAddress, String cid, String nodeAddress, Boolean noCallback) {
        final Function function = new Function(
                FUNC_ISSUETASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(action), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(noCallback)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, String, String, String, Boolean> getIssueTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUETASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, String, String, String, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (Boolean) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getIssueTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUETASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean isNodeAddFileCidDuplicated(String nodeAddress, String cid) throws ContractException {
        final Function function = new Function(FUNC_ISNODEADDFILECIDDUPLICATED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt acceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] acceptTaskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAcceptTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAcceptTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTTASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt acceptTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] acceptTask(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAcceptTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getAcceptTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt reportAddFileProgressBySize(String nodeAddress, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportAddFileProgressBySize(String nodeAddress, BigInteger tid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportAddFileProgressBySize(String nodeAddress, BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getReportAddFileProgressBySizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt reportAddFileProgressByPercentage(String nodeAddress, BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reportAddFileProgressByPercentage(String nodeAddress, BigInteger tid, BigInteger percentage, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReportAddFileProgressByPercentage(String nodeAddress, BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> getReportAddFileProgressByPercentageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt taskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] taskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> getAddFileTaskProgress(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKPROGRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue());
    }

    public TransactionReceipt failTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] failTask(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFailTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFailTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FAILTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getCurrentTid() throws ContractException {
        final Function function = new Function(FUNC_GETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isOver(BigInteger tid) throws ContractException {
        final Function function = new Function(FUNC_ISOVER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt finishTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] finishTask(String nodeAddress, BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinishTask(String nodeAddress, BigInteger tid) {
        final Function function = new Function(
                FUNC_FINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(nodeAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getFinishTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINISHTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List<TaskIssuedEventResponse> getTaskIssuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKISSUED_EVENT, transactionReceipt);
        ArrayList<TaskIssuedEventResponse> responses = new ArrayList<TaskIssuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskIssuedEventResponse typedResponse = new TaskIssuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nodeAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTaskIssuedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKISSUED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTaskIssuedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKISSUED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TaskStatusChangedEventResponse> getTaskStatusChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TASKSTATUSCHANGED_EVENT, transactionReceipt);
        ArrayList<TaskStatusChangedEventResponse> responses = new ArrayList<TaskStatusChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TaskStatusChangedEventResponse typedResponse = new TaskStatusChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nodeAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.from = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.to = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTaskStatusChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKSTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTaskStatusChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TASKSTATUSCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Task load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Task(contractAddress, client, credential);
    }

    public static Task deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(Task.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class TaskIssuedEventResponse {
        public TransactionReceipt.Logs log;

        public String nodeAddress;

        public BigInteger tid;
    }

    public static class TaskStatusChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String nodeAddress;

        public BigInteger tid;

        public BigInteger action;

        public BigInteger from;

        public BigInteger to;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
