package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Setting extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612e8157600080fd5b505afa158015612e95573d6000803e3d6000fd5b505050506040513d6020811015612eab57600080fd5b8101908080519060200190929190505050905090565b6000612ecb613050565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f5265706c696361000000000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612f5757600080fd5b505afa158015612f6b573d6000803e3d6000fd5b505050506040513d6020811015612f8157600080fd5b8101908080519060200190929190505050905090565b612f9f613050565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d617841646446696c654661696c6564436f756e740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561303557600080fd5b505af1158015613049573d6000803e3d6000fd5b5050505050565b600061305a611284565b905090565b606082826040516020018083805190602001908083835b60208310151561309b5780518252602082019150602081019050602083039250613076565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156130ee57805182526020820191506020810190506020830392506130c9565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290509291505056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a165627a7a723058205045a6a90aec3817543b33f77c7d629afd9cf7345f79530de081b12d47da04fd0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ce7f53657474696e6700000000000000000000000000000000000000000000000000620000d4640100000000026401000000009004565b620001be565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200010b9291906200010f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015257805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018257825182559160200191906001019062000165565b5b50905062000192919062000196565b5090565b620001bb91905b80821115620001b75760008160009055506001016200019d565b5090565b90565b61317780620001ce6000396000f3fe60806040526004361061020a576000357c010000000000000000000000000000000000000000000000000000000090048063703848bc1161012a578063b381ac01116100bd578063dbe449be1161008c578063dbe449be146108ea578063dfde085014610915578063f0d3065a14610940578063facc63961461097b578063fc82d8fa146109cc5761020a565b8063b381ac01146107c9578063c229316914610804578063cfd994e214610894578063d2e8cfe8146108bf5761020a565b806391726a99116100f957806391726a99146106c757806398f6e5af146107185780639c89509b14610753578063ae13ff811461078e5761020a565b8063703848bc146105eb57806372e1659514610626578063742f7db2146106515780638d54e00b1461068c5761020a565b80632f43cc01116101a2578063688ccaba11610171578063688ccaba146104d757806368a0a4191461052e5780636cac8932146105695780636e1f75ad146105945761020a565b80632f43cc01146103c9578063326b875e146103f45780633ae087cf146104455780635089e2c8146104805761020a565b806323816839116101de578063238168391461030d57806329bbf638146103385780632b703400146103635780632f043df01461038e5761020a565b8062c6a4051461020f57806305282c701461023a5780630ec991c21461028b5780631e0c7ae1146102e2575b600080fd5b34801561021b57600080fd5b50610224610a07565b6040518082815260200191505060405180910390f35b34801561024657600080fd5b506102896004803603602081101561025d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610add565b005b34801561029757600080fd5b506102a0610f35565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ee57600080fd5b506102f7610f5b565b6040518082815260200191505060405180910390f35b34801561031957600080fd5b50610322611031565b6040518082815260200191505060405180910390f35b34801561034457600080fd5b5061034d611107565b6040518082815260200191505060405180910390f35b34801561036f57600080fd5b506103786111dd565b6040518082815260200191505060405180910390f35b34801561039a57600080fd5b506103c7600480360360208110156103b157600080fd5b81019080803590602001909291905050506112b3565b005b3480156103d557600080fd5b506103de61136c565b6040518082815260200191505060405180910390f35b34801561040057600080fd5b506104436004803603602081101561041757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611442565b005b34801561045157600080fd5b5061047e6004803603602081101561046857600080fd5b8101908080359060200190929190505050611527565b005b34801561048c57600080fd5b506104956115e0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e357600080fd5b506104ec611606565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053a57600080fd5b506105676004803603602081101561055157600080fd5b81019080803590602001909291905050506116dc565b005b34801561057557600080fd5b5061057e611795565b6040518082815260200191505060405180910390f35b3480156105a057600080fd5b506105a961186b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f757600080fd5b506106246004803603602081101561060e57600080fd5b8101908080359060200190929190505050611a72565b005b34801561063257600080fd5b5061063b611b2b565b6040518082815260200191505060405180910390f35b34801561065d57600080fd5b5061068a6004803603602081101561067457600080fd5b8101908080359060200190929190505050611c01565b005b34801561069857600080fd5b506106c5600480360360208110156106af57600080fd5b8101908080359060200190929190505050611cba565b005b3480156106d357600080fd5b50610716600480360360208110156106ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d73565b005b34801561072457600080fd5b506107516004803603602081101561073b57600080fd5b81019080803590602001909291905050506121af565b005b34801561075f57600080fd5b5061078c6004803603602081101561077657600080fd5b8101908080359060200190929190505050612268565b005b34801561079a57600080fd5b506107c7600480360360208110156107b157600080fd5b81019080803590602001909291905050506124fd565b005b3480156107d557600080fd5b50610802600480360360208110156107ec57600080fd5b81019080803590602001909291905050506125b6565b005b34801561081057600080fd5b5061081961266f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085957808201518184015260208101905061083e565b50505050905090810190601f1680156108865780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108a057600080fd5b506108a961270d565b6040518082815260200191505060405180910390f35b3480156108cb57600080fd5b506108d46127e3565b6040518082815260200191505060405180910390f35b3480156108f657600080fd5b506108ff6128b9565b6040518082815260200191505060405180910390f35b34801561092157600080fd5b5061092a61298f565b6040518082815260200191505060405180910390f35b34801561094c57600080fd5b506109796004803603602081101561096357600080fd5b8101908080359060200190929190505050612a65565b005b34801561098757600080fd5b506109ca6004803603602081101561099e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b1e565b005b3480156109d857600080fd5b50610a05600480360360208110156109ef57600080fd5b8101908080359060200190929190505050612dba565b005b6000610a1161304f565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784e6f64654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610a9d57600080fd5b505afa158015610ab1573d6000803e3d6000fd5b505050506040513d6020811015610ac757600080fd5b8101908080519060200190929190505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c106040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bfd5780601f10610bd257610100808354040283529160200191610bfd565b820191906000526020600020905b815481529060010190602001808311610be057829003601f168201915b505050505061305e90919063ffffffff16565b901515610cb8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c7d578082015181840152602081019050610c62565b50505050905090810190601f168015610caa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dcc6040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610db95780601f10610d8e57610100808354040283529160200191610db9565b820191906000526020600020905b815481529060010190602001808311610d9c57829003601f168201915b505050505061305e90919063ffffffff16565b901515610e74576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610e39578082015181840152602081","","0182805460018160011615610100020316600290048015611e935780601f10611e6857610100808354040283529160200191611e93565b820191906000526020600020905b815481529060010190602001808311611e7657829003601f168201915b505050505061305e90919063ffffffff16565b901515611f4e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f13578082015181840152602081019050611ef8565b50505050905090810190601f168015611f405780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120466060604051908101604052806021815260200161312b6021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120335780601f1061200857610100808354040283529160200191612033565b820191906000526020600020905b81548152906001019060200180831161201657829003601f168201915b505050505061305e90919063ffffffff16565b9015156120ee576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120b3578082015181840152602081019050612098565b50505050905090810190601f1680156120e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6121b761304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d617841646446696c654661696c6564436f756e740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561224d57600080fd5b505af1158015612261573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461239b6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123885780601f1061235d57610100808354040283529160200191612388565b820191906000526020600020905b81548152906001019060200180831161236b57829003601f168201915b505050505061305e90919063ffffffff16565b901515612443576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124085780820151818401526020810190506123ed565b50505050905090810190601f1680156124355780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061244c61304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f5265706c69636100000000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156124e257600080fd5b505af11580156124f6573d6000803e3d6000fd5b5050505050565b61250561304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784e6f64654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561259b57600080fd5b505af11580156125af573d6000803e3d6000fd5b5050505050565b6125be61304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f41646446696c6550726f677265737354696d656f757400000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561265457600080fd5b505af1158015612668573d6000803e3d6000fd5b5050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127055780601f106126da57610100808354040283529160200191612705565b820191906000526020600020905b8154815290600101906020018083116126e857829003601f168201915b505050505081565b600061271761304f565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784d6f6e69746f724578744c656e677468000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156127a357600080fd5b505afa1580156127b7573d6000803e3d6000fd5b505050506040513d60208110156127cd57600080fd5b8101908080519060200190929190505050905090565b60006127ed61304f565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d6178557365724578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561287957600080fd5b505afa15801561288d573d6000803e3d6000fd5b505050506040513d60208110156128a357600080fd5b8101908080519060200190929190505050905090565b60006128c361304f565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d617841646446696c654661696c6564436f756e7400000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561294f57600080fd5b505afa158015612963573d6000803e3d6000fd5b505050506040513d602081101561297957600080fd5b8101908080519060200190929190505050905090565b600061299961304f565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f496e6974537061636500000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612a2557600080fd5b505afa158015612a39573d6000803e3d6000fd5b505050506040513d6020811015612a4f57600080fd5b8101908080519060200190929190505050905090565b612a6d61304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784d6f6e69746f724578744c656e67746800000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c516040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c3e5780601f10612c1357610100808354040283529160200191612c3e565b820191906000526020600020905b815481529060010190602001808311612c2157829003601f168201915b505050505061305e90919063ffffffff16565b901515612cf9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612cbe578082015181840152602081019050612ca3565b50505050905090810190601f168015612ceb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612eed6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420","746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612eda5780601f10612eaf57610100808354040283529160200191612eda565b820191906000526020600020905b815481529060010190602001808311612ebd57829003601f168201915b505050505061305e90919063ffffffff16565b901515612f95576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f5a578082015181840152602081019050612f3f565b50505050905090810190601f168015612f875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50612f9e61304f565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f496e697453706163650000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561303457600080fd5b505af1158015613048573d6000803e3d6000fd5b5050505050565b600061305961186b565b905090565b606082826040516020018083805190602001908083835b60208310151561309a5780518252602082019150602081019050602083039250613075565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156130ed57805182526020820191506020810190506020830392506130c8565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290509291505056fe3a206e6577206d616e6167657220697320746865207a65726f2061646472657373a165627a7a72305820722678a5dc8df59904c69daf77ecbe087bed3c9667a04815b712407424a95f3b0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getMaxUserExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxMonitorExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"setInitSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxAddFileFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxNodeExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxFileExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDeleteFileTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaskAcceptTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddFileTaskTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNodeExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxCidLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"replica\",\"type\":\"uint256\"}],\"name\":\"setReplica\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddFileProgressTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskAcceptTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxCidLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxUserExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAddFileProgressTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxMonitorExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxFileExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeleteFileTaskTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReplica\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxAddFileFailedCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"field\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETMAXUSEREXTLENGTH = "getMaxUserExtLength";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETMAXMONITOREXTLENGTH = "setMaxMonitorExtLength";

    public static final String FUNC_SETINITSPACE = "setInitSpace";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_GETMAXADDFILEFAILEDCOUNT = "getMaxAddFileFailedCount";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_SETMAXNODEEXTLENGTH = "setMaxNodeExtLength";

    public static final String FUNC_GETMAXFILEEXTLENGTH = "getMaxFileExtLength";

    public static final String FUNC_SETDELETEFILETASKTIMEOUT = "setDeleteFileTaskTimeout";

    public static final String FUNC_GETINITSPACE = "getInitSpace";

    public static final String FUNC_GETTASKACCEPTTIMEOUT = "getTaskAcceptTimeout";

    public static final String FUNC_GETADDFILETASKTIMEOUT = "getAddFileTaskTimeout";

    public static final String FUNC_GETADMIN = "getAdmin";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_GETMAXNODEEXTLENGTH = "getMaxNodeExtLength";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETMAXCIDLENGTH = "setMaxCidLength";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETREPLICA = "setReplica";

    public static final String FUNC_GETADDFILEPROGRESSTIMEOUT = "getAddFileProgressTimeout";

    public static final String FUNC_SETTASKACCEPTTIMEOUT = "setTaskAcceptTimeout";

    public static final String FUNC_GETMAXCIDLENGTH = "getMaxCidLength";

    public static final String FUNC_SETMAXUSEREXTLENGTH = "setMaxUserExtLength";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_SETADDFILEPROGRESSTIMEOUT = "setAddFileProgressTimeout";

    public static final String FUNC_GETMAXMONITOREXTLENGTH = "getMaxMonitorExtLength";

    public static final String FUNC_SETADDFILETASKTIMEOUT = "setAddFileTaskTimeout";

    public static final String FUNC_SETMAXFILEEXTLENGTH = "setMaxFileExtLength";

    public static final String FUNC_GETDELETEFILETASKTIMEOUT = "getDeleteFileTaskTimeout";

    public static final String FUNC_GETREPLICA = "getReplica";

    public static final String FUNC_SETMAXADDFILEFAILEDCOUNT = "setMaxAddFileFailedCount";

    public static final Event SETTINGCHANGED_EVENT = new Event("SettingChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Setting(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getMaxUserExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setMaxMonitorExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxMonitorExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxMonitorExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxMonitorExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setInitSpace(BigInteger space, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetInitSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getMaxAddFileFailedCount() throws ContractException {
        final Function function = new Function(FUNC_GETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxNodeExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxNodeExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxFileExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setDeleteFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDeleteFileTaskTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetDeleteFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetDeleteFileTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getInitSpace() throws ContractException {
        final Function function = new Function(FUNC_GETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getTaskAcceptTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAddFileTaskTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getAdmin() throws ContractException {
        final Function function = new Function(FUNC_GETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setAdmin(String addr) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAdmin(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAdmin(String addr) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getMaxNodeExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxCidLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxCidLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setReplica(BigInteger replica, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetReplicaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getAddFileProgressTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setTaskAcceptTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskAcceptTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskAcceptTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetTaskAcceptTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxCidLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxUserExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxUserExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setAddFileProgressTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileProgressTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileProgressTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetAddFileProgressTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxMonitorExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setAddFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetAddFileTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxFileExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxFileExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getDeleteFileTaskTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReplica() throws ContractException {
        final Function function = new Function(FUNC_GETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxAddFileFailedCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxAddFileFailedCount(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxAddFileFailedCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxAddFileFailedCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<SettingChangedEventResponse> getSettingChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTINGCHANGED_EVENT, transactionReceipt);
        ArrayList<SettingChangedEventResponse> responses = new ArrayList<SettingChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettingChangedEventResponse typedResponse = new SettingChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.field = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.previousValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSettingChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSettingChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Setting load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Setting(contractAddress, client, credential);
    }

    public static Setting deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Setting.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class SettingChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] name;

        public byte[] field;

        public BigInteger previousValue;

        public BigInteger newValue;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
