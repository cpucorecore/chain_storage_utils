package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Setting extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ce7f53657474696e6700000000000000000000000000000000000000000000000000620000d4640100000000026401000000009004565b620001be565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200010b9291906200010f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015257805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018257825182559160200191906001019062000165565b5b50905062000192919062000196565b5090565b620001bb91905b80821115620001b75760008160009055506001016200019d565b5090565b90565b612c3e80620001ce6000396000f3fe608060405260043610610221576000357c01000000000000000000000000000000000000000000000000000000009004806375d0c0dc11610135578063cb361727116100bd578063ec8b98441161008c578063ec8b984414610969578063f05cd5ab146109a4578063f2553dfa146109df578063f97060e714610a0a578063fdf3c06014610a3557610221565b8063cb36172714610877578063d0ebdbe7146108b2578063d902509914610903578063de249e711461093e57610221565b806391e6a9cb1161010457806391e6a9cb14610770578063aa24418a146107ab578063b11f2397146107d6578063b1ad09f714610811578063b7fd58041461083c57610221565b806375d0c0dc146105fd5780638da5cb5b1461068d5780638e970f20146106e45780639137c1a71461071f57610221565b80634c6b0a92116101b8578063613611811161018757806361361181146104d457806364038504146104ff5780636e9960c31461052a578063704b6c021461058157806371e34662146105d257610221565b80634c6b0a92146104085780634fdbb0021461044357806352b58a431461046e5780635406cbe9146104a957610221565b80632f9fec99116101f45780632f9fec99146102f45780633408f73a1461032f57806335a5c00314610386578063481c6a75146103b157610221565b80630c360f0a1461022657806313af4035146102515780631c9fd120146102a25780631daff412146102b9575b600080fd5b34801561023257600080fd5b5061023b610a70565b6040518082815260200191505060405180910390f35b34801561025d57600080fd5b506102a06004803603602081101561027457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b46565b005b3480156102ae57600080fd5b506102b7610cb3565b005b3480156102c557600080fd5b506102f2600480360360208110156102dc57600080fd5b8101908080359060200190929190505050610d7a565b005b34801561030057600080fd5b5061032d6004803603602081101561031757600080fd5b8101908080359060200190929190505050610e3b565b005b34801561033b57600080fd5b50610344610efc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039257600080fd5b5061039b611103565b6040518082815260200191505060405180910390f35b3480156103bd57600080fd5b506103c66111d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041457600080fd5b506104416004803603602081101561042b57600080fd5b81019080803590602001909291905050506111ff565b005b34801561044f57600080fd5b506104586112c0565b6040518082815260200191505060405180910390f35b34801561047a57600080fd5b506104a76004803603602081101561049157600080fd5b8101908080359060200190929190505050611396565b005b3480156104b557600080fd5b506104be611457565b6040518082815260200191505060405180910390f35b3480156104e057600080fd5b506104e961152d565b6040518082815260200191505060405180910390f35b34801561050b57600080fd5b50610514611603565b6040518082815260200191505060405180910390f35b34801561053657600080fd5b5061053f6116d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058d57600080fd5b506105d0600480360360208110156105a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117af565b005b3480156105de57600080fd5b506105e7611a5b565b6040518082815260200191505060405180910390f35b34801561060957600080fd5b50610612611b31565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610652578082015181840152602081019050610637565b50505050905090810190601f16801561067f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561069957600080fd5b506106a2611bcf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106f057600080fd5b5061071d6004803603602081101561070757600080fd5b8101908080359060200190929190505050611bf5565b005b34801561072b57600080fd5b5061076e6004803603602081101561074257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cb6565b005b34801561077c57600080fd5b506107a96004803603602081101561079357600080fd5b8101908080359060200190929190505050611d7e565b005b3480156107b757600080fd5b506107c0611e3f565b6040518082815260200191505060405180910390f35b3480156107e257600080fd5b5061080f600480360360208110156107f957600080fd5b8101908080359060200190929190505050611f15565b005b34801561081d57600080fd5b50610826611fd6565b6040518082815260200191505060405180910390f35b34801561084857600080fd5b506108756004803603602081101561085f57600080fd5b81019080803590602001909291905050506120ac565b005b34801561088357600080fd5b506108b06004803603602081101561089a57600080fd5b810190808035906020019092919050505061216d565b005b3480156108be57600080fd5b50610901600480360360208110156108d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061234e565b005b34801561090f57600080fd5b5061093c6004803603602081101561092657600080fd5b81019080803590602001909291905050506124bb565b005b34801561094a57600080fd5b5061095361257c565b6040518082815260200191505060405180910390f35b34801561097557600080fd5b506109a26004803603602081101561098c57600080fd5b8101908080359060200190929190505050612652565b005b3480156109b057600080fd5b506109dd600480360360208110156109c757600080fd5b8101908080359060200190929190505050612713565b005b3480156109eb57600080fd5b506109f46127d4565b6040518082815260200191505060405180910390f35b348015610a1657600080fd5b50610a1f6128aa565b6040518082815260200191505060405180910390f35b348015610a4157600080fd5b50610a6e60048036036020811015610a5857600080fd5b8101908080359060200190929190505050612980565b005b6000610a7a612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d6178557365724578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b0657600080fd5b505afa158015610b1a573d6000803e3d6000fd5b505050506040513d6020811015610b3057600080fd5b8101908080519060200190929190505050905090565b610b4e610cb3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610bf3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b610d82610cb3565b610d8a612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784d6f6e69746f724578744c656e67746800000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610e2057600080fd5b505af1158015610e34573d6000803e3d60","00fd5b5050505050565b610e43610cb3565b610e4b612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f496e697453706163650000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110326040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561101f5780601f10610ff45761010080835404028352916020019161101f565b820191906000526020600020905b81548152906001019060200180831161100257829003601f168201915b5050505050612a5090919063ffffffff16565b9015156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561109f578082015181840152602081019050611084565b50505050905090810190601f1680156110cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061110d612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d617841646446696c654661696c6564436f756e7400000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561119957600080fd5b505afa1580156111ad573d6000803e3d6000fd5b505050506040513d60208110156111c357600080fd5b8101908080519060200190929190505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611207610cb3565b61120f612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784e6f64654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156112a557600080fd5b505af11580156112b9573d6000803e3d6000fd5b5050505050565b60006112ca612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d617846696c654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561135657600080fd5b505afa15801561136a573d6000803e3d6000fd5b505050506040513d602081101561138057600080fd5b8101908080519060200190929190505050905090565b61139e610cb3565b6113a6612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f44656c65746546696c655461736b54696d656f75740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561143c57600080fd5b505af1158015611450573d6000803e3d6000fd5b5050505050565b6000611461612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f496e6974537061636500000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b8101908080519060200190929190505050905090565b6000611537612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f5461736b41636365707454696d656f75740000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156115c357600080fd5b505afa1580156115d7573d6000803e3d6000fd5b505050506040513d60208110156115ed57600080fd5b8101908080519060200190929190505050905090565b600061160d612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f41646446696c655461736b54696d656f757400000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561169957600080fd5b505afa1580156116ad573d6000803e3d6000fd5b505050506040513d60208110156116c357600080fd5b8101908080519060200190929190505050905090565b60006116e3612a41565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7217f41646d696e4163636f756e7400000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561176f57600080fd5b505afa158015611783573d6000803e3d6000fd5b505050506040513d602081101561179957600080fd5b8101908080519060200190929190505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611837576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612bf26021913960400191505060405180910390fd5b60006118416116d9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806118a957508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806119015750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611975576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f533a6e6f2061757468000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61197d612a41565b73ffffffffffffffffffffffffffffffffffffffff1663ca446dd97f41646d696e4163636f756e740000000000000000000000000000000000000000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015611a3f57600080fd5b505af1158015611a53573d6000803e3d6000fd5b505050505050565b6000611a65612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784e6f64654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611af157600080fd5b505afa158015611b05573d6000803e3d6000fd5b505050506040513d6020811015611b1b57600080fd5b8101908080519060200190929190505050905090565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bc75780601f10611b9c57610100808354040283529160200191611bc7565b820191906000526020600020905b815481529060010190602001808311611baa57829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611bfd610cb3565b611c05612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d61784369644c656e6774680000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611c9b57600080fd5b505af1158015611caf573d6000803e3d6000fd5b5050505050565b611cbe610cb3565b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d86610cb3565b611d8e612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f5265706c69636100000000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611e2457600080fd5b505af1158015611e38573d6000","803e3d6000fd5b5050505050565b6000611e49612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f41646446696c6550726f677265737354696d656f7574000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d6020811015611eff57600080fd5b8101908080519060200190929190505050905090565b611f1d610cb3565b611f25612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f5461736b41636365707454696d656f7574000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611fbb57600080fd5b505af1158015611fcf573d6000803e3d6000fd5b5050505050565b6000611fe0612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784369644c656e67746800000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561206c57600080fd5b505afa158015612080573d6000803e3d6000fd5b505050506040513d602081101561209657600080fd5b8101908080519060200190929190505050905090565b6120b4610cb3565b6120bc612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d6178557365724578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561215257600080fd5b505af1158015612166573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122a26040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561228e5780601f106122635761010080835404028352916020019161228e565b820191906000526020600020905b81548152906001019060200180831161227157829003601f168201915b5050505050612b1c9092919063ffffffff16565b90151561234a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561230f5780820151818401526020810190506122f4565b50505050905090810190601f16801561233c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b612356610cb3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156123fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6124c3610cb3565b6124cb612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f41646446696c6550726f677265737354696d656f757400000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b5050505050565b6000612586612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f4d61784d6f6e69746f724578744c656e677468000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561261257600080fd5b505afa158015612626573d6000803e3d6000fd5b505050506040513d602081101561263c57600080fd5b8101908080519060200190929190505050905090565b61265a610cb3565b612662612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f41646446696c655461736b54696d656f75740000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156126f857600080fd5b505af115801561270c573d6000803e3d6000fd5b5050505050565b61271b610cb3565b612723612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d617846696c654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156127b957600080fd5b505af11580156127cd573d6000803e3d6000fd5b5050505050565b60006127de612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f44656c65746546696c655461736b54696d656f757400000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561286a57600080fd5b505afa15801561287e573d6000803e3d6000fd5b505050506040513d602081101561289457600080fd5b8101908080519060200190929190505050905090565b60006128b4612a41565b73ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57f5265706c696361000000000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561294057600080fd5b505afa158015612954573d6000803e3d6000fd5b505050506040513d602081101561296a57600080fd5b8101908080519060200190929190505050905090565b612988610cb3565b612990612a41565b73ffffffffffffffffffffffffffffffffffffffff1663e2a4853a7f4d617841646446696c654661696c6564436f756e740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612a2657600080fd5b505af1158015612a3a573d6000803e3d6000fd5b5050505050565b6000612a4b610efc565b905090565b606082826040516020018083805190602001908083835b602083101515612a8c5780518252602082019150602081019050602083039250612a67565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515612adf5780518252602082019150602081019050602083039250612aba565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b602083101515612b595780518252602082019150602081019050602083039250612b34565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612bac5780518252602082019150602081019050602083039250612b87565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200193505050506040516020818303038152906040529050939250505056fe533a63616e206e6f742073657420616464726573732830292061732061646d696ea165627a7a7230582058bbf06bcc5c25790e9a6c7d049ddcb6d81c89319c345e9a659233f79d098eac0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000ce7f53657474696e6700000000000000000000000000000000000000000000000000620000d4640100000000026401000000009004565b620001be565b8060405160200180828152602001915050604051602081830303815290604052600090805190602001906200010b9291906200010f565b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015257805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018257825182559160200191906001019062000165565b5b50905062000192919062000196565b5090565b620001bb91905b80821115620001b75760008160009055506001016200019d565b5090565b90565b612c3d80620001ce6000396000f3fe608060405260043610610220576000357c01000000000000000000000000000000000000000000000000000000009004806372e1659511610135578063b381ac01116100bd578063dbe449be1161008c578063dbe449be14610952578063dfde08501461097d578063f0d3065a146109a8578063facc6396146109e3578063fc82d8fa14610a3457610220565b8063b381ac0114610831578063c22931691461086c578063cfd994e2146108fc578063d2e8cfe81461092757610220565b806391726a991161010457806391726a991461071857806398f6e5af146107695780639c89509b146107a4578063ae13ff81146107df578063b1eb3c2e1461081a57610220565b806372e165951461063c578063742f7db2146106675780638b6ceb4f146106a25780638d54e00b146106dd57610220565b80632f43cc01116101b8578063688ccaba11610187578063688ccaba146104ed57806368a0a419146105445780636cac89321461057f5780636e1f75ad146105aa578063703848bc1461060157610220565b80632f43cc01146103df578063326b875e1461040a5780633ae087cf1461045b5780635089e2c81461049657610220565b806323816839116101f4578063238168391461032357806329bbf6381461034e5780632b703400146103795780632f043df0146103a457610220565b8062c6a4051461022557806305282c70146102505780630ec991c2146102a15780631e0c7ae1146102f8575b600080fd5b34801561023157600080fd5b5061023a610a6f565b6040518082815260200191505060405180910390f35b34801561025c57600080fd5b5061029f6004803603602081101561027357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b45565b005b3480156102ad57600080fd5b506102b6610cb2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030457600080fd5b5061030d610cd8565b6040518082815260200191505060405180910390f35b34801561032f57600080fd5b50610338610dae565b6040518082815260200191505060405180910390f35b34801561035a57600080fd5b50610363610e84565b6040518082815260200191505060405180910390f35b34801561038557600080fd5b5061038e610f5a565b6040518082815260200191505060405180910390f35b3480156103b057600080fd5b506103dd600480360360208110156103c757600080fd5b8101908080359060200190929190505050611030565b005b3480156103eb57600080fd5b506103f46110f1565b6040518082815260200191505060405180910390f35b34801561041657600080fd5b506104596004803603602081101561042d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111c7565b005b34801561046757600080fd5b506104946004803603602081101561047e57600080fd5b8101908080359060200190929190505050611473565b005b3480156104a257600080fd5b506104ab611534565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f957600080fd5b5061050261155a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055057600080fd5b5061057d6004803603602081101561056757600080fd5b8101908080359060200190929190505050611630565b005b34801561058b57600080fd5b506105946116f1565b6040518082815260200191505060405180910390f35b3480156105b657600080fd5b506105bf6117c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561060d57600080fd5b5061063a6004803603602081101561062457600080fd5b81019080803590602001909291905050506119ce565b005b34801561064857600080fd5b50610651611a8f565b6040518082815260200191505060405180910390f35b34801561067357600080fd5b506106a06004803603602081101561068a57600080fd5b8101908080359060200190929190505050611b65565b005b3480156106ae57600080fd5b506106db600480360360208110156106c557600080fd5b8101908080359060200190929190505050611c26565b005b3480156106e957600080fd5b506107166004803603602081101561070057600080fd5b8101908080359060200190929190505050611e07565b005b34801561072457600080fd5b506107676004803603602081101561073b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ec8565b005b34801561077557600080fd5b506107a26004803603602081101561078c57600080fd5b8101908080359060200190929190505050612035565b005b3480156107b057600080fd5b506107dd600480360360208110156107c757600080fd5b81019080803590602001909291905050506120f6565b005b3480156107eb57600080fd5b506108186004803603602081101561080257600080fd5b81019080803590602001909291905050506121b7565b005b34801561082657600080fd5b5061082f612278565b005b34801561083d57600080fd5b5061086a6004803603602081101561085457600080fd5b810190808035906020019092919050505061233f565b005b34801561087857600080fd5b50610881612400565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108c15780820151818401526020810190506108a6565b50505050905090810190601f1680156108ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561090857600080fd5b5061091161249e565b6040518082815260200191505060405180910390f35b34801561093357600080fd5b5061093c612574565b6040518082815260200191505060405180910390f35b34801561095e57600080fd5b5061096761264a565b6040518082815260200191505060405180910390f35b34801561098957600080fd5b50610992612720565b6040518082815260200191505060405180910390f35b3480156109b457600080fd5b506109e1600480360360208110156109cb57600080fd5b81019080803590602001909291905050506127f6565b005b3480156109ef57600080fd5b50610a3260048036036020811015610a0657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128b7565b005b348015610a4057600080fd5b50610a6d60048036036020811015610a5757600080fd5b810190808035906020019092919050505061297f565b005b6000610a79612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784e6f64654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d6020811015610b2f57600080fd5b8101908080519060200190929190505050905090565b610b4d612278565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610bf2576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ce2612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f5265706c696361000000000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610d6e57600080fd5b505afa158015610d82573d6000803e3d6000fd5b505050506040513d6020811015610d9857600080fd5b8101908080519060200190929190505050905090565b6000610db8612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f41646446696c6550726f677265737354696d656f7574000000000000000000006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506020604051","8083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d6020811015610e6e57600080fd5b8101908080519060200190929190505050905090565b6000610e8e612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d617846696c654578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d6020811015610f4457600080fd5b8101908080519060200190929190505050905090565b6000610f64612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f41646446696c655461736b54696d656f757400000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610ff057600080fd5b505afa158015611004573d6000803e3d6000fd5b505050506040513d602081101561101a57600080fd5b8101908080519060200190929190505050905090565b611038612278565b611040612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f44656c65746546696c655461736b54696d656f75740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b5050505050565b60006110fb612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f5461736b41636365707454696d656f75740000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561118757600080fd5b505afa15801561119b573d6000803e3d6000fd5b505050506040513d60208110156111b157600080fd5b8101908080519060200190929190505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561124f576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612bf16021913960400191505060405180910390fd5b600061125961155a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806112c157508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806113195750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561138d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f533a6e6f2061757468000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611395612a40565b73ffffffffffffffffffffffffffffffffffffffff166304558f0b7f41646d696e4163636f756e740000000000000000000000000000000000000000846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561145757600080fd5b505af115801561146b573d6000803e3d6000fd5b505050505050565b61147b612278565b611483612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f41646446696c655461736b54696d656f75740000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611564612a40565b73ffffffffffffffffffffffffffffffffffffffff1663c0c22a627f41646d696e4163636f756e7400000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d602081101561161a57600080fd5b8101908080519060200190929190505050905090565b611638612278565b611640612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784369644c656e6774680000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b5050505050565b60006116fb612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784369644c656e67746800000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561178757600080fd5b505afa15801561179b573d6000803e3d6000fd5b505050506040513d60208110156117b157600080fd5b8101908080519060200190929190505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156118fd6040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118ea5780601f106118bf576101008083540402835291602001916118ea565b820191906000526020600020905b8154815290600101906020018083116118cd57829003601f168201915b5050505050612a4f90919063ffffffff16565b9015156119a5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561196a57808201518184015260208101905061194f565b50505050905090810190601f1680156119975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119d6612278565b6119de612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d617846696c654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611a7457600080fd5b505af1158015611a88573d6000803e3d6000fd5b5050505050565b6000611a99612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f44656c65746546696c655461736b54696d656f757400000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611b2557600080fd5b505afa158015611b39573d6000803e3d6000fd5b505050506040513d6020811015611b4f57600080fd5b8101908080519060200190929190505050905090565b611b6d612278565b611b75612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f5461736b41636365707454696d656f7574000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d5b6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d475780601f10611d1c57610100808354040283529160200191611d47565b820191906000526020600020905b815481529060010190602001808311611d2a57829003601f168201915b5050505050612b1b9092919063ffffffff16565b901515611e03576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611dc8578082015181840152602081019050611dad565b50505050905090810190601f168015611df55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b611e0f612278565b611e17612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224","217f4d6178557365724578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015611ead57600080fd5b505af1158015611ec1573d6000803e3d6000fd5b5050505050565b611ed0612278565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f75576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61203d612278565b612045612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d617841646446696c654661696c6564436f756e740000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156120db57600080fd5b505af11580156120ef573d6000803e3d6000fd5b5050505050565b6120fe612278565b612106612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f5265706c69636100000000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561219c57600080fd5b505af11580156121b0573d6000803e3d6000fd5b5050505050565b6121bf612278565b6121c7612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784e6f64654578744c656e67746800000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561225d57600080fd5b505af1158015612271573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561233d576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b612347612278565b61234f612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f41646446696c6550726f677265737354696d656f757400000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156123e557600080fd5b505af11580156123f9573d6000803e3d6000fd5b5050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124965780601f1061246b57610100808354040283529160200191612496565b820191906000526020600020905b81548152906001019060200180831161247957829003601f168201915b505050505081565b60006124a8612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d61784d6f6e69746f724578744c656e677468000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561253457600080fd5b505afa158015612548573d6000803e3d6000fd5b505050506040513d602081101561255e57600080fd5b8101908080519060200190929190505050905090565b600061257e612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d6178557365724578744c656e677468000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d602081101561263457600080fd5b8101908080519060200190929190505050905090565b6000612654612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f4d617841646446696c654661696c6564436f756e7400000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156126e057600080fd5b505afa1580156126f4573d6000803e3d6000fd5b505050506040513d602081101561270a57600080fd5b8101908080519060200190929190505050905090565b600061272a612a40565b73ffffffffffffffffffffffffffffffffffffffff1663b80b376f7f496e6974537061636500000000000000000000000000000000000000000000006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156127b657600080fd5b505afa1580156127ca573d6000803e3d6000fd5b505050506040513d60208110156127e057600080fd5b8101908080519060200190929190505050905090565b6127fe612278565b612806612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f4d61784d6f6e69746f724578744c656e67746800000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561289c57600080fd5b505af11580156128b0573d6000803e3d6000fd5b5050505050565b6128bf612278565b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612987612278565b61298f612a40565b73ffffffffffffffffffffffffffffffffffffffff166334e224217f496e697453706163650000000000000000000000000000000000000000000000836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612a2557600080fd5b505af1158015612a39573d6000803e3d6000fd5b5050505050565b6000612a4a6117c7565b905090565b606082826040516020018083805190602001908083835b602083101515612a8b5780518252602082019150602081019050602083039250612a66565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515612ade5780518252602082019150602081019050602083039250612ab9565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60608383836040516020018084805190602001908083835b602083101515612b585780518252602082019150602081019050602083039250612b33565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515612bab5780518252602082019150602081019050602083039250612b86565b6001836020036101000a03801982511681845116808217855250505050505090500182815260200193505050506040516020818303038152906040529050939250505056fe533a63616e206e6f742073657420616464726573732830292061732061646d696ea165627a7a7230582084dba640c2b901a44b908e787b7a082cafbff1ac6e3f2453fff582bf7cff02f40029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getMaxUserExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxMonitorExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"space\",\"type\":\"uint256\"}],\"name\":\"setInitSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxAddFileFailedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxNodeExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxFileExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDeleteFileTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTaskAcceptTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddFileTaskTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxNodeExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxCidLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"replica\",\"type\":\"uint256\"}],\"name\":\"setReplica\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddFileProgressTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTaskAcceptTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxCidLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxUserExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAddFileProgressTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMaxMonitorExtLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAddFileTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setMaxFileExtLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeleteFileTaskTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReplica\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxAddFileFailedCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"field\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"previousValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SettingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETMAXUSEREXTLENGTH = "getMaxUserExtLength";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_SETMAXMONITOREXTLENGTH = "setMaxMonitorExtLength";

    public static final String FUNC_SETINITSPACE = "setInitSpace";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_GETMAXADDFILEFAILEDCOUNT = "getMaxAddFileFailedCount";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_SETMAXNODEEXTLENGTH = "setMaxNodeExtLength";

    public static final String FUNC_GETMAXFILEEXTLENGTH = "getMaxFileExtLength";

    public static final String FUNC_SETDELETEFILETASKTIMEOUT = "setDeleteFileTaskTimeout";

    public static final String FUNC_GETINITSPACE = "getInitSpace";

    public static final String FUNC_GETTASKACCEPTTIMEOUT = "getTaskAcceptTimeout";

    public static final String FUNC_GETADDFILETASKTIMEOUT = "getAddFileTaskTimeout";

    public static final String FUNC_GETADMIN = "getAdmin";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_GETMAXNODEEXTLENGTH = "getMaxNodeExtLength";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETMAXCIDLENGTH = "setMaxCidLength";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETREPLICA = "setReplica";

    public static final String FUNC_GETADDFILEPROGRESSTIMEOUT = "getAddFileProgressTimeout";

    public static final String FUNC_SETTASKACCEPTTIMEOUT = "setTaskAcceptTimeout";

    public static final String FUNC_GETMAXCIDLENGTH = "getMaxCidLength";

    public static final String FUNC_SETMAXUSEREXTLENGTH = "setMaxUserExtLength";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_SETADDFILEPROGRESSTIMEOUT = "setAddFileProgressTimeout";

    public static final String FUNC_GETMAXMONITOREXTLENGTH = "getMaxMonitorExtLength";

    public static final String FUNC_SETADDFILETASKTIMEOUT = "setAddFileTaskTimeout";

    public static final String FUNC_SETMAXFILEEXTLENGTH = "setMaxFileExtLength";

    public static final String FUNC_GETDELETEFILETASKTIMEOUT = "getDeleteFileTaskTimeout";

    public static final String FUNC_GETREPLICA = "getReplica";

    public static final String FUNC_SETMAXADDFILEFAILEDCOUNT = "setMaxAddFileFailedCount";

    public static final Event SETTINGCHANGED_EVENT = new Event("SettingChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected Setting(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getMaxUserExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt setMaxMonitorExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxMonitorExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxMonitorExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxMonitorExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setInitSpace(BigInteger space, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetInitSpace(BigInteger space) {
        final Function function = new Function(
                FUNC_SETINITSPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(space)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetInitSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getMaxAddFileFailedCount() throws ContractException {
        final Function function = new Function(FUNC_GETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxNodeExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxNodeExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxNodeExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxFileExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setDeleteFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDeleteFileTaskTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetDeleteFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetDeleteFileTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getInitSpace() throws ContractException {
        final Function function = new Function(FUNC_GETINITSPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getTaskAcceptTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getAddFileTaskTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getAdmin() throws ContractException {
        final Function function = new Function(FUNC_GETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setAdmin(String adminAddress) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAdmin(String adminAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAdmin(String adminAddress) {
        final Function function = new Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getMaxNodeExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXNODEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxCidLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxCidLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxCidLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setReplica(BigInteger replica, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetReplica(BigInteger replica) {
        final Function function = new Function(
                FUNC_SETREPLICA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(replica)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetReplicaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getAddFileProgressTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setTaskAcceptTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTaskAcceptTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTaskAcceptTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetTaskAcceptTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxCidLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXCIDLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxUserExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxUserExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxUserExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXUSEREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setAddFileProgressTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileProgressTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileProgressTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetAddFileProgressTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILEPROGRESSTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getMaxMonitorExtLength() throws ContractException {
        final Function function = new Function(FUNC_GETMAXMONITOREXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setAddFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAddFileTaskTimeout(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddFileTaskTimeout(BigInteger value) {
        final Function function = new Function(
                FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetAddFileTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETADDFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt setMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxFileExtLength(BigInteger length, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxFileExtLength(BigInteger length) {
        final Function function = new Function(
                FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(length)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxFileExtLengthInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXFILEEXTLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getDeleteFileTaskTimeout() throws ContractException {
        final Function function = new Function(FUNC_GETDELETEFILETASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReplica() throws ContractException {
        final Function function = new Function(FUNC_GETREPLICA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setMaxAddFileFailedCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setMaxAddFileFailedCount(BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMaxAddFileFailedCount(BigInteger value) {
        final Function function = new Function(
                FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetMaxAddFileFailedCountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMAXADDFILEFAILEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<SettingChangedEventResponse> getSettingChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETTINGCHANGED_EVENT, transactionReceipt);
        ArrayList<SettingChangedEventResponse> responses = new ArrayList<SettingChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettingChangedEventResponse typedResponse = new SettingChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.field = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.previousValue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newValue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSettingChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSettingChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETTINGCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Setting load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Setting(contractAddress, client, credential);
    }

    public static Setting deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Setting.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class SettingChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] name;

        public byte[] field;

        public BigInteger previousValue;

        public BigInteger newValue;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
