package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ChainStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"","613a2e565b005b348015610f1157600080fd5b50610f5460048036036020811015610f2857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613bc9565b005b348015610f6257600080fd5b50610fda60048036036020811015610f7957600080fd5b8101908080359060200190640100000000811115610f9657600080fd5b820183602082011115610fa857600080fd5b80359060200191846001830284011164010000000083111715610fca57600080fd5b9091929391929390505050613d36565b005b348015610fe857600080fd5b50610ff1613f4e565b005b348015610fff57600080fd5b506110816004803603604081101561101657600080fd5b81019080803590602001909291908035906020019064010000000081111561103d57600080fd5b82018360208201111561104f57600080fd5b8035906020019184600183028401116401000000008311171561107157600080fd5b90919293919293905050506140b3565b005b34801561108f57600080fd5b506110c6600480360360408110156110a657600080fd5b81019080803590602001909291908035906020019092919050505061434c565b005b3480156110d457600080fd5b506111ab600480360360608110156110eb57600080fd5b810190808035906020019064010000000081111561110857600080fd5b82018360208201111561111a57600080fd5b8035906020019184600183028401116401000000008311171561113c57600080fd5b9091929391929390803590602001909291908035906020019064010000000081111561116757600080fd5b82018360208201111561117957600080fd5b8035906020019184600183028401116401000000008311171561119b57600080fd5b9091929391929390505050614422565b005b3480156111b957600080fd5b506111c2614797565b005b3480156111d057600080fd5b506111d961485b565b005b6111e361491f565b6111eb614931565b73ffffffffffffffffffffffffffffffffffffffff1663bf824c6433836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600480548060200260200160405190810160405280929190818152602001828054801561131c57602002820191906000526020600020905b815481526020019060010190808311611308575b5050505050905090565b61132e61151a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61149b61151a565b801515600260159054906101000a900460ff16151514156114bb57611517565b801515600260159054906101000a900460ff1615157fac1664632d6278432aa05a6afc0aa83e5ea08e8df9a1436736daa5d6283211c060405160405180910390a380600260156101000a81548160ff0219169083151502179055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61162661491f565b61162e614961565b73ffffffffffffffffffffffffffffffffffffffff1663ef18de2f33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156116d057600080fd5b505af11580156116e4573d6000803e3d6000fd5b5050505050565b6116f361491f565b6116fb614991565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d602081101561178657600080fd5b81019080805190602001909291905050508282905011151515611811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b6118196149c1565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f933868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561191b57600080fd5b505af115801561192f573d6000803e3d6000fd5b5050505050505050565b61194161491f565b611949614961565b73ffffffffffffffffffffffffffffffffffffffff1663037c5d7f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156119e357600080fd5b505af11580156119f7573d6000803e3d6000fd5b50505050565b611a0561491f565b611a0d614991565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611a6e57600080fd5b505afa158015611a82573d6000803e3d6000fd5b505050506040513d6020811015611a9857600080fd5b81019080805190602001909291905050508282905011151515611b23576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b611b2b6149c1565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611bf957600080fd5b505af1158015611c0d573d6000803e3d6000fd5b505050505050565b611c1d61491f565b611c25614991565b73ffffffffffffffffffffffffffffffffffffffff1663de249e716040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611c8657600080fd5b505afa158015611c9a573d6000803e3d6000fd5b505050506040513d6020811015611cb057600080fd5b81019080805190602001909291905050508282905011151515611d3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43533a6d6f6e69746f722065787420746f6f206c6f6e6700000000000000000081525060200191505060405180910390fd5b611d43614961565b73ffffffffffffffffffffffffffffffffffffffff166332434a2e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611e1157600080fd5b505af1158015611e25573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e5d61491f565b611e65614961565b73ffffffffffffffffffffffffffffffffffffffff16638db4ad7133846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015","611f0757600080fd5b505af1158015611f1b573d6000803e3d6000fd5b505050506040513d6020811015611f3157600080fd5b81019080805190602001909291905050509050919050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461208f6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561207b5780601f106120505761010080835404028352916020019161207b565b820191906000526020600020905b81548152906001019060200180831161205e57829003601f168201915b50505050506149f19092919063ffffffff16565b901515612137576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120fc5780820151818401526020810190506120e1565b50505050905090810190601f1680156121295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b61214361491f565b61214b614ac6565b73ffffffffffffffffffffffffffffffffffffffff16635adfb0543384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b1580156121f557600080fd5b505af1158015612209573d6000803e3d6000fd5b505050505050565b61221961491f565b612221614961565b73ffffffffffffffffffffffffffffffffffffffff16635b114af6336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156122bb57600080fd5b505af11580156122cf573d6000803e3d6000fd5b50505050565b600260159054906101000a900460ff1681565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561237e5780601f106123535761010080835404028352916020019161237e565b820191906000526020600020905b81548152906001019060200180831161236157829003601f168201915b505050505081565b61238e61491f565b612396614ac6565b73ffffffffffffffffffffffffffffffffffffffff166391c48c763384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b15801561244057600080fd5b505af1158015612454573d6000803e3d6000fd5b505050505050565b61246461491f565b61246c614931565b73ffffffffffffffffffffffffffffffffffffffff16639bc8dbb1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561250657600080fd5b505af115801561251a573d6000803e3d6000fd5b50505050565b61252861491f565b612530614991565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561259157600080fd5b505afa1580156125a5573d6000803e3d6000fd5b505050506040513d60208110156125bb57600080fd5b81019080805190602001909291905050508282905011151515612646576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b61264e6149c1565b73ffffffffffffffffffffffffffffffffffffffff166332434a2e3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b505050505050565b61274061491f565b612748614961565b73ffffffffffffffffffffffffffffffffffffffff16635a5fa84433836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156127ea57600080fd5b505af11580156127fe573d6000803e3d6000fd5b5050505050565b61280d61151a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561289c57600080fd5b505afa1580156128b0573d6000803e3d6000fd5b505050506040513d60208110156128c657600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61298561491f565b61298d614961565b73ffffffffffffffffffffffffffffffffffffffff16639bc8dbb1336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b50505050565b612a4961491f565b612a727f41646d696e000000000000000000000000000000000000000000000000000000611f49565b612a7a6149c1565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612b1c57600080fd5b505af1158015612b30573d6000803e3d6000fd5b505050505050565b612b4061491f565b612b48614961565b73ffffffffffffffffffffffffffffffffffffffff1663cfed730933836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612bea57600080fd5b505af1158015612bfe573d6000803e3d6000fd5b5050505050565b612c0d61491f565b612c15614ac6565b73ffffffffffffffffffffffffffffffffffffffff1663539ccb3a33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612cb757600080fd5b505af1158015612ccb573d6000803e3d6000fd5b5050505050565b612cda61491f565b612ce2614931565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7333836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612d8457600080fd5b505af1158015612d98573d6000803e3d6000fd5b5050505050565b600260159054906101000a900460ff1615612e926040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e7f5780601f10612e5457610100808354040283529160200191612e7f565b820191906000526020600020905b815481529060010190602001808311612e6257829003601f168201915b5050505050614af690919063ffffffff16565b901515612f3a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612eff578082015181840152602081019050612ee456","","840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015613f3257600080fd5b505af1158015613f46573d6000803e3d6000fd5b505050505050565b613f5661151a565b60008090505b6004805490508110156140b0576000600482815481101515613f7a57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561401657600080fd5b505afa15801561402a573d6000803e3d6000fd5b505050506040513d602081101561404057600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050613f5c565b50565b6140bb61491f565b6140c3614991565b73ffffffffffffffffffffffffffffffffffffffff166371e346626040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561412457600080fd5b505afa158015614138573d6000803e3d6000fd5b505050506040513d602081101561414e57600080fd5b810190808051906020019092919050505082829050111515156141d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b600083111515614251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43533a6e6f64652073746f72616765546f74616c206d7573743e30000000000081525060200191505060405180910390fd5b614259614931565b73ffffffffffffffffffffffffffffffffffffffff1663f11b1b88338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561432f57600080fd5b505af1158015614343573d6000803e3d6000fd5b50505050505050565b61435461491f565b61435c614931565b73ffffffffffffffffffffffffffffffffffffffff1663b97b4a493384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b15801561440657600080fd5b505af115801561441a573d6000803e3d6000fd5b505050505050565b61442a61491f565b614432614991565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561449357600080fd5b505afa1580156144a7573d6000803e3d6000fd5b505050506040513d60208110156144bd57600080fd5b81019080805190602001909291905050508282905011151515614548576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b614550614991565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156145b157600080fd5b505afa1580156145c5573d6000803e3d6000fd5b505050506040513d60208110156145db57600080fd5b81019080805190602001909291905050508585905011151515614666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b61466e6149c1565b73ffffffffffffffffffffffffffffffffffffffff1663b6bbd1503387878787876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561477857600080fd5b505af115801561478c573d6000803e3d6000fd5b505050505050505050565b61479f61491f565b6147a7614931565b73ffffffffffffffffffffffffffffffffffffffff16635b114af6336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561484157600080fd5b505af1158015614855573d6000803e3d6000fd5b50505050565b61486361491f565b61486b614931565b73ffffffffffffffffffffffffffffffffffffffff1663037c5d7f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561490557600080fd5b505af1158015614919573d6000803e3d6000fd5b50505050565b6149276136b0565b61492f612d9f565b565b600061495c7f4e6f646500000000000000000000000000000000000000000000000000000000614dba565b905090565b600061498c7f4d6f6e69746f7200000000000000000000000000000000000000000000000000614dba565b905090565b60006149bc7f53657474696e6700000000000000000000000000000000000000000000000000614dba565b905090565b60006149ec7f5573657200000000000000000000000000000000000000000000000000000000614dba565b905090565b60608383836040516020018084805190602001908083835b602083101515614a2e5780518252602082019150602081019050602083039250614a09565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515614a815780518252602082019150602081019050602083039250614a5c565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b6000614af17f5461736b00000000000000000000000000000000000000000000000000000000614dba565b905090565b606082826040516020018083805190602001908083835b602083101515614b325780518252602082019150602081019050602083039250614b0d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515614b855780518252602082019150602081019050602083039250614b60565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60001515600260149054906101000a900460ff16151514614cbb6040805190810160405280601581526020017f3a20616c726561647920696e697469616c697a6564000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614ca85780601f10614c7d57610100808354040283529160200191614ca8565b820191906000526020600020905b815481529060010190602001808311614c8b57829003601f168201915b5050505050614af690919063ffffffff16565b901515614d63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d28578082015181840152602081019050614d0d565b50505050905090810190601f168015614d555780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600260146101000a81548160ff021916908315150217905550565b806040516020018082815260200191505060405160208183030381529060405260009080519060200190614db6929190615034565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614f036040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614eef5780601f10614ec457610100808354040283529160200191614eef565b820191906000526020600020905b815481529060010190602001808311614ed257829003601f168201915b50505050506149f19092919063ffff","ffff16565b901515614fab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614f70578082015181840152602081019050614f55565b50505050905090810190601f168015614f9d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b828054828255906000526020600020908101928215615023579160200282015b82811115615022578251825591602001919060010190615007565b5b50905061503091906150b4565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061507557805160ff19168380011785556150a3565b828001600101855582156150a3579182015b828111156150a2578251825591602001919060010190615087565b5b5090506150b091906150d9565b5090565b6150d691905b808211156150d25760008160009055506001016150ba565b5090565b90565b6150fb91905b808211156150f75760008160009055506001016150df565b5090565b9056fea165627a7a7230582075d0869b5e1d9472ba96585bab069a906b229c08eb6fef9e4c8e7548c6ff4fc70029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50600033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260156101000a81548160ff02191690831515021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050615128806101016000396000f3fe6080604052600436106102a5576000357c01000000000000000000000000000000000000000000000000000000009004806391726a9911610177578063c2293169116100de578063df7b57b911610097578063df7b57b914610fd6578063e613588714611011578063ec704d3914611028578063ef6b672e146110ae578063f9de6e85146110e9578063fc3b984114611100576102a5565b8063c229316914610dbb578063c558d7be14610e4b578063c71b8dc814610e62578063d27072d914610e9d578063d27605b014610f62578063d4bc960114610fa7576102a5565b8063aad2e00211610130578063aad2e00214610c8d578063ac600c0514610ca4578063b1eb3c2e14610cbb578063b722765a14610cd2578063b84b533c14610d29578063c0c22a6214610d40576102a5565b806391726a9914610a335780639392bbaa14610a8457806395249faa14610b695780639b25951e14610ba4578063a0baf41914610bff578063a202914a14610c52576102a5565b806340af66971161021b5780636f105d93116101d45780636f105d93146107915780637a52c7b4146107d657806380738aa41461086657806380aa7522146108ec5780638757fe87146109725780638b6ceb4f146109f8576102a5565b806340af669714610597578063439ae96b146105ae5780635011ac15146106345780635089e2c81461066f57806357bddefa146106c65780636b58506b14610756576102a5565b80631db0dbc91161026d5780631db0dbc9146104405780632be7ffd5146104ac578063333026a8146104c357806337399bf71461050857806338d529eb146105455780633b6edcbe1461055c576102a5565b806305282c70146102aa5780630ceafe00146102fb5780630ec991c2146103125780630fed894714610369578063117b5418146103ef575b600080fd5b3480156102b657600080fd5b506102f9600480360360208110156102cd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111db565b005b34801561030757600080fd5b50610310611348565b005b34801561031e57600080fd5b5061032761140c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037557600080fd5b506103ed6004803603602081101561038c57600080fd5b81019080803590602001906401000000008111156103a957600080fd5b8201836020820111156103bb57600080fd5b803590602001918460018302840111640100000000831117156103dd57600080fd5b9091929391929390505050611432565b005b3480156103fb57600080fd5b5061043e6004803603602081101561041257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061164a565b005b34801561044c57600080fd5b506104556117c6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561049857808201518184015260208101905061047d565b505050509050019250505060405180910390f35b3480156104b857600080fd5b506104c161181e565b005b3480156104cf57600080fd5b50610506600480360360408110156104e657600080fd5b8101908080359060200190929190803590602001909291905050506118e2565b005b34801561051457600080fd5b506105436004803603602081101561052b57600080fd5b810190808035151590602001909291905050506119b8565b005b34801561055157600080fd5b5061055a611a3f565b005b34801561056857600080fd5b506105956004803603602081101561057f57600080fd5b8101908080359060200190929190505050611b03565b005b3480156105a357600080fd5b506105ac611bd0565b005b3480156105ba57600080fd5b50610632600480360360208110156105d157600080fd5b81019080803590602001906401000000008111156105ee57600080fd5b82018360208201111561060057600080fd5b8035906020019184600183028401116401000000008311171561062257600080fd5b9091929391929390505050611d6e565b005b34801561064057600080fd5b5061066d6004803603602081101561065757600080fd5b8101908080359060200190929190505050611f86565b005b34801561067b57600080fd5b50610684612053565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106d257600080fd5b50610754600480360360408110156106e957600080fd5b810190808035906020019064010000000081111561070657600080fd5b82018360208201111561071857600080fd5b8035906020019184600183028401116401000000008311171561073a57600080fd5b909192939192939080359060200190929190505050612079565b005b34801561076257600080fd5b5061078f6004803603602081101561077957600080fd5b810190808035906020019092919050505061217c565b005b34801561079d57600080fd5b506107d4600480360360408110156107b457600080fd5b8101908080359060200190929190803590602001909291905050506122ce565b005b3480156107e257600080fd5b50610864600480360360408110156107f957600080fd5b81019080803590602001909291908035906020019064010000000081111561082057600080fd5b82018360208201111561083257600080fd5b8035906020019184600183028401116401000000008311171561085457600080fd5b90919293919293905050506123a4565b005b34801561087257600080fd5b506108ea6004803603602081101561088957600080fd5b81019080803590602001906401000000008111156108a657600080fd5b8201836020820111156108b857600080fd5b803590602001918460018302840111640100000000831117156108da57600080fd5b909192939192939050505061263c565b005b3480156108f857600080fd5b506109706004803603602081101561090f57600080fd5b810190808035906020019064010000000081111561092c57600080fd5b82018360208201111561093e57600080fd5b8035906020019184600183028401116401000000008311171561096057600080fd5b9091929391929390505050612854565b005b34801561097e57600080fd5b506109f66004803603602081101561099557600080fd5b81019080803590602001906401000000008111156109b257600080fd5b8201836020820111156109c457600080fd5b803590602001918460018302840111640100000000831117156109e657600080fd5b9091929391929390505050612a6c565b005b348015610a0457600080fd5b50610a3160048036036020811015610a1b57600080fd5b8101908080359060200190929190505050612c83565b005b348015610a3f57600080fd5b50610a8260048036036020811015610a5657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e64565b005b348015610a9057600080fd5b50610b6760048036036060811015610aa757600080fd5b8101908080359060200190640100000000811115610ac457600080fd5b820183602082011115610ad657600080fd5b80359060200191846001830284011164010000000083111715610af857600080fd5b90919293919293908035906020019092919080359060200190640100000000811115610b2357600080fd5b820183602082011115610b3557600080fd5b80359060200191846001830284011164010000000083111715610b5757600080fd5b9091929391929390505050612fd1565b005b348015610b7557600080fd5b50610ba260048036036020811015610b8c57600080fd5b8101908080359060200190929190505050613346565b005b348015610bb057600080fd5b50610bfd60048036036040811015610bc757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613413565b005b348015610c0b57600080fd5b50610c3860048036036020811015610c2257600080fd5b810190808035906020019092919050505061350a565b604051808215151515815260200191505060405180910390f35b348015610c5e57600080fd5b50610c8b60048036036020811015610c7557600080fd5b8101908080359060200190929190505050613600565b005b348015610c9957600080fd5b50610ca26137f2565b005b348015610cb057600080fd5b50610cb96138b6565b005b348015610cc757600080fd5b50610cd061397a565b005b348015610cde57600080fd5b50610ce7613a41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d3557600080fd5b50610d3e613a67565b005b348015610d4c57600080fd5b50610d7960048036036020811015610d6357600080fd5b8101908080359060200190929190505050613b2b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dc757600080fd5b50610dd0613b68565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e10578082015181840152602081019050610df5565b50505050905090810190601f168015610e3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e5757600080fd5b50610e60613c06565b005b348015610e6e57600080fd5b50610e9b60048036036020811015610e8557600080fd5b8101908080359060200190929190505050613da3565b005b348015610ea957600080fd5b50610f6060048036036020811015610ec057600080fd5b8101908080359060200190640100000000811115610edd57600080fd5b820183602082011115610eef57600080fd5b803590602001918460208302840111","64010000000083111715610f1157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613e70565b005b348015610f6e57600080fd5b50610fa560048036036040811015610f8557600080fd5b81019080803590602001909291908035906020019092919050505061400b565b005b348015610fb357600080fd5b50610fbc6140e1565b604051808215151515815260200191505060405180910390f35b348015610fe257600080fd5b5061100f60048036036020811015610ff957600080fd5b81019080803590602001909291905050506140f4565b005b34801561101d57600080fd5b506110266141c1565b005b34801561103457600080fd5b506110ac6004803603602081101561104b57600080fd5b810190808035906020019064010000000081111561106857600080fd5b82018360208201111561107a57600080fd5b8035906020019184600183028401116401000000008311171561109c57600080fd5b9091929391929390505050614285565b005b3480156110ba57600080fd5b506110e7600480360360208110156110d157600080fd5b810190808035906020019092919050505061449d565b005b3480156110f557600080fd5b506110fe61456a565b005b34801561110c57600080fd5b506111d96004803603604081101561112357600080fd5b810190808035906020019064010000000081111561114057600080fd5b82018360208201111561115257600080fd5b8035906020019184600183028401116401000000008311171561117457600080fd5b90919293919293908035906020019064010000000081111561119557600080fd5b8201836020820111156111a757600080fd5b803590602001918460018302840111640100000000831117156111c957600080fd5b90919293919293905050506146cf565b005b6111e361397a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611288576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61135061491d565b61135861492f565b73ffffffffffffffffffffffffffffffffffffffff1663d7bf8533336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156113f257600080fd5b505af1158015611406573d6000803e3d6000fd5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61143a61491d565b61144261495f565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156114a357600080fd5b505afa1580156114b7573d6000803e3d6000fd5b505050506040513d60208110156114cd57600080fd5b81019080805190602001909291905050508282905011151515611558576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b61156061498f565b73ffffffffffffffffffffffffffffffffffffffff16637d0722523384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b505050505050565b61165261397a565b61165a6149bf565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506116c47f436861696e53746f726167650000000000000000000000000000000000000000614b7e565b60c0604051908101604052807f53657474696e670000000000000000000000000000000000000000000000000081526020017f557365720000000000000000000000000000000000000000000000000000000081526020017f4e6f64650000000000000000000000000000000000000000000000000000000081526020017f5461736b0000000000000000000000000000000000000000000000000000000081526020017f4d6f6e69746f720000000000000000000000000000000000000000000000000081526020017f41646d696e00000000000000000000000000000000000000000000000000000081525060049060066117c2929190614fe5565b5050565b6060600480548060200260200160405190810160405280929190818152602001828054801561181457602002820191906000526020600020905b815481526020019060010190808311611800575b5050505050905090565b61182661491d565b61182e614bb7565b73ffffffffffffffffffffffffffffffffffffffff1663337f1c9c336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156118c857600080fd5b505af11580156118dc573d6000803e3d6000fd5b50505050565b6118ea61491d565b6118f2614be7565b73ffffffffffffffffffffffffffffffffffffffff166338b8878c3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b15801561199c57600080fd5b505af11580156119b0573d6000803e3d6000fd5b505050505050565b6119c061397a565b801515600260159054906101000a900460ff16151514156119e057611a3c565b801515600260159054906101000a900460ff1615157fcb8b5b2f60f2e69f0695d2a329226bd381ce84933547d7f94a137d8ed8a2accc60405160405180910390a380600260156101000a81548160ff0219169083151502179055505b50565b611a4761491d565b611a4f614bb7565b73ffffffffffffffffffffffffffffffffffffffff1663bf46bf65336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611ae957600080fd5b505af1158015611afd573d6000803e3d6000fd5b50505050565b611b0b61491d565b611b13614be7565b73ffffffffffffffffffffffffffffffffffffffff16637f8f619733836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611bb557600080fd5b505af1158015611bc9573d6000803e3d6000fd5b5050505050565b600260159054906101000a900460ff1615611cc36040805190810160405280600881526020017f3a2070617573656400000000000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cb05780601f10611c8557610100808354040283529160200191611cb0565b820191906000526020600020905b815481529060010190602001808311611c9357829003601f168201915b5050505050614c1790919063ffffffff16565b901515611d6b576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d30578082015181840152602081019050611d15565b50505050905090810190601f168015611d5d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50565b611d7661491d565b611d7e61495f565b73ffffffffffffffffffffffffffffffffffffffff1663cfd994e26040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d6020811015611e0957600080fd5b81019080805190602001909291905050508282905011151515611e94576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43533a6d6f6e69746f722065787420746f6f206c6f6e6700000000000000000081525060200191505060405180910390fd5b611e9c614bb7565b73ffffffffffffffffffffffffffffffffffffffff1663977b65903384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffff","ff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b505050505050565b611f8e61491d565b611f96614bb7565b73ffffffffffffffffffffffffffffffffffffffff166313e96b0333836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561203857600080fd5b505af115801561204c573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61208161491d565b61208961498f565b73ffffffffffffffffffffffffffffffffffffffff16636bddd7ba338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561215f57600080fd5b505af1158015612173573d6000803e3d6000fd5b50505050505050565b61218461397a565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561221357600080fd5b505afa158015612227573d6000803e3d6000fd5b505050506040513d602081101561223d57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6122d661491d565b6122de61492f565b73ffffffffffffffffffffffffffffffffffffffff1663a9c003a43384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050600060405180830381600087803b15801561238857600080fd5b505af115801561239c573d6000803e3d6000fd5b505050505050565b6123ac61491d565b6123b461495f565b73ffffffffffffffffffffffffffffffffffffffff1662c6a4056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561241457600080fd5b505afa158015612428573d6000803e3d6000fd5b505050506040513d602081101561243e57600080fd5b810190808051906020019092919050505082829050111515156124c9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b600083111515612541576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43533a6e6f64652073746f72616765546f74616c206d7573743e30000000000081525060200191505060405180910390fd5b61254961492f565b73ffffffffffffffffffffffffffffffffffffffff16633df7ffeb338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561261f57600080fd5b505af1158015612633573d6000803e3d6000fd5b50505050505050565b61264461491d565b61264c61495f565b73ffffffffffffffffffffffffffffffffffffffff1663cfd994e26040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156126ad57600080fd5b505afa1580156126c1573d6000803e3d6000fd5b505050506040513d60208110156126d757600080fd5b81019080805190602001909291905050508282905011151515612762576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43533a6d6f6e69746f722065787420746f6f206c6f6e6700000000000000000081525060200191505060405180910390fd5b61276a614bb7565b73ffffffffffffffffffffffffffffffffffffffff1663856101ec3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561283857600080fd5b505af115801561284c573d6000803e3d6000fd5b505050505050565b61285c61491d565b61286461495f565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156128c557600080fd5b505afa1580156128d9573d6000803e3d6000fd5b505050506040513d60208110156128ef57600080fd5b8101908080519060200190929190505050828290501115151561297a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a757365722065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b61298261498f565b73ffffffffffffffffffffffffffffffffffffffff1663856101ec3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015612a5057600080fd5b505af1158015612a64573d6000803e3d6000fd5b505050505050565b612a7461491d565b612a7c61495f565b73ffffffffffffffffffffffffffffffffffffffff1662c6a4056040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612adc57600080fd5b505afa158015612af0573d6000803e3d6000fd5b505050506040513d6020811015612b0657600080fd5b81019080805190602001909291905050508282905011151515612b91576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a6e6f64652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b612b9961492f565b73ffffffffffffffffffffffffffffffffffffffff1663977b65903384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015612c6757600080fd5b505af1158015612c7b573d6000803e3d6000fd5b505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612db86040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612da45780601f10612d7957610100808354040283529160200191612da4565b820191906000526020600020905b815481529060010190602001808311612d8757829003601f168201915b5050505050614ce39092919063ffffffff16565b901515612e60576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612e25578082015181840152602081019050612e0a565b50505050905090810190601f168015612e525780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b612e6c61397a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612f11576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f2061646472657373","0081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612fd961491d565b612fe161495f565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561304257600080fd5b505afa158015613056573d6000803e3d6000fd5b505050506040513d602081101561306c57600080fd5b810190808051906020019092919050505082829050111515156130f7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f43533a66696c652065787420746f6f206c6f6e6700000000000000000000000081525060200191505060405180910390fd5b6130ff61495f565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561316057600080fd5b505afa158015613174573d6000803e3d6000fd5b505050506040513d602081101561318a57600080fd5b81019080805190602001909291905050508585905011151515613215576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f43533a63696420746f6f206c6f6e67000000000000000000000000000000000081525060200191505060405180910390fd5b61321d61498f565b73ffffffffffffffffffffffffffffffffffffffff166391eb51803387878787876040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561332757600080fd5b505af115801561333b573d6000803e3d6000fd5b505050505050505050565b61334e61491d565b613356614bb7565b73ffffffffffffffffffffffffffffffffffffffff16636b216ce133836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156133f857600080fd5b505af115801561340c573d6000803e3d6000fd5b5050505050565b61341b61491d565b6134447f41646d696e000000000000000000000000000000000000000000000000000000613600565b61344c61498f565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156134ee57600080fd5b505af1158015613502573d6000803e3d6000fd5b505050505050565b600061351461491d565b61351c614bb7565b73ffffffffffffffffffffffffffffffffffffffff166388e7237433846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156135be57600080fd5b505af11580156135d2573d6000803e3d6000fd5b505050506040513d60208110156135e857600080fd5b81019080805190602001909291905050509050919050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146137466040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137325780601f1061370757610100808354040283529160200191613732565b820191906000526020600020905b81548152906001019060200180831161371557829003601f168201915b5050505050614ce39092919063ffffffff16565b9015156137ee576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156137b3578082015181840152602081019050613798565b50505050905090810190601f1680156137e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b6137fa61491d565b613802614bb7565b73ffffffffffffffffffffffffffffffffffffffff1663d7bf8533336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561389c57600080fd5b505af11580156138b0573d6000803e3d6000fd5b50505050565b6138be61491d565b6138c661492f565b73ffffffffffffffffffffffffffffffffffffffff1663bf46bf65336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561396057600080fd5b505af1158015613974573d6000803e3d6000fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613a3f576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613a6f61491d565b613a7761492f565b73ffffffffffffffffffffffffffffffffffffffff1663337f1c9c336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613b1157600080fd5b505af1158015613b25573d6000803e3d6000fd5b50505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bfe5780601f10613bd357610100808354040283529160200191613bfe565b820191906000526020600020905b815481529060010190602001808311613be157829003601f168201915b505050505081565b600260149054906101000a900460ff16613cf86040805190810160405280601881526020017f3a20636f6e747261637420756e696e697469616c697a6564000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613ce55780601f10613cba57610100808354040283529160200191613ce5565b820191906000526020600020905b815481529060010190602001808311613cc857829003601f168201915b5050505050614c1790919063ffffffff16565b901515613da0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613d65578082015181840152602081019050613d4a565b50505050905090810190601f168015613d925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50565b613dab61491d565b613db361492f565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613e5557600080fd5b505af1158015613e69573d6000803e3d6000fd5b5050505050565b60148151101515613ee9576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b8251811015613f915760","","16565b901515614fa9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614f6e578082015181840152602081019050614f53565b50505050905090810190601f168015614f9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b828054828255906000526020600020908101928215615021579160200282015b82811115615020578251825591602001919060010190615005565b5b50905061502e91906150b2565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061507357805160ff19168380011785556150a1565b828001600101855582156150a1579182015b828111156150a0578251825591602001919060010190615085565b5b5090506150ae91906150d7565b5090565b6150d491905b808211156150d05760008160009055506001016150b8565b5090565b90565b6150f991905b808211156150f55760008160009055506001016150dd565b5090565b9056fea165627a7a723058202a761f78ebc3d3c64c2ceaf63b415f31aff1fddfe240ed18926219b8028d44230029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"nodeFailTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorReportTaskAcceptTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monitorMaintain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"monitorRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorCheckTask\",\"outputs\":[{\"name\":\"continueCheck\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeReportAddFileProgressBySize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monitorDeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"nodeReportAddFileProgressByPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeOnline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorResetCurrentTid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monitorOnline\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"userSetStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"monitorReportTaskTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"}],\"name\":\"nodeAcceptTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storageTotal\",\"type\":\"uint256\"}],\"name\":\"nodeSetStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustNotPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userSetFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userDeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"monitorSetExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustInitialized\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"userDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"storageTotal\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"nodeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tid\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"nodeFinishTask\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"userAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeDeRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nodeMaintain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,","\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_NODEFAILTASK = "nodeFailTask";

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETPAUSED = "setPaused";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_MONITORREPORTTASKACCEPTTIMEOUT = "monitorReportTaskAcceptTimeout";

    public static final String FUNC_USERSETFILEEXT = "userSetFileExt";

    public static final String FUNC_MONITORMAINTAIN = "monitorMaintain";

    public static final String FUNC_USERSETEXT = "userSetExt";

    public static final String FUNC_MONITORREGISTER = "monitorRegister";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MONITORCHECKTASK = "monitorCheckTask";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_NODEREPORTADDFILEPROGRESSBYSIZE = "nodeReportAddFileProgressBySize";

    public static final String FUNC_MONITORDEREGISTER = "monitorDeRegister";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_NODEREPORTADDFILEPROGRESSBYPERCENTAGE = "nodeReportAddFileProgressByPercentage";

    public static final String FUNC_NODEONLINE = "nodeOnline";

    public static final String FUNC_USERREGISTER = "userRegister";

    public static final String FUNC_MONITORRESETCURRENTTID = "monitorResetCurrentTid";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_MONITORONLINE = "monitorOnline";

    public static final String FUNC_USERSETSTORAGETOTAL = "userSetStorageTotal";

    public static final String FUNC_MONITORREPORTTASKTIMEOUT = "monitorReportTaskTimeout";

    public static final String FUNC_NODEACCEPTTASK = "nodeAcceptTask";

    public static final String FUNC_NODESETSTORAGETOTAL = "nodeSetStorageTotal";

    public static final String FUNC_MUSTNOTPAUSED = "mustNotPaused";

    public static final String FUNC_NODESETEXT = "nodeSetExt";

    public static final String FUNC_USERSETFILEDURATION = "userSetFileDuration";

    public static final String FUNC_USERDEREGISTER = "userDeRegister";

    public static final String FUNC_MONITORSETEXT = "monitorSetExt";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_MUSTINITIALIZED = "mustInitialized";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_USERDELETEFILE = "userDeleteFile";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_NODEREGISTER = "nodeRegister";

    public static final String FUNC_NODEFINISHTASK = "nodeFinishTask";

    public static final String FUNC_USERADDFILE = "userAddFile";

    public static final String FUNC_NODEDEREGISTER = "nodeDeRegister";

    public static final String FUNC_NODEMAINTAIN = "nodeMaintain";

    public static final Event PAUSECHANGED_EVENT = new Event("PauseChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected ChainStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt nodeFailTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeFailTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeFailTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeFailTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEFAILTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setPaused(Boolean _paused) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setPaused(Boolean _paused, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPaused(Boolean _paused) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Bool(_paused)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getSetPausedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt monitorReportTaskAcceptTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorReportTaskAcceptTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorReportTaskAcceptTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorReportTaskAcceptTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORREPORTTASKACCEPTTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt userSetFileExt(String cid, String ext) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetFileExt(String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetFileExt(String cid, String ext) {
        final Function function = new Function(
                FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getUserSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt monitorMaintain() {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorMaintain(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorMaintain() {
        final Function function = new Function(
                FUNC_MONITORMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt userSetExt(String ext) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetExt(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetExt(String ext) {
        final Function function = new Function(
                FUNC_USERSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt monitorRegister(String ext) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorRegister(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorRegister(String ext) {
        final Function function = new Function(
                FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getMonitorRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt monitorCheckTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorCheckTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorCheckTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorCheckTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getMonitorCheckTaskOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MONITORCHECKTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeReportAddFileProgressBySize(BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeReportAddFileProgressBySize(BigInteger tid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeReportAddFileProgressBySize(BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getNodeReportAddFileProgressBySizeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEREPORTADDFILEPROGRESSBYSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt monitorDeRegister() {
        final Function function = new Function(
                FUNC_MONITORDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorDeRegister(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorDeRegister() {
        final Function function = new Function(
                FUNC_MONITORDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Boolean paused() throws ContractException {
        final Function function = new Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt nodeReportAddFileProgressByPercentage(BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeReportAddFileProgressByPercentage(BigInteger tid, BigInteger percentage, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeReportAddFileProgressByPercentage(BigInteger tid, BigInteger percentage) {
        final Function function = new Function(
                FUNC_NODEREPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(percentage)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getNodeReportAddFileProgressByPercentageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEREPORTADDFILEPROGRESSBYPERCENTAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt nodeOnline() {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeOnline(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeOnline() {
        final Function function = new Function(
                FUNC_NODEONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt userRegister(String ext) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userRegister(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserRegister(String ext) {
        final Function function = new Function(
                FUNC_USERREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt monitorResetCurrentTid(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorResetCurrentTid(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorResetCurrentTid(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorResetCurrentTidInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORRESETCURRENTTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt monitorOnline() {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorOnline(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorOnline() {
        final Function function = new Function(
                FUNC_MONITORONLINE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt userSetStorageTotal(String addr, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_USERSETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetStorageTotal(String addr, BigInteger storageTotal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetStorageTotal(String addr, BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_USERSETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUserSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt monitorReportTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorReportTaskTimeout(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorReportTaskTimeout(BigInteger tid) {
        final Function function = new Function(
                FUNC_MONITORREPORTTASKTIMEOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getMonitorReportTaskTimeoutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORREPORTTASKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeAcceptTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeAcceptTask(BigInteger tid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeAcceptTask(BigInteger tid) {
        final Function function = new Function(
                FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeAcceptTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEACCEPTTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt nodeSetStorageTotal(BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_NODESETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeSetStorageTotal(BigInteger storageTotal, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODESETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeSetStorageTotal(BigInteger storageTotal) {
        final Function function = new Function(
                FUNC_NODESETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getNodeSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODESETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustNotPaused() {
        final Function function = new Function(
                FUNC_MUSTNOTPAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustNotPaused(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTNOTPAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustNotPaused() {
        final Function function = new Function(
                FUNC_MUSTNOTPAUSED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeSetExt(String ext) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeSetExt(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeSetExt(String ext) {
        final Function function = new Function(
                FUNC_NODESETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getNodeSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODESETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt userSetFileDuration(String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userSetFileDuration(String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserSetFileDuration(String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUserSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERSETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt userDeRegister() {
        final Function function = new Function(
                FUNC_USERDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userDeRegister(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserDeRegister() {
        final Function function = new Function(
                FUNC_USERDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt monitorSetExt(String ext) {
        final Function function = new Function(
                FUNC_MONITORSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] monitorSetExt(String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MONITORSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMonitorSetExt(String ext) {
        final Function function = new Function(
                FUNC_MONITORSETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getMonitorSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MONITORSETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt initialize(String _resolver) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] initialize(String _resolver, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInitialize(String _resolver) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getInitializeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustInitialized() {
        final Function function = new Function(
                FUNC_MUSTINITIALIZED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustInitialized(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTINITIALIZED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustInitialized() {
        final Function function = new Function(
                FUNC_MUSTINITIALIZED, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt userDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userDeleteFile(String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserDeleteFile(String cid) {
        final Function function = new Function(
                FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getUserDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeRegister(BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeRegister(BigInteger storageTotal, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeRegister(BigInteger storageTotal, String ext) {
        final Function function = new Function(
                FUNC_NODEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(storageTotal), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getNodeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt nodeFinishTask(BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeFinishTask(BigInteger tid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeFinishTask(BigInteger tid, BigInteger size) {
        final Function function = new Function(
                FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getNodeFinishTaskInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NODEFINISHTASK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt userAddFile(String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] userAddFile(String cid, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUserAddFile(String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_USERADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, String> getUserAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_USERADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt nodeDeRegister() {
        final Function function = new Function(
                FUNC_NODEDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeDeRegister(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeDeRegister() {
        final Function function = new Function(
                FUNC_NODEDEREGISTER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt nodeMaintain() {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] nodeMaintain(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNodeMaintain() {
        final Function function = new Function(
                FUNC_NODEMAINTAIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<PauseChangedEventResponse> getPauseChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSECHANGED_EVENT, transactionReceipt);
        ArrayList<PauseChangedEventResponse> responses = new ArrayList<PauseChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseChangedEventResponse typedResponse = new PauseChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (Boolean) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribePauseChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribePauseChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(PAUSECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ChainStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ChainStorage(contractAddress, client, credential);
    }

    public static ChainStorage deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ChainStorage.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class PauseChangedEventResponse {
        public TransactionReceipt.Logs log;

        public Boolean previousValue;

        public Boolean newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
