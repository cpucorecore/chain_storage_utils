package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String[] BINARY_ARRAY = {"","00028152600401610c4b9291906165c8565b600060405180830381600087803b158015610c6557600080fd5b505af1158015610c79573d6000803e3d6000fd5b50505050610c85615143565b73ffffffffffffffffffffffffffffffffffffffff1663ec18665d82846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cdb929190616815565b600060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610d5f57602002820191906000526020600020905b815481526020019060010190808311610d4b575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e9c6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e895780601f10610e5e57610100808354040283529160200191610e89565b820191906000526020600020905b815481529060010190602001808311610e6c57829003601f168201915b505050505061503890919063ffffffff16565b901515610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed691906167f3565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff36040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe05780601f10610fb557610100808354040283529160200191610fe0565b820191906000526020600020905b815481529060010190602001808311610fc357829003601f168201915b505050505061503890919063ffffffff16565b901515611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d91906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110ff615143565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8383866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111579392919061675f565b60206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a791908101906161aa565b15156113525760006111b7615104565b73ffffffffffffffffffffffffffffffffffffffff166347d06153856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161120b9190616456565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061125b919081019061623d565b9050611265615104565b73ffffffffffffffffffffffffffffffffffffffff16634bb75bf08561129560018561517390919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112ce9291906165f8565b600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc6f83b7b2d19b0fcc2cba9d7251b2d607d566fde09f4d53fd69757a10996a680848460405161134892919061673b565b60405180910390a2505b505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061139e615104565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113f29190616456565b60206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611442919081019061623d565b9050919050565b6000841161152f6040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b505050505061503890919063ffffffff16565b901515611572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156991906167f3565b60405180910390fd5b5061157b615008565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156115dc57600080fd5b505afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611614919081019061623d565b8282905011156116fc6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116e95780601f106116be576101008083540402835291602001916116e9565b820191906000526020600020905b8154815290600101906020018083116116cc57829003601f168201915b505050505061503890919063ffffffff16565b90151561173f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173691906167f3565b60405180910390fd5b50611748615008565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156117a957600080fd5b505afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117e1919081019061623d565b8686905011156118c96040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118b65780601f1061188b576101008083540402835291602001916118b6565b820191906000526020600020905b81548152906001019060200180831161189957829003601f168201915b505050505061503890919063ffffffff16565b90151561190c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190391906167f3565b60405180910390fd5b50611915615104565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48888886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161196d939291906164a8565b60206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119bd91908101906161aa565b15611aa06040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a8d5780601f10611a6257610100808354040283529160200191611a8d565b820191906000526020600020905b815481529060010190602001808311611a7057829003601f168201915b505050505061503890919063ffffffff16565b901515611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada91906167f3565b60405180910390fd5b5083611aed615104565b73ffffffffffffffffffffffffffffffffffffffff16637b7483fe896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b419190616456565b60206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b91919081019061623d565b1015611c756040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c625780601f10611c3757610100808354040283529160200191611c62565b8201","91906000526020600020905b815481529060010190602001808311611c4557829003601f168201915b505050505061503890919063ffffffff16565b901515611cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caf91906167f3565b60405180910390fd5b50611cc1615113565b73ffffffffffffffffffffffffffffffffffffffff1663d9a19302886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d3893929190616471565b600060405180830381600087803b158015611d5257600080fd5b505af1158015611d66573d6000803e3d6000fd5b50505050611d72615143565b73ffffffffffffffffffffffffffffffffffffffff1663b0fe21828787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dcc9493929190616791565b600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b50505050611e06615104565b73ffffffffffffffffffffffffffffffffffffffff16633e14fc1b888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e669796959493929190616563565b600060405180830381600087803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b5050505050505050505050565b611ea9615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611efd9190616456565b60206040518083038186803b158015611f1557600080fd5b505afa158015611f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4d91908101906161aa565b156120306040805190810160405280600c81526020017f3a2075736572206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561201d5780601f10611ff25761010080835404028352916020019161201d565b820191906000526020600020905b81548152906001019060200180831161200057829003601f168201915b505050505061503890919063ffffffff16565b901515612073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206a91906167f3565b60405180910390fd5b5061207c615008565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156120dd57600080fd5b505afa1580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612115919081019061623d565b8282905011156121fd6040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ea5780601f106121bf576101008083540402835291602001916121ea565b820191906000526020600020905b8154815290600101906020018083116121cd57829003601f168201915b505050505061503890919063ffffffff16565b901515612240576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223791906167f3565b60405180910390fd5b50612249615104565b73ffffffffffffffffffffffffffffffffffffffff16635f4cfd598461226d615008565b73ffffffffffffffffffffffffffffffffffffffff16635406cbe96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156122ce57600080fd5b505afa1580156122e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612306919081019061623d565b85856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123439493929190616621565b600060405180830381600087803b15801561235d57600080fd5b505af1158015612371573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156124b06040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561249d5780601f106124725761010080835404028352916020019161249d565b820191906000526020600020905b81548152906001019060200180831161248057829003601f168201915b505050505061503890919063ffffffff16565b9015156124f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ea91906167f3565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000612526615143565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161257c92919061673b565b60206040518083038186803b15801561259457600080fd5b505afa1580156125a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125cc919081019061623d565b90506125d885826151ca565b8473ffffffffffffffffffffffffffffffffffffffff167f14a51c77a00d5c4c3ccc7a4df74f169088c4d4d04859d176729645e53c7b895c848460405161262092919061673b565b60405180910390a25050505050565b6000612639615104565b73ffffffffffffffffffffffffffffffffffffffff166347534dac6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561269a57600080fd5b505afa1580156126ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126d2919081019061623d565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612707615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161275b9190616456565b60206040518083038186803b15801561277357600080fd5b505afa158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127ab91908101906161aa565b9050919050565b6127ba615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161280e9190616456565b60206040518083038186803b15801561282657600080fd5b505afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061285e91908101906161aa565b6129406040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561292d5780601f106129025761010080835404028352916020019161292d565b820191906000526020600020905b81548152906001019060200180831161291057829003601f168201915b505050505061503890919063ffffffff16565b901515612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297a91906167f3565b60405180910390fd5b5061298c615104565b73ffffffffffffffffffffffffffffffffffffffff16637ab71c2d826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129e09190616456565b60206040518083038186803b1580156129f857600080fd5b505afa158015612a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a30919081019061623d565b600014612b156040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b025780601f10612ad757610100808354040283529160200191612b02565b820191906000526020600020905b815481529060010190602001808311612ae557829003601f168201915b505050505061503890919063ffffffff16565b901515612b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4f91906167f3565b60405180910390fd5b50612b61615104565b73ffffffffffffffffffffffffffffffffffffffff16635c60f226826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bb59190616456565b600060405180830381600087803b158015612bcf57600080fd5b505af1158015612be3573d6000803e3d6000fd5b5050505050565b612bf2615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152","600401612c469190616456565b60206040518083038186803b158015612c5e57600080fd5b505afa158015612c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c9691908101906161aa565b612d786040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d655780601f10612d3a57610100808354040283529160200191612d65565b820191906000526020600020905b815481529060010190602001808311612d4857829003601f168201915b505050505061503890919063ffffffff16565b901515612dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612db291906167f3565b60405180910390fd5b50612dc4615104565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e189190616456565b60206040518083038186803b158015612e3057600080fd5b505afa158015612e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e68919081019061623d565b811015612f3160606040519081016040528060228152602001616af66022913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f1e5780601f10612ef357610100808354040283529160200191612f1e565b820191906000526020600020905b815481529060010190602001808311612f0157829003601f168201915b505050505061503890919063ffffffff16565b901515612f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f6b91906167f3565b60405180910390fd5b50612f7d615104565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612fd39291906165f8565b600060405180830381600087803b158015612fed57600080fd5b505af1158015613001573d6000803e3d6000fd5b505050505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561309f5780601f106130745761010080835404028352916020019161309f565b820191906000526020600020905b81548152906001019060200180831161308257829003601f168201915b505050505081565b60006130b1615104565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131059190616456565b60206040518083038186803b15801561311d57600080fd5b505afa158015613131573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613155919081019061623d565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461328f6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561327c5780601f106132515761010080835404028352916020019161327c565b820191906000526020600020905b81548152906001019060200180831161325f57829003601f168201915b505050505061503890919063ffffffff16565b9015156132d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132c991906167f3565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161334a9190616705565b60206040518083038186803b15801561336257600080fd5b505afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061339a9190810190615de5565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613448615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161349c9190616456565b60206040518083038186803b1580156134b457600080fd5b505afa1580156134c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134ec91908101906161aa565b6135ce6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135bb5780601f10613590576101008083540402835291602001916135bb565b820191906000526020600020905b81548152906001019060200180831161359e57829003601f168201915b505050505061503890919063ffffffff16565b901515613611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360891906167f3565b60405180910390fd5b5061361a615104565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613672939291906164a8565b60206040518083038186803b15801561368a57600080fd5b505afa15801561369e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136c291908101906161aa565b6137a46040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137915780601f1061376657610100808354040283529160200191613791565b820191906000526020600020905b81548152906001019060200180831161377457829003601f168201915b505050505061503890919063ffffffff16565b9015156137e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137de91906167f3565b60405180910390fd5b506137f0615008565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561385157600080fd5b505afa158015613865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613889919081019061623d565b8282905011156139716040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561395e5780601f106139335761010080835404028352916020019161395e565b820191906000526020600020905b81548152906001019060200180831161394157829003601f168201915b505050505061503890919063ffffffff16565b9015156139b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ab91906167f3565b60405180910390fd5b506139bd615104565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f986868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a199594939291906164da565b600060405180830381600087803b158015613a3357600080fd5b505af1158015613a47573d6000803e3d6000fd5b505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613b856040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b725780601f10613b4757610100808354040283529160200191613b72565b820191906000526020600020905b815481529060010190602001808311613b5557829003601f168201915b505050505061503890919063ffffffff16565b901515613bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bbf91906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310","a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613c91615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ce59190616456565b60206040518083038186803b158015613cfd57600080fd5b505afa158015613d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d3591908101906161aa565b613e176040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613e045780601f10613dd957610100808354040283529160200191613e04565b820191906000526020600020905b815481529060010190602001808311613de757829003601f168201915b505050505061503890919063ffffffff16565b901515613e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e5191906167f3565b60405180910390fd5b50613e63615008565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613ec457600080fd5b505afa158015613ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613efc919081019061623d565b828290501115613fe46040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613fd15780601f10613fa657610100808354040283529160200191613fd1565b820191906000526020600020905b815481529060010190602001808311613fb457829003601f168201915b505050505061503890919063ffffffff16565b901515614027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161401e91906167f3565b60405180910390fd5b50614030615104565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614088939291906164a8565b600060405180830381600087803b1580156140a257600080fd5b505af11580156140b6573d6000803e3d6000fd5b50505050505050565b6140c7615104565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161411b9190616456565b60206040518083038186803b15801561413357600080fd5b505afa158015614147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061416b91908101906161aa565b61424d6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561423a5780601f1061420f5761010080835404028352916020019161423a565b820191906000526020600020905b81548152906001019060200180831161421d57829003601f168201915b505050505061503890919063ffffffff16565b901515614290576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161428791906167f3565b60405180910390fd5b50614299615104565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48585856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016142f1939291906164a8565b60206040518083038186803b15801561430957600080fd5b505afa15801561431d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061434191908101906161aa565b6144236040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144105780601f106143e557610100808354040283529160200191614410565b820191906000526020600020905b8154815290600101906020018083116143f357829003601f168201915b505050505061503890919063ffffffff16565b901515614466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161445d91906167f3565b60405180910390fd5b5061446f615104565b73ffffffffffffffffffffffffffffffffffffffff1663af7cdcaf858585856040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016144c99493929190616523565b600060405180830381600087803b1580156144e357600080fd5b505af11580156144f7573d6000803e3d6000fd5b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146146346040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146215780601f106145f657610100808354040283529160200191614621565b820191906000526020600020905b81548152906001019060200180831161460457829003601f168201915b505050505061503890919063ffffffff16565b901515614677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161466e91906167f3565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561476f60606040519081016040528060218152602001616ad56021913960008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561475c5780601f106147315761010080835404028352916020019161475c565b820191906000526020600020905b81548152906001019060200180831161473f57829003601f168201915b505050505061503890919063ffffffff16565b9015156147b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147a991906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61487b615143565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8383876040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148d39392919061675f565b60206040518083038186803b1580156148eb57600080fd5b505afa1580156148ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061492391908101906161aa565b1515614a37576000614933615143565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161498992919061673b565b60206040518083038186803b1580156149a157600080fd5b505afa1580156149b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506149d9919081019061623d565b90506149e585826154ec565b8473ffffffffffffffffffffffffffffffffffffffff167f771ad20575501c8cafc4a8793006515911d6e497fd5838018654c9b50347430c8484604051614a2d92919061673b565b60405180910390a2505b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614b706040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614b5d5780601f10614b3257610100808354040283529160200191614b5d565b820191906000526020600020905b815481529060010190602001808311614b4057829003601f168201915b505050505061503890919063ffffffff16565b901515614bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614baa91906167f3565b60405180910390fd5b5060008090505b600480549050811015614d0b576000600482815481101515614bd857fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000","00000000000000000000000000000000000000028152600401614c5c9190616705565b60206040518083038186803b158015614c7457600080fd5b505afa158015614c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614cac9190810190615de5565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614bba565b50565b60606000614d1a615104565b73ffffffffffffffffffffffffffffffffffffffff1663d752b4ea8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d7293929190616661565b60006040518083038186803b158015614d8a57600080fd5b505afa158015614d9e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614dc79190810190616156565b91509150935093915050565b6060614ddd615104565b73ffffffffffffffffffffffffffffffffffffffff1663d962c33b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e319190616456565b60006040518083038186803b158015614e4957600080fd5b505afa158015614e5d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614e8691908101906161fc565b9050919050565b6060614e97615104565b73ffffffffffffffffffffffffffffffffffffffff1663e2948e3f8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614eef939291906164a8565b60006040518083038186803b158015614f0757600080fd5b505afa158015614f1b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614f4491908101906161fc565b90509392505050565b6000614f57615104565b73ffffffffffffffffffffffffffffffffffffffff1663f71b7abf8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614faf939291906164a8565b60206040518083038186803b158015614fc757600080fd5b505afa158015614fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614fff919081019061623d565b90509392505050565b60006150337f53657474696e670000000000000000000000000000000000000000000000000061583c565b905090565b606082826040516020018083805190602001908083835b602083101515615074578051825260208201915060208101905060208303925061504f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156150c757805182526020820191506020810190506020830392506150a2565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061510e61237a565b905090565b600061513e7f486973746f72790000000000000000000000000000000000000000000000000061583c565b905090565b600061516e7f46696c650000000000000000000000000000000000000000000000000000000061583c565b905090565b60008082840190508381101515156151c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016151b790616845565b60405180910390fd5b8091505092915050565b60006151d4615104565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152289190616456565b60206040518083038186803b15801561524057600080fd5b505afa158015615254573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615278919081019061623d565b90506000615284615104565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152d89190616456565b60206040518083038186803b1580156152f057600080fd5b505afa158015615304573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615328919081019061623d565b905060008311801561533a5750818311155b61540060606040519081016040528060248152602001616ab16024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153ed5780601f106153c2576101008083540402835291602001916153ed565b820191906000526020600020905b8154815290600101906020018083116153d057829003601f168201915b505050505061503890919063ffffffff16565b901515615443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161543a91906167f3565b60405180910390fd5b5061544c615104565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c28561547b8686615a0490919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154b49291906165f8565b600060405180830381600087803b1580156154ce57600080fd5b505af11580156154e2573d6000803e3d6000fd5b5050505050505050565b60006154f6615104565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161554a9190616456565b60206040518083038186803b15801561556257600080fd5b505afa158015615576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061559a919081019061623d565b905060006155a6615104565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155fa9190616456565b60206040518083038186803b15801561561257600080fd5b505afa158015615626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061564a919081019061623d565b905060008311801561566e57508061566b848461517390919063ffffffff16565b11155b6157506040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561573d5780601f106157125761010080835404028352916020019161573d565b820191906000526020600020905b81548152906001019060200180831161572057829003601f168201915b505050505061503890919063ffffffff16565b901515615793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161578a91906167f3565b60405180910390fd5b5061579c615104565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c2856157cb868661517390919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016158049291906165f8565b600060405180830381600087803b15801561581e57600080fd5b505af1158015615832573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156159856040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156159715780601f1061594657610100808354040283529160200191615971565b820191906000526020600020905b81548152906001019060200180831161595457829003601f168201915b5050505050615a4e9092919063ffffffff16565b9015156159c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016159bf91906167f3565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615a4683836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615b23565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615a8b5780518252602082019150602081019050602083039250615a66565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615ade5780518252602082019150602081019050602083039250615ab9565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615b6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615b6491906167f3565b60405180910390fd5b5060008385039050809150509392505050565b6000615b8c82356169f5565b905092915050565b6000615ba082516169f5565b905092915050565b600082601f8301121515615bbb57600080fd5b8151615bce615bc9826168ad565b616880565b9150818183526020840193506020810190508360005b83811015615c145781518601615bfa8882615c92565b845260208401935060208301925050600181019050615be4565b5050505092915050565b6000615c2a8251616a07565b905092915050565b6000615c3e8235","616a13565b905092915050565b60008083601f8401121515615c5a57600080fd5b8235905067ffffffffffffffff811115615c7357600080fd5b602083019150836001820283011115615c8b57600080fd5b9250929050565b600082601f8301121515615ca557600080fd5b8151615cb8615cb3826168d5565b616880565b91508082526020830160208301858383011115615cd457600080fd5b615cdf838284616a6c565b50505092915050565b600082601f8301121515615cfb57600080fd5b8135615d0e615d0982616901565b616880565b91508082526020830160208301858383011115615d2a57600080fd5b615d35838284616a5d565b50505092915050565b600082601f8301121515615d5157600080fd5b8151615d64615d5f82616901565b616880565b91508082526020830160208301858383011115615d8057600080fd5b615d8b838284616a6c565b50505092915050565b6000615da08235616a1d565b905092915050565b6000615db48251616a1d565b905092915050565b600060208284031215615dce57600080fd5b6000615ddc84828501615b80565b91505092915050565b600060208284031215615df757600080fd5b6000615e0584828501615b94565b91505092915050565b60008060008060608587031215615e2457600080fd5b6000615e3287828801615b80565b9450506020615e4387828801615b80565b935050604085013567ffffffffffffffff811115615e6057600080fd5b615e6c87828801615c46565b925092505092959194509250565b600080600060408486031215615e8f57600080fd5b6000615e9d86828701615b80565b935050602084013567ffffffffffffffff811115615eba57600080fd5b615ec686828701615c46565b92509250509250925092565b600080600080600060608688031215615eea57600080fd5b6000615ef888828901615b80565b955050602086013567ffffffffffffffff811115615f1557600080fd5b615f2188828901615c46565b9450945050604086013567ffffffffffffffff811115615f4057600080fd5b615f4c88828901615c46565b92509250509295509295909350565b60008060008060608587031215615f7157600080fd5b6000615f7f87828801615b80565b945050602085013567ffffffffffffffff811115615f9c57600080fd5b615fa887828801615c46565b93509350506040615fbb87828801615d94565b91505092959194509250565b600080600080600080600060a0888a031215615fe257600080fd5b6000615ff08a828b01615b80565b975050602088013567ffffffffffffffff81111561600d57600080fd5b6160198a828b01615c46565b9650965050604061602c8a828b01615d94565b945050606061603d8a828b01615d94565b935050608088013567ffffffffffffffff81111561605a57600080fd5b6160668a828b01615c46565b925092505092959891949750929550565b6000806040838503121561608a57600080fd5b600061609885828601615b80565b925050602083013567ffffffffffffffff8111156160b557600080fd5b6160c185828601615ce8565b9150509250929050565b600080604083850312156160de57600080fd5b60006160ec85828601615b80565b92505060206160fd85828601615d94565b9150509250929050565b60008060006060848603121561611c57600080fd5b600061612a86828701615b80565b935050602061613b86828701615d94565b925050604061614c86828701615d94565b9150509250925092565b6000806040838503121561616957600080fd5b600083015167ffffffffffffffff81111561618357600080fd5b61618f85828601615ba8565b92505060206161a085828601615c1e565b9150509250929050565b6000602082840312156161bc57600080fd5b60006161ca84828501615c1e565b91505092915050565b6000602082840312156161e557600080fd5b60006161f384828501615c32565b91505092915050565b60006020828403121561620e57600080fd5b600082015167ffffffffffffffff81111561622857600080fd5b61623484828501615d3e565b91505092915050565b60006020828403121561624f57600080fd5b600061625d84828501615da8565b91505092915050565b61626f8161698d565b82525050565b600061628082616947565b8084526020840193506162928361692d565b60005b828110156162c4576162a886835161634d565b6162b182616973565b9150602086019550600181019050616295565b50849250505092915050565b60006162db82616952565b808452602084019350836020820285016162f48561693a565b60005b8481101561632d57838303885261630f8383516163da565b925061631a82616980565b91506020880197506001810190506162f7565b508196508694505050505092915050565b6163478161699f565b82525050565b616356816169ab565b82525050565b61636581616a27565b82525050565b61637481616a4b565b82525050565b6000828452602084019350616390838584616a5d565b61639983616a9f565b840190509392505050565b60006163af82616968565b8084526163c3816020860160208601616a6c565b6163cc81616a9f565b602085010191505092915050565b60006163e58261695d565b8084526163f9816020860160208601616a6c565b61640281616a9f565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b616450816169eb565b82525050565b600060208201905061646b6000830184616266565b92915050565b60006060820190506164866000830186616266565b616493602083018561636b565b6164a0604083018461634d565b949350505050565b60006040820190506164bd6000830186616266565b81810360208301526164d081848661637a565b9050949350505050565b60006060820190506164ef6000830188616266565b818103602083015261650281868861637a565b9050818103604083015261651781848661637a565b90509695505050505050565b60006060820190506165386000830187616266565b818103602083015261654b81858761637a565b905061655a6040830184616447565b95945050505050565b600060a082019050616578600083018a616266565b818103602083015261658b81888a61637a565b905061659a6040830187616447565b81810360608301526165ad81858761637a565b90506165bc6080830184616447565b98975050505050505050565b60006040820190506165dd6000830185616266565b81810360208301526165ef81846163a4565b90509392505050565b600060408201905061660d6000830185616266565b61661a6020830184616447565b9392505050565b60006060820190506166366000830187616266565b6166436020830186616447565b818103604083015261665681848661637a565b905095945050505050565b60006060820190506166766000830186616266565b6166836020830185616447565b6166906040830184616447565b949350505050565b600060208201905081810360008301526166b28184616275565b905092915050565b600060408201905081810360008301526166d481856162d0565b90506166e3602083018461633e565b9392505050565b60006020820190506166ff600083018461633e565b92915050565b600060208201905061671a600083018461634d565b92915050565b6000602082019050616735600083018461635c565b92915050565b6000602082019050818103600083015261675681848661637a565b90509392505050565b6000604082019050818103600083015261677a81858761637a565b90506167896020830184616266565b949350505050565b600060608201905081810360008301526167ac81868861637a565b90506167bb6020830185616447565b6167c86040830184616266565b95945050505050565b600060208201905081810360008301526167eb81846163da565b905092915050565b6000602082019050818103600083015261680d81846163a4565b905092915050565b6000604082019050818103600083015261682f81856163a4565b905061683e6020830184616266565b9392505050565b6000602082019050818103600083015261685e81616410565b9050919050565b600060208201905061687a6000830184616447565b92915050565b6000604051905081810181811067ffffffffffffffff821117156168a357600080fd5b8060405250919050565b600067ffffffffffffffff8211156168c457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156168ec57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561691857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000616998826169cb565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156169c357fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000616a00826169cb565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000616a3282616a39565b9050919050565b6000616a44826169cb565b9050919050565b6000616a56826169b5565b9050919050565b82818337600083830152505050565b60005b83811015616a8a578082015181840152602081019050616a6f565b83811115616a99576000848401525b50505050565b6000601f19601f830116905091905056fe667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f20616464726573733a2063616e206e6f74206c6974746c65207468616e2073746f726167652075736564a265627a7a72305820ddb4c5665c8748a0a154382823d8f9c065919f4d7058a85b05617e2dcebbad356c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405160208062006f17833981018060405262000033919081019062000342565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001327f5573657200000000000000000000000000000000000000000000000000000000620001c8640100000000026401000000009004565b6060604051908101604052807f53657474696e670000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081526020017f486973746f7279000000000000000000000000000000000000000000000000008152506004906003620001c092919062000203565b5050620003b6565b806040516020018082815260200191505060405160208183030381529060405260009080519060200190620001ff92919062000255565b5050565b82805482825590600052602060002090810192821562000242579160200282015b828111156200024157825182559160200191906001019062000224565b5b509050620002519190620002dc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029857805160ff1916838001178555620002c9565b82800160010185558215620002c9579182015b82811115620002c8578251825591602001919060010190620002ab565b5b509050620002d8919062000304565b5090565b6200030191905b80821115620002fd576000816000905550600101620002e3565b5090565b90565b6200032991905b80821115620003255760008160009055506001016200030b565b5090565b90565b60006200033a8251620003a2565b905092915050565b6000602082840312156200035557600080fd5b600062000365848285016200032c565b91505092915050565b60006200037b8262000382565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003af826200036e565b9050919050565b616b5180620003c66000396000f3fe6080604052600436106101f5576000357c0100000000000000000000000000000000000000000000000000000000900480637d0722521161011f578063c116b3ba116100b2578063dd5e5c0111610081578063dd5e5c01146106e7578063e461abb614610725578063f9de6e851461074e578063facc639614610765576101f5565b8063c116b3ba14610619578063c14bb7f914610656578063c22931691461067f578063d0613a5f146106aa576101f5565b8063ab3da81c116100ee578063ab3da81c1461054b578063b722765a14610588578063bf46bf65146105b3578063c0c22a62146105dc576101f5565b80637d072252146104a7578063856101ec146104d057806391726a99146104f9578063977b659014610522576101f5565b8063489b5766116101975780636e1f75ad116101665780636e1f75ad146103d95780636f0eae41146104045780637279e3cd1461042d57806376e1fbb21461046a576101f5565b8063489b5766146103315780635089e2c81461035c5780636b58506b146103875780636bddd7ba146103b0576101f5565b806319d30ca3116101d357806319d30ca3146102775780631db0dbc9146102a05780633a52a796146102cb5780633eab5fba146102f4576101f5565b806305282c70146101fa5780630ec991c21461022357806310faa2de1461024e575b600080fd5b34801561020657600080fd5b50610221600480360361021c9190810190615dbc565b61078e565b005b34801561022f57600080fd5b50610238610b1c565b6040516102459190616456565b60405180910390f35b34801561025a57600080fd5b5061027560048036036102709190810190615e0e565b610b42565b005b34801561028357600080fd5b5061029e60048036036102999190810190615e0e565b610d0c565b005b3480156102ac57600080fd5b506102b5610e1f565b6040516102c29190616698565b60405180910390f35b3480156102d757600080fd5b506102f260048036036102ed9190810190615ed2565b610e77565b005b34801561030057600080fd5b5061031b60048036036103169190810190615dbc565b611489565b60405161032891906167f3565b60405180910390f35b34801561033d57600080fd5b50610346611543565b6040516103539190616865565b60405180910390f35b34801561036857600080fd5b506103716115eb565b60405161037e9190616456565b60405180910390f35b34801561039357600080fd5b506103ae60048036036103a991908101906161d3565b611611565b005b3480156103bc57600080fd5b506103d760048036036103d29190810190615f5b565b6118cf565b005b3480156103e557600080fd5b506103ee611d11565b6040516103fb9190616456565b60405180910390f35b34801561041057600080fd5b5061042b600480360361042691908101906160cb565b611eb3565b005b34801561043957600080fd5b50610454600480360361044f9190810190615dbc565b6122d2565b6040516104619190616865565b60405180910390f35b34801561047657600080fd5b50610491600480360361048c9190810190615e7a565b612387565b60405161049e9190616865565b60405180910390f35b3480156104b357600080fd5b506104ce60048036036104c99190810190616077565b612442565b005b3480156104dc57600080fd5b506104f760048036036104f29190810190615e7a565b61299f565b005b34801561050557600080fd5b50610520600480360361051b9190810190615dbc565b612e78565b005b34801561052e57600080fd5b5061054960048036036105449190810190615e7a565b6131ea565b005b34801561055757600080fd5b50610572600480360361056d9190810190615e7a565b613620565b60405161057f91906167f3565b60405180910390f35b34801561059457600080fd5b5061059d6136e0565b6040516105aa9190616720565b60405180910390f35b3480156105bf57600080fd5b506105da60048036036105d59190810190615dbc565b613706565b005b3480156105e857600080fd5b5061060360048036036105fe91908101906161d3565b613b3e565b6040516106109190616456565b60405180910390f35b34801561062557600080fd5b50610640600480360361063b9190810190615dbc565b613b7b565b60405161064d91906166ea565b60405180910390f35b34801561066257600080fd5b5061067d60048036036106789190810190615e7a565b613c30565b005b34801561068b57600080fd5b50610694613e90565b6040516106a191906167d1565b60405180910390f35b3480156106b657600080fd5b506106d160048036036106cc9190810190615dbc565b613f2e565b6040516106de9190616865565b60405180910390f35b3480156106f357600080fd5b5061070e60048036036107099190810190616107565b613fe3565b60405161071c9291906166ba565b60405180910390f35b34801561073157600080fd5b5061074c60048036036107479190810190615fc7565b6140a8565b005b34801561075a57600080fd5b50610763614b00565b005b34801561077157600080fd5b5061078c60048036036107879190810190615dbc565b614dd1565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108c16040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ae5780601f10610883576101008083540402835291602001916108ae565b820191906000526020600020905b81548152906001019060200180831161089157829003601f168201915b505050505061500890919063ffffffff16565b901515610904576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016108fb91906167f3565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a186040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a055780601f106109da57610100808354040283529160200191610a05565b820191906000526020600020905b8154815290600101906020018083116109e857829003601f168201915b505050505061500890919063ffffffff16565b901515610a5b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a5291906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b4a6150d4565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8383876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ba29392919061675f565b60206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bf291908101906161aa565b1515610d06576000610c026150d4565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c010000000000000000000000000000","0000000000000000000000000000028152600401610c5892919061673b565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca8919081019061623d565b9050610cb48582615104565b8473ffffffffffffffffffffffffffffffffffffffff167f6f411a893c5fa52ce58a412de25a2950f640906d934006f21bf08aa2552af5b88484604051610cfc92919061673b565b60405180910390a2505b50505050565b6000610d166150d4565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d6c92919061673b565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dbc919081019061623d565b9050610dc88582615454565b8473ffffffffffffffffffffffffffffffffffffffff167fe89d203d7f352b2dce5ab22578a1506f4dd0ec30c398151d94c52d422608c7bb8484604051610e1092919061673b565b60405180910390a25050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610e6d57602002820191906000526020600020905b815481526020019060010190808311610e59575b5050505050905090565b610e7f615776565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ed39190616456565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f2391908101906161aa565b6110056040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ff25780601f10610fc757610100808354040283529160200191610ff2565b820191906000526020600020905b815481529060010190602001808311610fd557829003601f168201915b505050505061500890919063ffffffff16565b901515611048576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161103f91906167f3565b60405180910390fd5b50611051615776565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28686866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110a9939291906164a8565b60206040518083038186803b1580156110c157600080fd5b505afa1580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110f991908101906161aa565b6111db6040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111c85780601f1061119d576101008083540402835291602001916111c8565b820191906000526020600020905b8154815290600101906020018083116111ab57829003601f168201915b505050505061500890919063ffffffff16565b90151561121e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161121591906167f3565b60405180910390fd5b50611227615785565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561128857600080fd5b505afa15801561129c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c0919081019061623d565b8282905011156113a86040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113955780601f1061136a57610100808354040283529160200191611395565b820191906000526020600020905b81548152906001019060200180831161137857829003601f168201915b505050505061500890919063ffffffff16565b9015156113eb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016113e291906167f3565b60405180910390fd5b506113f4615776565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79686868686866040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114509594939291906164da565b600060405180830381600087803b15801561146a57600080fd5b505af115801561147e573d6000803e3d6000fd5b505050505050505050565b6060611493615776565b73ffffffffffffffffffffffffffffffffffffffff16633eab5fba836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114e79190616456565b60006040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061153c91908101906161fc565b9050919050565b600061154d615776565b73ffffffffffffffffffffffffffffffffffffffff1663489b57666040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e6919081019061623d565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117446040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117315780601f1061170657610100808354040283529160200191611731565b820191906000526020600020905b81548152906001019060200180831161171457829003601f168201915b505050505061500890919063ffffffff16565b901515611787576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161177e91906167f3565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117ff9190616705565b60206040518083038186803b15801561181757600080fd5b505afa15801561182b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061184f9190810190615de5565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6118d7615776565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161192b9190616456565b60206040518083038186803b15801561194357600080fd5b505afa158015611957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061197b91908101906161aa565b611a5d6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a4a5780601f10611a1f57610100808354040283529160200191611a4a565b820191906000526020600020905b815481529060010190602001808311611a2d57829003601f168201915b505050505061500890919063ffffffff16565b901515611aa0576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a9791906167f3565b60405180910390fd5b50611aa9615776565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b01939291906164a8565b60206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b5191908101906161aa565b611c336040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c205780601f10611bf557610100808354040283529160200191611c20565b820191906000526020600020905b815481529060010190602001808311611c0357829003601f168201915b505050505061500890919063ffffffff16565b901515611c76","","20746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ce85780601f10612cbd57610100808354040283529160200191612ce8565b820191906000526020600020905b815481529060010190602001808311612ccb57829003601f168201915b505050505061500890919063ffffffff16565b901515612d3e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d3591906167f3565b60405180910390fd5b50612d47615776565b73ffffffffffffffffffffffffffffffffffffffff1663fcdce00184612d6b615785565b73ffffffffffffffffffffffffffffffffffffffff1663dfde08506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612dcc57600080fd5b505afa158015612de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e04919081019061623d565b85856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e419493929190616621565b600060405180830381600087803b158015612e5b57600080fd5b505af1158015612e6f573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612fab6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f985780601f10612f6d57610100808354040283529160200191612f98565b820191906000526020600020905b815481529060010190602001808311612f7b57829003601f168201915b505050505061500890919063ffffffff16565b901515612fee576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612fe591906167f3565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156130e660606040519081016040528060218152602001616af76021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130d35780601f106130a8576101008083540402835291602001916130d3565b820191906000526020600020905b8154815290600101906020018083116130b657829003601f168201915b505050505061500890919063ffffffff16565b901515613129576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161312091906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6131f2615776565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132469190616456565b60206040518083038186803b15801561325e57600080fd5b505afa158015613272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061329691908101906161aa565b6133786040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133655780601f1061333a57610100808354040283529160200191613365565b820191906000526020600020905b81548152906001019060200180831161334857829003601f168201915b505050505061500890919063ffffffff16565b9015156133bb576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016133b291906167f3565b60405180910390fd5b506133c4615785565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561342557600080fd5b505afa158015613439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061345d919081019061623d565b8282905011156135456040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135325780601f1061350757610100808354040283529160200191613532565b820191906000526020600020905b81548152906001019060200180831161351557829003601f168201915b505050505061500890919063ffffffff16565b901515613588576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161357f91906167f3565b60405180910390fd5b50613591615776565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135e9939291906164a8565b600060405180830381600087803b15801561360357600080fd5b505af1158015613617573d6000803e3d6000fd5b50505050505050565b606061362a615776565b73ffffffffffffffffffffffffffffffffffffffff1663ab3da81c8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613682939291906164a8565b60006040518083038186803b15801561369a57600080fd5b505afa1580156136ae573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506136d791908101906161fc565b90509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61370e615776565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016137629190616456565b60206040518083038186803b15801561377a57600080fd5b505afa15801561378e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506137b291908101906161aa565b6138946040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138815780601f1061385657610100808354040283529160200191613881565b820191906000526020600020905b81548152906001019060200180831161386457829003601f168201915b505050505061500890919063ffffffff16565b9015156138d7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138ce91906167f3565b60405180910390fd5b506138e0615776565b73ffffffffffffffffffffffffffffffffffffffff1663e5fb9235826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139349190616456565b60206040518083038186803b15801561394c57600080fd5b505afa158015613960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613984919081019061623d565b600014613a696040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a565780601f10613a2b57610100808354040283529160200191613a56565b820191906000526020600020905b815481529060010190602001808311613a3957829003601f168201915b505050505061500890919063ffffffff16565b901515613aac576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613aa391906167f3565b60405180910390fd5b50613ab5615776565b73ffffffffffffffffffffffffffffffffffffffff166380c2e0af826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613b099190616456565b600060405180830381600087803b158015613b2357600080fd5b505af1158015613b37573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613b85615776565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613bd99190616456565b60206040518083038186803b158015613bf157600080fd5b505afa158015613c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613c2991908101906161aa565b9050919050565b613c386150d4565b73","ffffffffffffffffffffffffffffffffffffffff166356d592bd8383866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c909392919061675f565b60206040518083038186803b158015613ca857600080fd5b505afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613ce091908101906161aa565b1515613e8b576000613cf0615776565b73ffffffffffffffffffffffffffffffffffffffff1663bfcef9e9856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d449190616456565b60206040518083038186803b158015613d5c57600080fd5b505afa158015613d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d94919081019061623d565b9050613d9e615776565b73ffffffffffffffffffffffffffffffffffffffff1663e4b760e985613dce6001856157e590919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613e079291906165f8565b600060405180830381600087803b158015613e2157600080fd5b505af1158015613e35573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f45e753cf5e33480d22f1b8a971ba76fa905f565f7d0f11f59aee3a5abdd60ea48484604051613e8192919061673b565b60405180910390a2505b505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f265780601f10613efb57610100808354040283529160200191613f26565b820191906000526020600020905b815481529060010190602001808311613f0957829003601f168201915b505050505081565b6000613f38615776565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f8c9190616456565b60206040518083038186803b158015613fa457600080fd5b505afa158015613fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fdc919081019061623d565b9050919050565b60606000613fef615776565b73ffffffffffffffffffffffffffffffffffffffff1663dd5e5c018686866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161404793929190616661565b60006040518083038186803b15801561405f57600080fd5b505afa158015614073573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061409c9190810190616156565b91509150935093915050565b6000841161418e6040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561417b5780601f106141505761010080835404028352916020019161417b565b820191906000526020600020905b81548152906001019060200180831161415e57829003601f168201915b505050505061500890919063ffffffff16565b9015156141d1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016141c891906167f3565b60405180910390fd5b506141da615785565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561423b57600080fd5b505afa15801561424f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614273919081019061623d565b82829050111561435b6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143485780601f1061431d57610100808354040283529160200191614348565b820191906000526020600020905b81548152906001019060200180831161432b57829003601f168201915b505050505061500890919063ffffffff16565b90151561439e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161439591906167f3565b60405180910390fd5b506143a7615785565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561440857600080fd5b505afa15801561441c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614440919081019061623d565b8686905011156145286040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145155780601f106144ea57610100808354040283529160200191614515565b820191906000526020600020905b8154815290600101906020018083116144f857829003601f168201915b505050505061500890919063ffffffff16565b90151561456b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161456291906167f3565b60405180910390fd5b50614574615776565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28888886040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016145cc939291906164a8565b60206040518083038186803b1580156145e457600080fd5b505afa1580156145f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061461c91908101906161aa565b156146ff6040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146ec5780601f106146c1576101008083540402835291602001916146ec565b820191906000526020600020905b8154815290600101906020018083116146cf57829003601f168201915b505050505061500890919063ffffffff16565b901515614742576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161473991906167f3565b60405180910390fd5b508361474c615776565b73ffffffffffffffffffffffffffffffffffffffff1663c54d1788896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016147a09190616456565b60206040518083038186803b1580156147b857600080fd5b505afa1580156147cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506147f0919081019061623d565b10156148d46040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148c15780601f10614896576101008083540402835291602001916148c1565b820191906000526020600020905b8154815290600101906020018083116148a457829003601f168201915b505050505061500890919063ffffffff16565b901515614917576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161490e91906167f3565b60405180910390fd5b506149206157b5565b73ffffffffffffffffffffffffffffffffffffffff16637bf378c1886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161499793929190616471565b600060405180830381600087803b1580156149b157600080fd5b505af11580156149c5573d6000803e3d6000fd5b505050506149d16150d4565b73ffffffffffffffffffffffffffffffffffffffff16636ae64dee8787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a2b9493929190616791565b600060405180830381600087803b158015614a4557600080fd5b505af1158015614a59573d6000803e3d6000fd5b50505050614a65615776565b73ffffffffffffffffffffffffffffffffffffffff1663c2a6d025888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ac59796959493929190616563565b600060405180830381600087803b158015614adf57600080fd5b505af1158015614af3573d6000803e3d6000fd5b5050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614c336040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614c205780601f10614bf557610100808354040283529160200191614c20565b820191906000526020600020905b815481529060010190602001808311614c0357829003601f168201915b505050505061500890919063ffffffff16565b901515614c76","576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614c6d91906167f3565b60405180910390fd5b5060008090505b600480549050811015614dce576000600482815481101515614c9b57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d1f9190616705565b60206040518083038186803b158015614d3757600080fd5b505afa158015614d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d6f9190810190615de5565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614c7d565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614f046040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614ef15780601f10614ec657610100808354040283529160200191614ef1565b820191906000526020600020905b815481529060010190602001808311614ed457829003601f168201915b505050505061500890919063ffffffff16565b901515614f47576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614f3e91906167f3565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606082826040516020018083805190602001908083835b602083101515615044578051825260208201915060208101905060208303925061501f565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156150975780518252602082019150602081019050602083039250615072565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006150ff7f46696c650000000000000000000000000000000000000000000000000000000061583c565b905090565b600061510e615776565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016151629190616456565b60206040518083038186803b15801561517a57600080fd5b505afa15801561518e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506151b2919081019061623d565b905060006151be615776565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152129190616456565b60206040518083038186803b15801561522a57600080fd5b505afa15801561523e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615262919081019061623d565b905060008311801561528657508061528384846157e590919063ffffffff16565b11155b6153686040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153555780601f1061532a57610100808354040283529160200191615355565b820191906000526020600020905b81548152906001019060200180831161533857829003601f168201915b505050505061500890919063ffffffff16565b9015156153ab576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016153a291906167f3565b60405180910390fd5b506153b4615776565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f0856153e386866157e590919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161541c9291906165f8565b600060405180830381600087803b15801561543657600080fd5b505af115801561544a573d6000803e3d6000fd5b5050505050505050565b600061545e615776565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154b29190616456565b60206040518083038186803b1580156154ca57600080fd5b505afa1580156154de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615502919081019061623d565b9050600061550e615776565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155629190616456565b60206040518083038186803b15801561557a57600080fd5b505afa15801561558e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506155b2919081019061623d565b90506000831180156155c45750818311155b61568a60606040519081016040528060248152602001616ad36024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156156775780601f1061564c57610100808354040283529160200191615677565b820191906000526020600020905b81548152906001019060200180831161565a57829003601f168201915b505050505061500890919063ffffffff16565b9015156156cd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016156c491906167f3565b60405180910390fd5b506156d6615776565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f0856157058686615a0490919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161573e9291906165f8565b600060405180830381600087803b15801561575857600080fd5b505af115801561576c573d6000803e3d6000fd5b5050505050505050565b6000615780611d11565b905090565b60006157b07f53657474696e670000000000000000000000000000000000000000000000000061583c565b905090565b60006157e07f486973746f72790000000000000000000000000000000000000000000000000061583c565b905090565b6000808284019050838110151515615832576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161582990616845565b60405180910390fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156159856040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156159715780601f1061594657610100808354040283529160200191615971565b820191906000526020600020905b81548152906001019060200180831161595457829003601f168201915b5050505050615a4e9092919063ffffffff16565b9015156159c8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016159bf91906167f3565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615a4683836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615b23565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615a8b5780518252602082019150602081019050602083039250615a66565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615ade5780518252602082019150602081019050602083039250615ab9565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615b6d576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615b6491906167f3565b60405180910390fd5b5060008385039050809150509392505050565b6000615b8c82356169f5565b905092915050565b6000615ba082516169f5565b905092915050565b600082601f8301121515615bbb57600080fd5b8151615bce615bc9826168ad565b616880565b9150818183526020840193506020810190508360005b83811015615c145781518601615bfa8882615c92565b845260208401935060208301925050600181019050615be4565b5050505092915050565b6000615c2a8251616a07565b905092915050565b6000615c3e8235","616a13565b905092915050565b60008083601f8401121515615c5a57600080fd5b8235905067ffffffffffffffff811115615c7357600080fd5b602083019150836001820283011115615c8b57600080fd5b9250929050565b600082601f8301121515615ca557600080fd5b8151615cb8615cb3826168d5565b616880565b91508082526020830160208301858383011115615cd457600080fd5b615cdf838284616a6c565b50505092915050565b600082601f8301121515615cfb57600080fd5b8135615d0e615d0982616901565b616880565b91508082526020830160208301858383011115615d2a57600080fd5b615d35838284616a5d565b50505092915050565b600082601f8301121515615d5157600080fd5b8151615d64615d5f82616901565b616880565b91508082526020830160208301858383011115615d8057600080fd5b615d8b838284616a6c565b50505092915050565b6000615da08235616a1d565b905092915050565b6000615db48251616a1d565b905092915050565b600060208284031215615dce57600080fd5b6000615ddc84828501615b80565b91505092915050565b600060208284031215615df757600080fd5b6000615e0584828501615b94565b91505092915050565b60008060008060608587031215615e2457600080fd5b6000615e3287828801615b80565b9450506020615e4387828801615b80565b935050604085013567ffffffffffffffff811115615e6057600080fd5b615e6c87828801615c46565b925092505092959194509250565b600080600060408486031215615e8f57600080fd5b6000615e9d86828701615b80565b935050602084013567ffffffffffffffff811115615eba57600080fd5b615ec686828701615c46565b92509250509250925092565b600080600080600060608688031215615eea57600080fd5b6000615ef888828901615b80565b955050602086013567ffffffffffffffff811115615f1557600080fd5b615f2188828901615c46565b9450945050604086013567ffffffffffffffff811115615f4057600080fd5b615f4c88828901615c46565b92509250509295509295909350565b60008060008060608587031215615f7157600080fd5b6000615f7f87828801615b80565b945050602085013567ffffffffffffffff811115615f9c57600080fd5b615fa887828801615c46565b93509350506040615fbb87828801615d94565b91505092959194509250565b600080600080600080600060a0888a031215615fe257600080fd5b6000615ff08a828b01615b80565b975050602088013567ffffffffffffffff81111561600d57600080fd5b6160198a828b01615c46565b9650965050604061602c8a828b01615d94565b945050606061603d8a828b01615d94565b935050608088013567ffffffffffffffff81111561605a57600080fd5b6160668a828b01615c46565b925092505092959891949750929550565b6000806040838503121561608a57600080fd5b600061609885828601615b80565b925050602083013567ffffffffffffffff8111156160b557600080fd5b6160c185828601615ce8565b9150509250929050565b600080604083850312156160de57600080fd5b60006160ec85828601615b80565b92505060206160fd85828601615d94565b9150509250929050565b60008060006060848603121561611c57600080fd5b600061612a86828701615b80565b935050602061613b86828701615d94565b925050604061614c86828701615d94565b9150509250925092565b6000806040838503121561616957600080fd5b600083015167ffffffffffffffff81111561618357600080fd5b61618f85828601615ba8565b92505060206161a085828601615c1e565b9150509250929050565b6000602082840312156161bc57600080fd5b60006161ca84828501615c1e565b91505092915050565b6000602082840312156161e557600080fd5b60006161f384828501615c32565b91505092915050565b60006020828403121561620e57600080fd5b600082015167ffffffffffffffff81111561622857600080fd5b61623484828501615d3e565b91505092915050565b60006020828403121561624f57600080fd5b600061625d84828501615da8565b91505092915050565b61626f8161698d565b82525050565b600061628082616947565b8084526020840193506162928361692d565b60005b828110156162c4576162a886835161634d565b6162b182616973565b9150602086019550600181019050616295565b50849250505092915050565b60006162db82616952565b808452602084019350836020820285016162f48561693a565b60005b8481101561632d57838303885261630f8383516163da565b925061631a82616980565b91506020880197506001810190506162f7565b508196508694505050505092915050565b6163478161699f565b82525050565b616356816169ab565b82525050565b61636581616a27565b82525050565b61637481616a4b565b82525050565b6000828452602084019350616390838584616a5d565b61639983616a9f565b840190509392505050565b60006163af82616968565b8084526163c3816020860160208601616a6c565b6163cc81616a9f565b602085010191505092915050565b60006163e58261695d565b8084526163f9816020860160208601616a6c565b61640281616a9f565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b616450816169eb565b82525050565b600060208201905061646b6000830184616266565b92915050565b60006060820190506164866000830186616266565b616493602083018561636b565b6164a0604083018461634d565b949350505050565b60006040820190506164bd6000830186616266565b81810360208301526164d081848661637a565b9050949350505050565b60006060820190506164ef6000830188616266565b818103602083015261650281868861637a565b9050818103604083015261651781848661637a565b90509695505050505050565b60006060820190506165386000830187616266565b818103602083015261654b81858761637a565b905061655a6040830184616447565b95945050505050565b600060a082019050616578600083018a616266565b818103602083015261658b81888a61637a565b905061659a6040830187616447565b81810360608301526165ad81858761637a565b90506165bc6080830184616447565b98975050505050505050565b60006040820190506165dd6000830185616266565b81810360208301526165ef81846163a4565b90509392505050565b600060408201905061660d6000830185616266565b61661a6020830184616447565b9392505050565b60006060820190506166366000830187616266565b6166436020830186616447565b818103604083015261665681848661637a565b905095945050505050565b60006060820190506166766000830186616266565b6166836020830185616447565b6166906040830184616447565b949350505050565b600060208201905081810360008301526166b28184616275565b905092915050565b600060408201905081810360008301526166d481856162d0565b90506166e3602083018461633e565b9392505050565b60006020820190506166ff600083018461633e565b92915050565b600060208201905061671a600083018461634d565b92915050565b6000602082019050616735600083018461635c565b92915050565b6000602082019050818103600083015261675681848661637a565b90509392505050565b6000604082019050818103600083015261677a81858761637a565b90506167896020830184616266565b949350505050565b600060608201905081810360008301526167ac81868861637a565b90506167bb6020830185616447565b6167c86040830184616266565b95945050505050565b600060208201905081810360008301526167eb81846163da565b905092915050565b6000602082019050818103600083015261680d81846163a4565b905092915050565b6000604082019050818103600083015261682f81856163a4565b905061683e6020830184616266565b9392505050565b6000602082019050818103600083015261685e81616410565b9050919050565b600060208201905061687a6000830184616447565b92915050565b6000604051905081810181811067ffffffffffffffff821117156168a357600080fd5b8060405250919050565b600067ffffffffffffffff8211156168c457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156168ec57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561691857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000616998826169cb565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156169c357fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000616a00826169cb565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000616a3282616a39565b9050919050565b6000616a44826169cb565b9050919050565b6000616a56826169b5565b9050919050565b82818337600083830152505050565b60005b83811015616a8a578082015181840152602081019050616a6f565b83811115616a99576000848401525b50505050565b6000601f19601f830116905091905056fe3a2063616e206e6f74206c6974746c65207468616e2073746f726167652075736564667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a72305820ad9d8a55bd860d7e8d32ba83cce042c393900bbc0d2f2cbb3046e9eb136808626c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFailAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUserNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"changeSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAddFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_CALLBACKFAILADDFILE = "callbackFailAddFile";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_CALLBACKFINISHDELETEFILE = "callbackFinishDeleteFile";

    public static final String FUNC_GETTOTALUSERNUMBER = "getTotalUserNumber";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CHANGESPACE = "changeSpace";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_CALLBACKFINISHADDFILE = "callbackFinishAddFile";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_GETCIDS = "getCids";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETFILEEXT = "getFileExt";

    public static final String FUNC_GETFILEDURATION = "getFileDuration";

    public static final Event FILEADDED_EVENT = new Event("FileAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEADDFAILED_EVENT = new Event("FileAddFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEDELETED_EVENT = new Event("FileDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected User(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String addr, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFailAddFile(String owner, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCallbackFailAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageUsed(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt register(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt callbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishDeleteFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getTotalUserNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALUSERNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String addr) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeSpace(String addr, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getChangeSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGESPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageTotal(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String addr, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String addr, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishAddFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, Boolean> getCids(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String getExt(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getFileExt(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getFileDuration(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<FileAddedEventResponse> getFileAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDED_EVENT, transactionReceipt);
        ArrayList<FileAddedEventResponse> responses = new ArrayList<FileAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddedEventResponse typedResponse = new FileAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileAddFailedEventResponse> getFileAddFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDFAILED_EVENT, transactionReceipt);
        ArrayList<FileAddFailedEventResponse> responses = new ArrayList<FileAddFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddFailedEventResponse typedResponse = new FileAddFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddFailedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddFailedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileDeletedEventResponse> getFileDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEDELETED_EVENT, transactionReceipt);
        ArrayList<FileDeletedEventResponse> responses = new ArrayList<FileDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileDeletedEventResponse typedResponse = new FileDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileDeletedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileDeletedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static User load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new User(contractAddress, client, credential);
    }

    public static User deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(User.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class FileAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileAddFailedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileDeletedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
