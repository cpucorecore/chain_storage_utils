package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String[] BINARY_ARRAY = {"","00028152600401610c4b929190616679565b600060405180830381600087803b158015610c6557600080fd5b505af1158015610c79573d6000803e3d6000fd5b505050506000610c876151f4565b73ffffffffffffffffffffffffffffffffffffffff1663deda6066836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cdb91906168a4565b60206040518083038186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d2b91908101906162ee565b9050610d378382615224565b610d3f6151f4565b73ffffffffffffffffffffffffffffffffffffffff1663ec18665d83856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d959291906168c6565b600060405180830381600087803b158015610daf57600080fd5b505af1158015610dc3573d6000803e3d6000fd5b50505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610e1a57602002820191906000526020600020905b815481526020019060010190808311610e06575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f576040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b50505050506150e990919063ffffffff16565b901515610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9191906168a4565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110ae6040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561109b5780601f106110705761010080835404028352916020019161109b565b820191906000526020600020905b81548152906001019060200180831161107e57829003601f168201915b50505050506150e990919063ffffffff16565b9015156110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e891906168a4565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111ba6151f4565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8383866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161121293929190616810565b60206040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611262919081019061625b565b151561140d5760006112726151b5565b73ffffffffffffffffffffffffffffffffffffffff166347d06153856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112c69190616507565b60206040518083038186803b1580156112de57600080fd5b505afa1580156112f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061131691908101906162ee565b90506113206151b5565b73ffffffffffffffffffffffffffffffffffffffff16634bb75bf08561135060018561554690919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113899291906166a9565b600060405180830381600087803b1580156113a357600080fd5b505af11580156113b7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc6f83b7b2d19b0fcc2cba9d7251b2d607d566fde09f4d53fd69757a10996a68084846040516114039291906167ec565b60405180910390a2505b505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006114596151b5565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114ad9190616507565b60206040518083038186803b1580156114c557600080fd5b505afa1580156114d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114fd91908101906162ee565b9050919050565b600084116115ea6040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115d75780601f106115ac576101008083540402835291602001916115d7565b820191906000526020600020905b8154815290600101906020018083116115ba57829003601f168201915b50505050506150e990919063ffffffff16565b90151561162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162491906168a4565b60405180910390fd5b506116366150b9565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561169757600080fd5b505afa1580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116cf91908101906162ee565b8282905011156117b76040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117a45780601f10611779576101008083540402835291602001916117a4565b820191906000526020600020905b81548152906001019060200180831161178757829003601f168201915b50505050506150e990919063ffffffff16565b9015156117fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f191906168a4565b60405180910390fd5b506118036150b9565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561186457600080fd5b505afa158015611878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061189c91908101906162ee565b8686905011156119846040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119715780601f1061194657610100808354040283529160200191611971565b820191906000526020600020905b81548152906001019060200180831161195457829003601f168201915b50505050506150e990919063ffffffff16565b9015156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be91906168a4565b60405180910390fd5b506119d06151b5565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48888886040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a2893929190616559565b60206040518083038186803b158015611a4057600080fd5b505afa158015611a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a78919081019061625b565b15611b5b6040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b485780601f10611b1d57610100808354040283529160200191611b48565b820191906000526020600020905b815481529060010190602001808311611b2b57829003601f168201915b50505050506150e990919063ffffffff16565b901515611b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9591906168a4565b60405180910390fd5b5083611ba86151b5565b73ffffffffffffffffffffffffffffffffffffffff16637b7483fe896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bfc9190616507565b60206040518083038186803b158015611c1457600080fd5b505afa158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682","018060405250611c4c91908101906162ee565b1015611d306040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d1d5780601f10611cf257610100808354040283529160200191611d1d565b820191906000526020600020905b815481529060010190602001808311611d0057829003601f168201915b50505050506150e990919063ffffffff16565b901515611d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6a91906168a4565b60405180910390fd5b50611d7c6151c4565b73ffffffffffffffffffffffffffffffffffffffff1663d9a19302886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611df393929190616522565b600060405180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b50505050611e2d6151f4565b73ffffffffffffffffffffffffffffffffffffffff1663b0fe21828787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e879493929190616842565b600060405180830381600087803b158015611ea157600080fd5b505af1158015611eb5573d6000803e3d6000fd5b50505050611ec16151b5565b73ffffffffffffffffffffffffffffffffffffffff16633e14fc1b888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611f219796959493929190616614565b600060405180830381600087803b158015611f3b57600080fd5b505af1158015611f4f573d6000803e3d6000fd5b50505050611f5d878561559d565b50505050505050565b611f6e6151b5565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611fc29190616507565b60206040518083038186803b158015611fda57600080fd5b505afa158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612012919081019061625b565b156120f56040805190810160405280600c81526020017f3a2075736572206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e25780601f106120b7576101008083540402835291602001916120e2565b820191906000526020600020905b8154815290600101906020018083116120c557829003601f168201915b50505050506150e990919063ffffffff16565b901515612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f91906168a4565b60405180910390fd5b506121416150b9565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121a257600080fd5b505afa1580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506121da91908101906162ee565b8282905011156122c26040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122af5780601f10612284576101008083540402835291602001916122af565b820191906000526020600020905b81548152906001019060200180831161229257829003601f168201915b50505050506150e990919063ffffffff16565b901515612305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fc91906168a4565b60405180910390fd5b5061230e6151b5565b73ffffffffffffffffffffffffffffffffffffffff16635f4cfd59846123326150b9565b73ffffffffffffffffffffffffffffffffffffffff16635406cbe96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561239357600080fd5b505afa1580156123a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123cb91908101906162ee565b85856040518563ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161240894939291906166d2565b600060405180830381600087803b15801561242257600080fd5b505af1158015612436573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156125756040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125625780601f1061253757610100808354040283529160200191612562565b820191906000526020600020905b81548152906001019060200180831161254557829003601f168201915b50505050506150e990919063ffffffff16565b9015156125b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125af91906168a4565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006125eb6151f4565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016126419291906167ec565b60206040518083038186803b15801561265957600080fd5b505afa15801561266d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061269191908101906162ee565b90508473ffffffffffffffffffffffffffffffffffffffff167f14a51c77a00d5c4c3ccc7a4df74f169088c4d4d04859d176729645e53c7b895c84846040516126db9291906167ec565b60405180910390a25050505050565b60006126f46151b5565b73ffffffffffffffffffffffffffffffffffffffff166347534dac6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561275557600080fd5b505afa158015612769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061278d91908101906162ee565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006127c26151b5565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128169190616507565b60206040518083038186803b15801561282e57600080fd5b505afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612866919081019061625b565b9050919050565b6128756151b5565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128c99190616507565b60206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612919919081019061625b565b6129fb6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129e85780601f106129bd576101008083540402835291602001916129e8565b820191906000526020600020905b8154815290600101906020018083116129cb57829003601f168201915b50505050506150e990919063ffffffff16565b901515612a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3591906168a4565b60405180910390fd5b50612a476151b5565b73ffffffffffffffffffffffffffffffffffffffff16637ab71c2d826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a9b9190616507565b60206040518083038186803b158015612ab357600080fd5b505afa158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612aeb91908101906162ee565b600014612bd06040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bbd5780601f10612b9257610100808354040283529160200191612bbd565b820191906000526020600020905b815481529060010190602001808311612ba057829003601f168201915b50505050506150e990919063ffffffff16565b901515612c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0a91906168a4565b60405180910390fd5b50612c1c6151b5565b73ffffffffffffffffffffffffffffffffffffffff16635c60f2268260","40518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612c709190616507565b600060405180830381600087803b158015612c8a57600080fd5b505af1158015612c9e573d6000803e3d6000fd5b5050505050565b612cad6151b5565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d019190616507565b60206040518083038186803b158015612d1957600080fd5b505afa158015612d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d51919081019061625b565b612e336040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e205780601f10612df557610100808354040283529160200191612e20565b820191906000526020600020905b815481529060010190602001808311612e0357829003601f168201915b50505050506150e990919063ffffffff16565b901515612e76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6d91906168a4565b60405180910390fd5b50612e7f6151b5565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ed39190616507565b60206040518083038186803b158015612eeb57600080fd5b505afa158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612f2391908101906162ee565b811015612fec60606040519081016040528060228152602001616ba76022913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fd95780601f10612fae57610100808354040283529160200191612fd9565b820191906000526020600020905b815481529060010190602001808311612fbc57829003601f168201915b50505050506150e990919063ffffffff16565b90151561302f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302691906168a4565b60405180910390fd5b506130386151b5565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161308e9291906166a9565b600060405180830381600087803b1580156130a857600080fd5b505af11580156130bc573d6000803e3d6000fd5b505050505050565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561315a5780601f1061312f5761010080835404028352916020019161315a565b820191906000526020600020905b81548152906001019060200180831161313d57829003601f168201915b505050505081565b600061316c6151b5565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131c09190616507565b60206040518083038186803b1580156131d857600080fd5b505afa1580156131ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061321091908101906162ee565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461334a6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133375780601f1061330c57610100808354040283529160200191613337565b820191906000526020600020905b81548152906001019060200180831161331a57829003601f168201915b50505050506150e990919063ffffffff16565b90151561338d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338491906168a4565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161340591906167b6565b60206040518083038186803b15801561341d57600080fd5b505afa158015613431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134559190810190615e96565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6135036151b5565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135579190616507565b60206040518083038186803b15801561356f57600080fd5b505afa158015613583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506135a7919081019061625b565b6136896040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136765780601f1061364b57610100808354040283529160200191613676565b820191906000526020600020905b81548152906001019060200180831161365957829003601f168201915b50505050506150e990919063ffffffff16565b9015156136cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136c391906168a4565b60405180910390fd5b506136d56151b5565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48686866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161372d93929190616559565b60206040518083038186803b15801561374557600080fd5b505afa158015613759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061377d919081019061625b565b61385f6040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561384c5780601f106138215761010080835404028352916020019161384c565b820191906000526020600020905b81548152906001019060200180831161382f57829003601f168201915b50505050506150e990919063ffffffff16565b9015156138a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389991906168a4565b60405180910390fd5b506138ab6150b9565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061394491908101906162ee565b828290501115613a2c6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a195780601f106139ee57610100808354040283529160200191613a19565b820191906000526020600020905b8154815290600101906020018083116139fc57829003601f168201915b50505050506150e990919063ffffffff16565b901515613a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a6691906168a4565b60405180910390fd5b50613a786151b5565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f986868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613ad495949392919061658b565b600060405180830381600087803b158015613aee57600080fd5b505af1158015613b02573d6000803e3d6000fd5b505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613c406040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613c2d5780601f10613c0257610100808354040283529160200191613c2d565b820191906000526020600020905b815481529060010190602001808311613c1057829003601f168201915b50505050506150e990919063","","000000000000000000000000000000000000008152600401614c5b91906168a4565b60405180910390fd5b5060008090505b600480549050811015614dbc576000600482815481101515614c8957fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d0d91906167b6565b60206040518083038186803b158015614d2557600080fd5b505afa158015614d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d5d9190810190615e96565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614c6b565b50565b60606000614dcb6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d752b4ea8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e2393929190616712565b60006040518083038186803b158015614e3b57600080fd5b505afa158015614e4f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614e789190810190616207565b91509150935093915050565b6060614e8e6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d962c33b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ee29190616507565b60006040518083038186803b158015614efa57600080fd5b505afa158015614f0e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614f3791908101906162ad565b9050919050565b6060614f486151b5565b73ffffffffffffffffffffffffffffffffffffffff1663e2948e3f8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614fa093929190616559565b60006040518083038186803b158015614fb857600080fd5b505afa158015614fcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614ff591908101906162ad565b90509392505050565b60006150086151b5565b73ffffffffffffffffffffffffffffffffffffffff1663f71b7abf8585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161506093929190616559565b60206040518083038186803b15801561507857600080fd5b505afa15801561508c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506150b091908101906162ee565b90509392505050565b60006150e47f53657474696e67000000000000000000000000000000000000000000000000006158ed565b905090565b606082826040516020018083805190602001908083835b6020831015156151255780518252602082019150602081019050602083039250615100565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156151785780518252602082019150602081019050602083039250615153565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006151bf61243f565b905090565b60006151ef7f486973746f7279000000000000000000000000000000000000000000000000006158ed565b905090565b600061521f7f46696c65000000000000000000000000000000000000000000000000000000006158ed565b905090565b600061522e6151b5565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152829190616507565b60206040518083038186803b15801561529a57600080fd5b505afa1580156152ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506152d291908101906162ee565b905060006152de6151b5565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153329190616507565b60206040518083038186803b15801561534a57600080fd5b505afa15801561535e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061538291908101906162ee565b90506000831180156153945750818311155b61545a60606040519081016040528060248152602001616b626024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154475780601f1061541c57610100808354040283529160200191615447565b820191906000526020600020905b81548152906001019060200180831161542a57829003601f168201915b50505050506150e990919063ffffffff16565b90151561549d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161549491906168a4565b60405180910390fd5b506154a66151b5565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c2856154d58686615ab590919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161550e9291906166a9565b600060405180830381600087803b15801561552857600080fd5b505af115801561553c573d6000803e3d6000fd5b5050505050505050565b6000808284019050838110151515615593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161558a906168f6565b60405180910390fd5b8091505092915050565b60006155a76151b5565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155fb9190616507565b60206040518083038186803b15801561561357600080fd5b505afa158015615627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061564b91908101906162ee565b905060006156576151b5565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016156ab9190616507565b60206040518083038186803b1580156156c357600080fd5b505afa1580156156d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506156fb91908101906162ee565b905060008311801561571f57508061571c848461554690919063ffffffff16565b11155b6158016040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157ee5780601f106157c3576101008083540402835291602001916157ee565b820191906000526020600020905b8154815290600101906020018083116157d157829003601f168201915b50505050506150e990919063ffffffff16565b901515615844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161583b91906168a4565b60405180910390fd5b5061584d6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c28561587c868661554690919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016158b59291906166a9565b600060405180830381600087803b1580156158cf57600080fd5b505af11580156158e3573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415615a366040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615a225780601f106159f757610100808354040283529160200191615a22565b820191906000526020600020905b815481529060010190602001808311615a0557829003601f168201915b5050505050615aff9092919063ffffffff16565b901515615a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615a7091906168a4565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615af783836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615bd4565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615b3c5780518252602082019150602081019050602083039250615b17565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615b8f5780518252602082019150602081019050602083039250615b6a565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615c1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615c1591906168a4565b60405180910390fd5b5060008385039050809150509392505050565b6000615c3d823561",""};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0000000000000000000000000000028152600401610c589291906167ec565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca891908101906162ee565b90508473ffffffffffffffffffffffffffffffffffffffff167f6f411a893c5fa52ce58a412de25a2950f640906d934006f21bf08aa2552af5b88484604051610cf29291906167ec565b60405180910390a2505b50505050565b6000610d0c615185565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d629291906167ec565b60206040518083038186803b158015610d7a57600080fd5b505afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610db291908101906162ee565b90508473ffffffffffffffffffffffffffffffffffffffff167fe89d203d7f352b2dce5ab22578a1506f4dd0ec30c398151d94c52d422608c7bb8484604051610dfc9291906167ec565b60405180910390a25050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610e5957602002820191906000526020600020905b815481526020019060010190808311610e45575b5050505050905090565b610e6b6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ebf9190616507565b60206040518083038186803b158015610ed757600080fd5b505afa158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f0f919081019061625b565b610ff16040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fde5780601f10610fb357610100808354040283529160200191610fde565b820191906000526020600020905b815481529060010190602001808311610fc157829003601f168201915b50505050506150b990919063ffffffff16565b901515611034576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161102b91906168a4565b60405180910390fd5b5061103d6151b5565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28686866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161109593929190616559565b60206040518083038186803b1580156110ad57600080fd5b505afa1580156110c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110e5919081019061625b565b6111c76040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111b45780601f10611189576101008083540402835291602001916111b4565b820191906000526020600020905b81548152906001019060200180831161119757829003601f168201915b50505050506150b990919063ffffffff16565b90151561120a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161120191906168a4565b60405180910390fd5b506112136151c4565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561127457600080fd5b505afa158015611288573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112ac91908101906162ee565b8282905011156113946040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113815780601f1061135657610100808354040283529160200191611381565b820191906000526020600020905b81548152906001019060200180831161136457829003601f168201915b50505050506150b990919063ffffffff16565b9015156113d7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016113ce91906168a4565b60405180910390fd5b506113e06151b5565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79686868686866040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161143c95949392919061658b565b600060405180830381600087803b15801561145657600080fd5b505af115801561146a573d6000803e3d6000fd5b505050505050505050565b606061147f6151b5565b73ffffffffffffffffffffffffffffffffffffffff16633eab5fba836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114d39190616507565b60006040518083038186803b1580156114eb57600080fd5b505afa1580156114ff573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061152891908101906162ad565b9050919050565b60006115396151b5565b73ffffffffffffffffffffffffffffffffffffffff1663489b57666040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561159a57600080fd5b505afa1580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115d291908101906162ee565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117306040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561171d5780601f106116f25761010080835404028352916020019161171d565b820191906000526020600020905b81548152906001019060200180831161170057829003601f168201915b50505050506150b990919063ffffffff16565b901515611773576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161176a91906168a4565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117eb91906167b6565b60206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061183b9190810190615e96565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6118c36151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119179190616507565b60206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611967919081019061625b565b611a496040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a365780601f10611a0b57610100808354040283529160200191611a36565b820191906000526020600020905b815481529060010190602001808311611a1957829003601f168201915b50505050506150b990919063ffffffff16565b901515611a8c576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a8391906168a4565b60405180910390fd5b50611a956151b5565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611aed93929190616559565b60206040518083038186803b158015611b0557600080fd5b505afa158015611b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b3d919081019061625b565b611c1f6040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c0c5780601f10611be157610100808354040283529160200191611c0c565b820191906000526020600020905b815481529060010190602001808311611bef57829003601f168201915b50505050506150b990919063ffffffff16565b901515611c62576040517fc703cb120000000000000000000000","00000000000000000000000000000000008152600401611c5991906168a4565b60405180910390fd5b50611c6b6151b5565b73ffffffffffffffffffffffffffffffffffffffff16636bddd7ba858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cc594939291906165d4565b600060405180830381600087803b158015611cdf57600080fd5b505af1158015611cf3573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611e336040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e205780601f10611df557610100808354040283529160200191611e20565b820191906000526020600020905b815481529060010190602001808311611e0357829003601f168201915b50505050506150b990919063ffffffff16565b901515611e76576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611e6d91906168a4565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ea76151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611efb9190616507565b60206040518083038186803b158015611f1357600080fd5b505afa158015611f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4b919081019061625b565b61202d6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561201a5780601f10611fef5761010080835404028352916020019161201a565b820191906000526020600020905b815481529060010190602001808311611ffd57829003601f168201915b50505050506150b990919063ffffffff16565b901515612070576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161206791906168a4565b60405180910390fd5b506120796151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120cd9190616507565b60206040518083038186803b1580156120e557600080fd5b505afa1580156120f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061211d91908101906162ee565b8110156121e660606040519081016040528060228152602001616b626022913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121d35780601f106121a8576101008083540402835291602001916121d3565b820191906000526020600020905b8154815290600101906020018083116121b657829003601f168201915b50505050506150b990919063ffffffff16565b901515612229576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161222091906168a4565b60405180910390fd5b506122326151b5565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016122889291906166a9565b600060405180830381600087803b1580156122a257600080fd5b505af11580156122b6573d6000803e3d6000fd5b505050505050565b60006122c86151b5565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161231c9190616507565b60206040518083038186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061236c91908101906162ee565b9050919050565b600061237d6151b5565b73ffffffffffffffffffffffffffffffffffffffff166376e1fbb28585856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123d593929190616559565b60206040518083038186803b1580156123ed57600080fd5b505afa158015612401573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061242591908101906162ee565b90509392505050565b6124366151c4565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561249757600080fd5b505afa1580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124cf91908101906162ee565b815111156125b56040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125a25780601f10612577576101008083540402835291602001916125a2565b820191906000526020600020905b81548152906001019060200180831161258557829003601f168201915b50505050506150b990919063ffffffff16565b9015156125f8576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016125ef91906168a4565b60405180910390fd5b506126016151b5565b73ffffffffffffffffffffffffffffffffffffffff16639786acf283836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612657929190616679565b60206040518083038186803b15801561266f57600080fd5b505afa158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126a7919081019061625b565b6127896040805190810160405280601081526020017f3a2066696c65206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127765780601f1061274b57610100808354040283529160200191612776565b820191906000526020600020905b81548152906001019060200180831161275957829003601f168201915b50505050506150b990919063ffffffff16565b9015156127cc576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016127c391906168a4565b60405180910390fd5b506127d56151f4565b73ffffffffffffffffffffffffffffffffffffffff16637bf378c183600184805190602001206040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161283593929190616522565b600060405180830381600087803b15801561284f57600080fd5b505af1158015612863573d6000803e3d6000fd5b5050505061286f6151b5565b73ffffffffffffffffffffffffffffffffffffffff16637d07225283836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128c5929190616679565b600060405180830381600087803b1580156128df57600080fd5b505af11580156128f3573d6000803e3d6000fd5b505050506000612901615185565b73ffffffffffffffffffffffffffffffffffffffff16639bd76136836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161295591906168a4565b60206040518083038186803b15801561296d57600080fd5b505afa158015612981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506129a591908101906162ee565b90506129b18382615224565b6129b9615185565b73ffffffffffffffffffffffffffffffffffffffff16638d14e60f83856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a0f9291906168c6565b600060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b50505050505050565b612a4e6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612aa29190616507565b60206040518083038186803b158015612aba57600080fd5b505afa158015612ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612af2919081019061625b565b15612bd56040805190810160405280600c81526020017f3a2075736572206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bc25780601f10612b9757610100808354040283529160200191612bc2565b820191906000526020600020905b815481529060010190602001808311612ba557829003601f168201915b50505050506150b990919063ffffffff16565b901515612c18576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612c0f91906168a4565b60405180910390fd5b50612c216151c4565b73ffffffffffffffffffffffffffffffffffffffff1663d2","e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612c8257600080fd5b505afa158015612c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612cba91908101906162ee565b828290501115612da26040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d8f5780601f10612d6457610100808354040283529160200191612d8f565b820191906000526020600020905b815481529060010190602001808311612d7257829003601f168201915b50505050506150b990919063ffffffff16565b901515612de5576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612ddc91906168a4565b60405180910390fd5b50612dee6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663fcdce00184612e126151c4565b73ffffffffffffffffffffffffffffffffffffffff1663dfde08506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612e7357600080fd5b505afa158015612e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612eab91908101906162ee565b85856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ee894939291906166d2565b600060405180830381600087803b158015612f0257600080fd5b505af1158015612f16573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130526040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561303f5780601f106130145761010080835404028352916020019161303f565b820191906000526020600020905b81548152906001019060200180831161302257829003601f168201915b50505050506150b990919063ffffffff16565b901515613095576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161308c91906168a4565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561318d60606040519081016040528060218152602001616ba86021913960008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561317a5780601f1061314f5761010080835404028352916020019161317a565b820191906000526020600020905b81548152906001019060200180831161315d57829003601f168201915b50505050506150b990919063ffffffff16565b9015156131d0576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016131c791906168a4565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6132996151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132ed9190616507565b60206040518083038186803b15801561330557600080fd5b505afa158015613319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061333d919081019061625b565b61341f6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561340c5780601f106133e15761010080835404028352916020019161340c565b820191906000526020600020905b8154815290600101906020018083116133ef57829003601f168201915b50505050506150b990919063ffffffff16565b901515613462576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161345991906168a4565b60405180910390fd5b5061346b6151c4565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156134cc57600080fd5b505afa1580156134e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061350491908101906162ee565b8282905011156135ec6040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135d95780601f106135ae576101008083540402835291602001916135d9565b820191906000526020600020905b8154815290600101906020018083116135bc57829003601f168201915b50505050506150b990919063ffffffff16565b90151561362f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161362691906168a4565b60405180910390fd5b506136386151b5565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161369093929190616559565b600060405180830381600087803b1580156136aa57600080fd5b505af11580156136be573d6000803e3d6000fd5b50505050505050565b60606136d16151b5565b73ffffffffffffffffffffffffffffffffffffffff1663ab3da81c8585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161372993929190616559565b60006040518083038186803b15801561374157600080fd5b505afa158015613755573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061377e91908101906162ad565b90509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6137b56151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016138099190616507565b60206040518083038186803b15801561382157600080fd5b505afa158015613835573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613859919081019061625b565b61393b6040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139285780601f106138fd57610100808354040283529160200191613928565b820191906000526020600020905b81548152906001019060200180831161390b57829003601f168201915b50505050506150b990919063ffffffff16565b90151561397e576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161397591906168a4565b60405180910390fd5b506139876151b5565b73ffffffffffffffffffffffffffffffffffffffff1663e5fb9235826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139db9190616507565b60206040518083038186803b1580156139f357600080fd5b505afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613a2b91908101906162ee565b600014613b106040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613afd5780601f10613ad257610100808354040283529160200191613afd565b820191906000526020600020905b815481529060010190602001808311613ae057829003601f168201915b50505050506150b990919063ffffffff16565b901515613b53576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613b4a91906168a4565b60405180910390fd5b50613b5c6151b5565b73ffffffffffffffffffffffffffffffffffffffff166380c2e0af826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613bb09190616507565b600060405180830381600087803b158015613bca57600080fd5b505af1158015613bde573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613c2c6151b5565b73ffffffffffffffffffffffff","ffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c809190616507565b60206040518083038186803b158015613c9857600080fd5b505afa158015613cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613cd0919081019061625b565b9050919050565b613cdf615185565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8383866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d3793929190616810565b60206040518083038186803b158015613d4f57600080fd5b505afa158015613d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613d87919081019061625b565b1515613f32576000613d976151b5565b73ffffffffffffffffffffffffffffffffffffffff1663bfcef9e9856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613deb9190616507565b60206040518083038186803b158015613e0357600080fd5b505afa158015613e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613e3b91908101906162ee565b9050613e456151b5565b73ffffffffffffffffffffffffffffffffffffffff1663e4b760e985613e7560018561554690919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613eae9291906166a9565b600060405180830381600087803b158015613ec857600080fd5b505af1158015613edc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f45e753cf5e33480d22f1b8a971ba76fa905f565f7d0f11f59aee3a5abdd60ea48484604051613f289291906167ec565b60405180910390a2505b505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613fcd5780601f10613fa257610100808354040283529160200191613fcd565b820191906000526020600020905b815481529060010190602001808311613fb057829003601f168201915b505050505081565b6000613fdf6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140339190616507565b60206040518083038186803b15801561404b57600080fd5b505afa15801561405f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061408391908101906162ee565b9050919050565b606060006140966151b5565b73ffffffffffffffffffffffffffffffffffffffff1663dd5e5c018686866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140ee93929190616712565b60006040518083038186803b15801561410657600080fd5b505afa15801561411a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506141439190810190616207565b91509150935093915050565b600084116142356040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142225780601f106141f757610100808354040283529160200191614222565b820191906000526020600020905b81548152906001019060200180831161420557829003601f168201915b50505050506150b990919063ffffffff16565b901515614278576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161426f91906168a4565b60405180910390fd5b506142816151c4565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156142e257600080fd5b505afa1580156142f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061431a91908101906162ee565b8282905011156144026040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143ef5780601f106143c4576101008083540402835291602001916143ef565b820191906000526020600020905b8154815290600101906020018083116143d257829003601f168201915b50505050506150b990919063ffffffff16565b901515614445576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161443c91906168a4565b60405180910390fd5b5061444e6151c4565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156144af57600080fd5b505afa1580156144c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506144e791908101906162ee565b8686905011156145cf6040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145bc5780601f10614591576101008083540402835291602001916145bc565b820191906000526020600020905b81548152906001019060200180831161459f57829003601f168201915b50505050506150b990919063ffffffff16565b901515614612576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161460991906168a4565b60405180910390fd5b5061461b6151b5565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28888886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161467393929190616559565b60206040518083038186803b15801561468b57600080fd5b505afa15801561469f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506146c3919081019061625b565b156147a66040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156147935780601f1061476857610100808354040283529160200191614793565b820191906000526020600020905b81548152906001019060200180831161477657829003601f168201915b50505050506150b990919063ffffffff16565b9015156147e9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016147e091906168a4565b60405180910390fd5b50836147f36151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c54d1788896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016148479190616507565b60206040518083038186803b15801561485f57600080fd5b505afa158015614873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061489791908101906162ee565b101561497b6040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156149685780601f1061493d57610100808354040283529160200191614968565b820191906000526020600020905b81548152906001019060200180831161494b57829003601f168201915b50505050506150b990919063ffffffff16565b9015156149be576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016149b591906168a4565b60405180910390fd5b506149c76151f4565b73ffffffffffffffffffffffffffffffffffffffff16637bf378c1886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a3e93929190616522565b600060405180830381600087803b158015614a5857600080fd5b505af1158015614a6c573d6000803e3d6000fd5b50505050614a78615185565b73ffffffffffffffffffffffffffffffffffffffff16636ae64dee8787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ad29493929190616842565b600060405180830381600087803b158015614aec57600080fd5b505af1158015614b00573d6000803e3d6000fd5b50505050614b0c6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663c2a6d025888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614b6c9796959493929190616614565b600060405180830381600087803b158015614b8657600080fd5b505af1158015614b9a573d6000803e3d6000fd5b50505050614ba8878561559d565b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614ce46040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081","525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614cd15780601f10614ca657610100808354040283529160200191614cd1565b820191906000526020600020905b815481529060010190602001808311614cb457829003601f168201915b50505050506150b990919063ffffffff16565b901515614d27576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614d1e91906168a4565b60405180910390fd5b5060008090505b600480549050811015614e7f576000600482815481101515614d4c57fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614dd091906167b6565b60206040518083038186803b158015614de857600080fd5b505afa158015614dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614e209190810190615e96565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614d2e565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614fb56040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614fa25780601f10614f7757610100808354040283529160200191614fa2565b820191906000526020600020905b815481529060010190602001808311614f8557829003601f168201915b50505050506150b990919063ffffffff16565b901515614ff8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614fef91906168a4565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606082826040516020018083805190602001908083835b6020831015156150f557805182526020820191506020810190506020830392506150d0565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156151485780518252602082019150602081019050602083039250615123565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b60006151b07f46696c65000000000000000000000000000000000000000000000000000000006158ed565b905090565b60006151bf611cfd565b905090565b60006151ef7f53657474696e67000000000000000000000000000000000000000000000000006158ed565b905090565b600061521f7f486973746f7279000000000000000000000000000000000000000000000000006158ed565b905090565b600061522e6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152829190616507565b60206040518083038186803b15801561529a57600080fd5b505afa1580156152ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506152d291908101906162ee565b905060006152de6151b5565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016153329190616507565b60206040518083038186803b15801561534a57600080fd5b505afa15801561535e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061538291908101906162ee565b90506000831180156153945750818311155b61545a60606040519081016040528060248152602001616b846024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156154475780601f1061541c57610100808354040283529160200191615447565b820191906000526020600020905b81548152906001019060200180831161542a57829003601f168201915b50505050506150b990919063ffffffff16565b90151561549d576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161549491906168a4565b60405180910390fd5b506154a66151b5565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f0856154d58686615ab590919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161550e9291906166a9565b600060405180830381600087803b15801561552857600080fd5b505af115801561553c573d6000803e3d6000fd5b5050505050505050565b6000808284019050838110151515615593576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161558a906168f6565b60405180910390fd5b8091505092915050565b60006155a76151b5565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155fb9190616507565b60206040518083038186803b15801561561357600080fd5b505afa158015615627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061564b91908101906162ee565b905060006156576151b5565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016156ab9190616507565b60206040518083038186803b1580156156c357600080fd5b505afa1580156156d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506156fb91908101906162ee565b905060008311801561571f57508061571c848461554690919063ffffffff16565b11155b6158016040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157ee5780601f106157c3576101008083540402835291602001916157ee565b820191906000526020600020905b8154815290600101906020018083116157d157829003601f168201915b50505050506150b990919063ffffffff16565b901515615844576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161583b91906168a4565b60405180910390fd5b5061584d6151b5565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f08561587c868661554690919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016158b59291906166a9565b600060405180830381600087803b1580156158cf57600080fd5b505af11580156158e3573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415615a366040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015615a225780601f106159f757610100808354040283529160200191615a22565b820191906000526020600020905b815481529060010190602001808311615a0557829003601f168201915b5050505050615aff9092919063ffffffff16565b901515615a79576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615a7091906168a4565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615af783836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615bd4565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615b3c5780518252602082019150602081019050602083039250615b17565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615b8f5780518252602082019150602081019050602083039250615b6a565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615c1e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615c1591906168a4565b60405180910390fd5b5060008385039050809150509392505050565b6000615c3d823561",""};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFailAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUserNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"changeSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAddFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_CALLBACKFAILADDFILE = "callbackFailAddFile";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_CALLBACKFINISHDELETEFILE = "callbackFinishDeleteFile";

    public static final String FUNC_GETTOTALUSERNUMBER = "getTotalUserNumber";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CHANGESPACE = "changeSpace";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_CALLBACKFINISHADDFILE = "callbackFinishAddFile";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_GETCIDS = "getCids";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETFILEEXT = "getFileExt";

    public static final String FUNC_GETFILEDURATION = "getFileDuration";

    public static final Event FILEADDED_EVENT = new Event("FileAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEADDFAILED_EVENT = new Event("FileAddFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEDELETED_EVENT = new Event("FileDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected User(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String addr, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFailAddFile(String owner, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCallbackFailAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageUsed(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt register(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt callbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishDeleteFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getTotalUserNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALUSERNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean exist(String addr) throws ContractException {
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt deRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeSpace(String addr, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getChangeSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGESPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageTotal(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String addr, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String addr, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishAddFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, Boolean> getCids(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String getExt(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getFileExt(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getFileDuration(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<FileAddedEventResponse> getFileAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDED_EVENT, transactionReceipt);
        ArrayList<FileAddedEventResponse> responses = new ArrayList<FileAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddedEventResponse typedResponse = new FileAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileAddFailedEventResponse> getFileAddFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDFAILED_EVENT, transactionReceipt);
        ArrayList<FileAddFailedEventResponse> responses = new ArrayList<FileAddFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddFailedEventResponse typedResponse = new FileAddFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddFailedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddFailedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileDeletedEventResponse> getFileDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEDELETED_EVENT, transactionReceipt);
        ArrayList<FileDeletedEventResponse> responses = new ArrayList<FileDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileDeletedEventResponse typedResponse = new FileDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileDeletedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileDeletedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static User load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new User(contractAddress, client, credential);
    }

    public static User deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(User.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class FileAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileAddFailedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileDeletedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
