package com.ancun.chain_storage.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String[] BINARY_ARRAY = {"","36036020811015610cc257600080fd5b8101908080359060200190640100000000811115610cdf57600080fd5b820183602082011115610cf157600080fd5b80359060200191846020830284011164010000000083111715610d1357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061433c565b005b348015610d7057600080fd5b50610db360048036036020811015610d8757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144d7565b005b348015610dc157600080fd5b50610dca614644565b005b348015610dd857600080fd5b50610e7a60048036036060811015610def57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610e2c57600080fd5b820183602082011115610e3e57600080fd5b80359060200191846001830284011164010000000083111715610e6057600080fd5b9091929391929390803590602001909291905050506147a9565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ecb7f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b610ed3614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d6020811015610f9557600080fd5b8101908080519060200190929190505050151561101a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b611022614a36565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b1580156110ee57600080fd5b505afa158015611102573d6000803e3d6000fd5b505050506040513d602081101561111857600080fd5b8101908080519060200190929190505050151561119d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a66696c65206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f7ff856ebdfb707d61def85870f1d5ec936227ea11ff8064c01f211a7f01836156001848460405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a2600061122a614a45565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060206040518083038186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b810190808051906020019092919050505090506000611309614a45565b73ffffffffffffffffffffffffffffffffffffffff1663ec18665d8585886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925080828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b505050506040513d602081101561140157600080fd5b81019080805190602001909291905050509050801561155757611422614a36565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca86846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156114c457600080fd5b505af11580156114d8573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f14a51c77a00d5c4c3ccc7a4df74f169088c4d4d04859d176729645e53c7b895c858560405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a25b5050505050565b606060048054806020026020016040519081016040528092919081815260200182805480156115ac57602002820191906000526020600020905b815481526020019060010190808311611598575b5050505050905090565b6115be611723565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6118507f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b611858614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156118f057600080fd5b505afa158015611904573d6000803e3d6000fd5b505050506040513d602081101561191a57600080fd5b81019080805190602001909291905050501515156119a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f553a75736572206578697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b6119a8614a36565b73ffffffffffffffffffffffffffffffffffffffff16635f4cfd59846119cc614a75565b73ffffffffffffffffffffffffffffffffffffffff16635406cbe96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611a2d57600080fd5b505afa158015611a41573d6000803e3d6000fd5b505050506040513d6020811015611a5757600080fd5b810190808051906020019092919050505085856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015611b2157600080fd5b505af1158015611b35573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c746040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c615780601f10611c3657610100808354040283529160200191611c61565b820191906000526020600020905b815481529060010190602001808311611c4457829003601f168201915b5050505050614aa590919063ffffffff16565b901515611d1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151","815260200191508051906020019080838360005b83811015611ce1578082015181840152602081019050611cc6565b50505050905090810190601f168015611d0e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611d6e7f46696c6500000000000000000000000000000000000000000000000000000000611ef1565b611d76614a36565b73ffffffffffffffffffffffffffffffffffffffff16633bdc8962846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611e1057600080fd5b505af1158015611e24573d6000803e3d6000fd5b505050506040513d6020811015611e3a57600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff167fc6f83b7b2d19b0fcc2cba9d7251b2d607d566fde09f4d53fd69757a10996a680838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120376040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120235780601f10611ff857610100808354040283529160200191612023565b820191906000526020600020905b81548152906001019060200180831161200657829003601f168201915b5050505050614b719092919063ffffffff16565b9015156120df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120a4578082015181840152602081019050612089565b50505050905090810190601f1680156120d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b61210c7f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b612114614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d60208110156121d657600080fd5b8101908080519060200190929190505050151561225b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b612263614a36565b73ffffffffffffffffffffffffffffffffffffffff16637ab71c2d826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156122fb57600080fd5b505afa15801561230f573d6000803e3d6000fd5b505050506040513d602081101561232557600080fd5b810190808051906020019092919050505060001415156123ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f553a66696c6573206e6f7420656d70747900000000000000000000000000000081525060200191505060405180910390fd5b6123b5614a36565b73ffffffffffffffffffffffffffffffffffffffff16635c60f226826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561244f57600080fd5b505af1158015612463573d6000803e3d6000fd5b5050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125005780601f106124d557610100808354040283529160200191612500565b820191906000526020600020905b8154815290600101906020018083116124e357829003601f168201915b505050505081565b612510611723565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d60208110156125c957600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6126a97f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b6126b1614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561274957600080fd5b505afa15801561275d573d6000803e3d6000fd5b505050506040513d602081101561277357600080fd5b810190808051906020019092919050505015156127f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b612800614a36565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b1580156128cc57600080fd5b505afa1580156128e0573d6000803e3d6000fd5b505050506040513d60208110156128f657600080fd5b8101908080519060200190929190505050151561297b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f553a6e6f2066696c65000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b612983614a36565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f986868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015612a8557600080fd5b505af1158015612a99573d6000803e3d6000fd5b505050505050505050565b612aac611723565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea31487cbe13bee7b727310a460405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612b957f46696c6500000000000000000000000000000000000000000000000000000000611ef1565b612b9d614a36565b73ffffffffffffffffffffffffffffffffffffffff1663101f51068585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015612c6b57600080fd5b505af1158015612c7f573d6000803e3d6000fd5b50505050612c8b614a36565b73ffffffffffffffffffffffffffffffffffffffff1663e82cd9ca85836040518363ffffffff16","7c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612d2d57600080fd5b505af1158015612d41573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f14a51c77a00d5c4c3ccc7a4df74f169088c4d4d04859d176729645e53c7b895c848460405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a250505050565b612dee7f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b612df6614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e8e57600080fd5b505afa158015612ea2573d6000803e3d6000fd5b505050506040513d6020811015612eb857600080fd5b81019080805190602001909291905050501515612f3d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b612f45614a36565b73ffffffffffffffffffffffffffffffffffffffff166394fc2a4e8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561301357600080fd5b505af1158015613027573d6000803e3d6000fd5b50505050505050565b6130597f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b613061614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156130f957600080fd5b505afa15801561310d573d6000803e3d6000fd5b505050506040513d602081101561312357600080fd5b810190808051906020019092919050505015156131a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b6131b0614a36565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561324857600080fd5b505afa15801561325c573d6000803e3d6000fd5b505050506040513d602081101561327257600080fd5b810190808051906020019092919050505081101515156132fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f553a73746f7261676520737061636520746f6f20736d616c6c0000000000000081525060200191505060405180910390fd5b613302614a36565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156133a457600080fd5b505af11580156133b8573d6000803e3d6000fd5b505050505050565b6133e97f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b6133f1614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561348957600080fd5b505afa15801561349d573d6000803e3d6000fd5b505050506040513d60208110156134b357600080fd5b81019080805190602001909291905050501515613538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b613540614a36565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b15801561360c57600080fd5b505afa158015613620573d6000803e3d6000fd5b505050506040513d602081101561363657600080fd5b810190808051906020019092919050505015156136bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a66696c65206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b6136c3614a36565b73ffffffffffffffffffffffffffffffffffffffff1663af7cdcaf858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561379957600080fd5b505af11580156137ad573d6000803e3d6000fd5b5050505050505050565b6137e07f436861696e53746f726167650000000000000000000000000000000000000000611ef1565b6137e8614a36565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561388057600080fd5b505afa158015613894573d6000803e3d6000fd5b505050506040513d60208110156138aa57600080fd5b8101908080519060200190929190505050151561392f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b613937614a36565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b158015613a0357600080fd5b505afa158015613a17573d6000803e3d6000fd5b505050506040513d6020811015613a2d57600080fd5b8101908080519060200190929190505050151515613ab3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f553a66696c65206578697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000613abd614a36565b73ffffffffffffffffffffffffffffffffffffffff1663fa61c545886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613b5557600080fd5b505afa158015613b69573d6000803e3d6000fd5b505050506040513d6020811015613b7f57600080fd5b8101908080519060200190929190505050111515613c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f553a73746f72616765207370616365206e6f7420656e6f75676800000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff167f7ff856ebdfb707d61def85870f1d5ec936227ea11ff8064c01f211a7f01836156000878760405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a26000613c92614a45565b73ffffffffffffffffffffffffffffffffffffffff1663c0a715d087878a6040","","90810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614d7b5780601f10614d5057610100808354040283529160200191614d7b565b820191906000526020600020905b815481529060010190602001808311614d5e57829003601f168201915b5050505050614b719092919063ffffffff16565b901515614e37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614dfc578082015181840152602081019050614de1565b50505050905090810190601f168015614e295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905091905056fe553a66696c652073697a65207a65726f2c2066696c6520696e2070726f63657373696e672c20706c6561736520776169742061206d6f6d656e7420616e642074727920616761696ea165627a7a72305820f85573f92e323fa01e1232c3890de5da0e070bedf411ffb219dedc90016a631b0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","80fd5b50610d4d60048036036040811015610ccc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610d0957600080fd5b820183602082011115610d1b57600080fd5b80359060200191846001830284011164010000000083111715610d3d57600080fd5b90919293919293905050506144e8565b005b348015610d5b57600080fd5b50610e1260048036036020811015610d7257600080fd5b8101908080359060200190640100000000811115610d8f57600080fd5b820183602082011115610da157600080fd5b80359060200191846020830284011164010000000083111715610dc357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929050505061466e565b005b348015610e2057600080fd5b50610e29614809565b005b348015610e3757600080fd5b50610e7a60048036036020811015610e4e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061496e565b005b610e84613f99565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610f29576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f6e6577206f776e657220697320746865207a65726f206164647265737300000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600480548060200260200160405190810160405280929190818152602001828054801561105d57602002820191906000526020600020905b815481526020019060010190808311611049575b5050505050905090565b6110907f436861696e53746f726167650000000000000000000000000000000000000000613da7565b611098614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d602081101561115a57600080fd5b810190808051906020019092919050505015156111df576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b6111e7614a36565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b1580156112b357600080fd5b505afa1580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b81019080805190602001909291905050501515611362576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f553a6e6f2066696c65000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61136a614a36565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79686868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352878782818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b505050505050505050565b6114b47f46696c6500000000000000000000000000000000000000000000000000000000613da7565b6114bc614a36565b73ffffffffffffffffffffffffffffffffffffffff16637d0722528585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561158a57600080fd5b505af115801561159e573d6000803e3d6000fd5b505050506115aa614a36565b73ffffffffffffffffffffffffffffffffffffffff16632817fe6a85836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fe89d203d7f352b2dce5ab22578a1506f4dd0ec30c398151d94c52d422608c7bb848460405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a250505050565b61170d7f436861696e53746f726167650000000000000000000000000000000000000000613da7565b611715614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156117ad57600080fd5b505afa1580156117c1573d6000803e3d6000fd5b505050506040513d60208110156117d757600080fd5b8101908080519060200190929190505050151561185c576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b611864614a36565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156118fc57600080fd5b505afa158015611910573d6000803e3d6000fd5b505050506040513d602081101561192657600080fd5b810190808051906020019092919050505081101515156119ae576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f553a73746f7261676520737061636520746f6f20736d616c6c0000000000000081525060200191505060405180910390fd5b6119b6614a36565b73ffffffffffffffffffffffffffffffffffffffff16634b17e3bb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611a5857600080fd5b505af1158015611a6c573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa2613f99565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611b3157600080fd5b505afa158015611b45573d6000803e3d6000fd5b505050506040513d6020811015611b5b57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b611c157f436861696e53746f726167650000000000000000000000000000000000000000613da7565b611c1d614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611cb5576000","80fd5b505afa158015611cc9573d6000803e3d6000fd5b505050506040513d6020811015611cdf57600080fd5b81019080805190602001909291905050501515611d64576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b611d6c614a36565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b158015611e3857600080fd5b505afa158015611e4c573d6000803e3d6000fd5b505050506040513d6020811015611e6257600080fd5b81019080805190602001909291905050501515611ee7576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a66696c65206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b611eef614a36565b73ffffffffffffffffffffffffffffffffffffffff16636bddd7ba858585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015611fc557600080fd5b505af1158015611fd9573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121196040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121065780601f106120db57610100808354040283529160200191612106565b820191906000526020600020905b8154815290600101906020018083116120e957829003601f168201915b5050505050614a4590919063ffffffff16565b9015156121c1576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561218657808201518184015260208101905061216b565b50505050905090810190601f1680156121b35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6122137f436861696e53746f726167650000000000000000000000000000000000000000613da7565b61221b614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156122b357600080fd5b505afa1580156122c7573d6000803e3d6000fd5b505050506040513d60208110156122dd57600080fd5b81019080805190602001909291905050501515612362576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b61236a614a36565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b15801561243657600080fd5b505afa15801561244a573d6000803e3d6000fd5b505050506040513d602081101561246057600080fd5b810190808051906020019092919050505015156124e5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a66696c65206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167ffbaf37c066475af3158e9df07088a45d3005751a986206966ad7d538fc8612336001848460405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a26000612572614b11565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060206040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d602081101561263457600080fd5b810190808051906020019092919050505090506000612651614b11565b73ffffffffffffffffffffffffffffffffffffffff16638d14e60f8585886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925080828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b505050506040513d602081101561274957600080fd5b81019080805190602001909291905050509050801561289f5761276a614a36565b73ffffffffffffffffffffffffffffffffffffffff16632817fe6a86846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561280c57600080fd5b505af1158015612820573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fe89d203d7f352b2dce5ab22578a1506f4dd0ec30c398151d94c52d422608c7bb858560405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a25b5050505050565b6128cf7f436861696e53746f726167650000000000000000000000000000000000000000613da7565b6128d7614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561296f57600080fd5b505afa158015612983573d6000803e3d6000fd5b505050506040513d602081101561299957600080fd5b8101908080519060200190929190505050151515612a1f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f553a75736572206578697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b612a27614a36565b73ffffffffffffffffffffffffffffffffffffffff1663fcdce00184612a4b614b41565b73ffffffffffffffffffffffffffffffffffffffff1663dfde08506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612aac57600080fd5b505afa158015612ac0573d6000803e3d6000fd5b505050506040513d6020811015612ad657600080fd5b810190808051906020019092919050505085856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b158015612ba057600080fd5b505af1158015612bb4573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612cf26040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cde5780601f10612cb357610100808354040283529160200191612cde56","5b820191906000526020600020905b815481529060010190602001808311612cc157829003601f168201915b5050505050614b719092919063ffffffff16565b901515612d9a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d5f578082015181840152602081019050612d44565b50505050905090810190601f168015612d8c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b612da6613f99565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612e4b576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6577206d616e6167657220697320746865207a65726f20616464726573730081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612f347f436861696e53746f726167650000000000000000000000000000000000000000613da7565b612f3c614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612fd457600080fd5b505afa158015612fe8573d6000803e3d6000fd5b505050506040513d6020811015612ffe57600080fd5b81019080805190602001909291905050501515613083576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b61308b614a36565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28787876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b15801561315757600080fd5b505afa15801561316b573d6000803e3d6000fd5b505050506040513d602081101561318157600080fd5b8101908080519060200190929190505050151515613207576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f553a66696c65206578697374000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000613211614a36565b73ffffffffffffffffffffffffffffffffffffffff1663a0b5ad1e886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156132a957600080fd5b505afa1580156132bd573d6000803e3d6000fd5b505050506040513d60208110156132d357600080fd5b8101908080519060200190929190505050111515613359576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f553a73746f72616765207370616365206e6f7420656e6f75676800000000000081525060200191505060405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff167ffbaf37c066475af3158e9df07088a45d3005751a986206966ad7d538fc8612336000878760405180848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405180910390a260006133e6614b11565b73ffffffffffffffffffffffffffffffffffffffff16633c05e3dd87878a6040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281038252858582818152602001925080828437600081840152601f19601f820116905080830192505050945050505050602060405180830381600087803b1580156134b457600080fd5b505af11580156134c8573d6000803e3d6000fd5b505050506040513d60208110156134de57600080fd5b81019080805190602001909291905050509050801561377c576000613501614b11565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613688886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060206040518083038186803b15801561359957600080fd5b505afa1580156135ad573d6000803e3d6000fd5b505050506040513d60208110156135c357600080fd5b81019080805190602001909291905050509050600081111515613631576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401808060200182810382526048815260200180614e746048913960600191505060405180910390fd5b613639614a36565b73ffffffffffffffffffffffffffffffffffffffff16634c2b1e2e898360016040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019350505050600060405180830381600087803b1580156136e857600080fd5b505af11580156136fc573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff167f6f411a893c5fa52ce58a412de25a2950f640906d934006f21bf08aa2552af5b8888860405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505b613784614a36565b73ffffffffffffffffffffffffffffffffffffffff166391eb51808888888888886040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001858152602001806020018381038352888882818152602001925080828437600081840152601f19601f8201169050808301925050508381038252858582818152602001925080828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b15801561388e57600080fd5b505af11580156138a2573d6000803e3d6000fd5b5050505050505050505050565b6138d87f46696c6500000000000000000000000000000000000000000000000000000000613da7565b6138e0614a36565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060206040518083038186803b1580156139ac57600080fd5b505afa1580156139c0573d6000803e3d6000fd5b505050506040513d60208110156139d657600080fd5b810190808051906020019092919050505015613b36576139f4614a36565b73ffffffffffffffffffffffffffffffffffffffff16634c2b1e2e858360006040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515151581526020019350505050600060405180830381600087803b158015613aa357600080fd5b505af1158015613ab7573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f6f411a893c5fa52ce58a412de25a2950f640906d934006f21bf08aa2552af5b8848460405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a25b50505050565b613b657f436861696e53746f726167650000000000000000000000000000000000000000613da7565b613b6d614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613c0557600080fd5b505afa158015613c19573d6000803e3d6000fd5b505050506040513d6020811015613c2f57600080fd5b81019080805190602001909291905050501515613cb4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390","fd5b613cbc614a36565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015613d8a57600080fd5b505af1158015613d9e573d6000803e3d6000fd5b50505050505050565b6005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613eed6040805190810160405280601481526020017f3a2063616c6c6572206973206e6f7420746865200000000000000000000000008152508360008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613ed95780601f10613eae57610100808354040283529160200191613ed9565b820191906000526020600020905b815481529060010190602001808311613ebc57829003601f168201915b5050505050614b719092919063ffffffff16565b901515613f95576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f5a578082015181840152602081019050613f3f565b50505050905090810190601f168015613f875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561405e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f63616c6c6572206973206e6f7420746865206f776e657200000000000000000081525060200191505060405180910390fd5b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6140af7f436861696e53746f726167650000000000000000000000000000000000000000613da7565b6140b7614a36565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561414f57600080fd5b505afa158015614163573d6000803e3d6000fd5b505050506040513d602081101561417957600080fd5b810190808051906020019092919050505015156141fe576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f553a75736572206e6f742065786973740000000000000000000000000000000081525060200191505060405180910390fd5b614206614a36565b73ffffffffffffffffffffffffffffffffffffffff1663e5fb9235826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561429e57600080fd5b505afa1580156142b2573d6000803e3d6000fd5b505050506040513d60208110156142c857600080fd5b81019080805190602001909291905050506000141515614350576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f553a66696c6573206e6f7420656d70747900000000000000000000000000000081525060200191505060405180910390fd5b614358614a36565b73ffffffffffffffffffffffffffffffffffffffff166380c2e0af826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156143f257600080fd5b505af1158015614406573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144e05780601f106144b5576101008083540402835291602001916144e0565b820191906000526020600020905b8154815290600101906020018083116144c357829003601f168201915b505050505081565b6145117f46696c6500000000000000000000000000000000000000000000000000000000613da7565b614519614a36565b73ffffffffffffffffffffffffffffffffffffffff1663415c14eb846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156145b357600080fd5b505af11580156145c7573d6000803e3d6000fd5b505050506040513d60208110156145dd57600080fd5b8101908080519060200190929190505050508273ffffffffffffffffffffffffffffffffffffffff167f45e753cf5e33480d22f1b8a971ba76fa905f565f7d0f11f59aee3a5abdd60ea4838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a2505050565b601481511015156146e7576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f63616e6e6f742068617665206d6f7265207468616e203230206974656d73000081525060200191505060405180910390fd5b600080905060008090505b825181101561478f5760056000848381518110151561470d57fe5b90602001906020020151815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415614782576001915061478f565b80806001019150506146f2565b50801515614805576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f63616c6c6572206973206e6f7420696e20636f6e7461696e730000000000000081525060200191505060405180910390fd5b5050565b614811613f99565b60008090505b60048054905081101561496b57600060048281548110151561483557fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156148d157600080fd5b505afa1580156148e5573d6000803e3d6000fd5b505050506040513d60208110156148fb57600080fd5b81019080805190602001909291905050506005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614817565b50565b614976613f99565b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000614a40611fe3565b905090565b606082826040516020018083805190602001908083835b602083101515614a815780518252602082019150602081019050602083039250614a5c565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b602083101515614ad45780518252602082019150602081019050602083039250614aaf565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b6000614b3c7f46696c6500000000000000000000000000000000000000000000000000000000614c46565b905090565b6000614b6c7f53657474696e6700000000000000000000000000000000000000000000000000614c46565b905090565b60608383836040516020018084805190602001908083835b602083101515614bae5780518252602082019150602081019050602083039250614b89565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515614c015780518252602082019150602081019050602083039250614bdc565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614d8f60408051","90810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614d7b5780601f10614d5057610100808354040283529160200191614d7b565b820191906000526020600020905b815481529060010190602001808311614d5e57829003601f168201915b5050505050614b719092919063ffffffff16565b901515614e37576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614dfc578082015181840152602081019050614de1565b50505050905090810190601f168015614e295780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905091905056fe553a66696c652073697a65207a65726f2c2066696c6520696e2070726f63657373696e672c20706c6561736520776169742061206d6f6d656e7420616e642074727920616761696ea165627a7a7230582034acbf141f20ed468488cc847ccdbe16d4b55b7449d1522a655161af54fbfeec0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mustOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"onAddFileFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"mustAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"onDeleteFileFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setStorageTotal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerName\",\"type\":\"bytes32\"}],\"name\":\"mustManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"name\":\"mustContainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"onAddFileFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"UserAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAddFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_MUSTOWNER = "mustOwner";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_ONADDFILEFAIL = "onAddFileFail";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_MUSTADDRESS = "mustAddress";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_ONDELETEFILEFINISH = "onDeleteFileFinish";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETSTORAGETOTAL = "setStorageTotal";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_MUSTMANAGER = "mustManager";

    public static final String FUNC_MUSTCONTAINADDRESS = "mustContainAddress";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_ONADDFILEFINISH = "onAddFileFinish";

    public static final Event USERACTION_EVENT = new Event("UserAction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEADDED_EVENT = new Event("FileAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEADDFAILED_EVENT = new Event("FileAddFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEDELETED_EVENT = new Event("FileDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected User(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String userAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustOwner(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustOwner() {
        final Function function = new Function(
                FUNC_MUSTOWNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt register(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String userAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt onAddFileFail(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_ONADDFILEFAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] onAddFileFail(String userAddress, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONADDFILEFAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnAddFileFail(String userAddress, String cid) {
        final Function function = new Function(
                FUNC_ONADDFILEFAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getOnAddFileFailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONADDFILEFAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt mustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustAddress(byte[] name) {
        final Function function = new Function(
                FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt deRegister(String userAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String userAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String userAddress) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String userAddress, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String userAddress, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt onDeleteFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] onDeleteFileFinish(String userAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnDeleteFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getOnDeleteFileFinishInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONDELETEFILEFINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String userAddress, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String userAddress, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorageTotal(String userAddress, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorageTotal(String userAddress, BigInteger size) {
        final Function function = new Function(
                FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetStorageTotalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGETOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String userAddress, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String userAddress, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String userAddress, String cid, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String userAddress, String cid, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt mustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustManager(byte[] managerName, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustManager(byte[] managerName) {
        final Function function = new Function(
                FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(managerName)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getMustManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt mustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] mustContainAddress(List<byte[]> names, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForMustContainAddress(List<byte[]> names) {
        final Function function = new Function(
                FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(names.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes32[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(names, org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getMustContainAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MUSTCONTAINADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<Bytes32>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt onAddFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] onAddFileFinish(String userAddress, String cid, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOnAddFileFinish(String userAddress, String cid, BigInteger size) {
        final Function function = new Function(
                FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(userAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getOnAddFileFinishInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ONADDFILEFINISH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public List<UserActionEventResponse> getUserActionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERACTION_EVENT, transactionReceipt);
        ArrayList<UserActionEventResponse> responses = new ArrayList<UserActionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserActionEventResponse typedResponse = new UserActionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserActionEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserActionEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERACTION_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileAddedEventResponse> getFileAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDED_EVENT, transactionReceipt);
        ArrayList<FileAddedEventResponse> responses = new ArrayList<FileAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddedEventResponse typedResponse = new FileAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileAddFailedEventResponse> getFileAddFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDFAILED_EVENT, transactionReceipt);
        ArrayList<FileAddFailedEventResponse> responses = new ArrayList<FileAddFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddFailedEventResponse typedResponse = new FileAddFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddFailedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddFailedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileDeletedEventResponse> getFileDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEDELETED_EVENT, transactionReceipt);
        ArrayList<FileDeletedEventResponse> responses = new ArrayList<FileDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileDeletedEventResponse typedResponse = new FileDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileDeletedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileDeletedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static User load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new User(contractAddress, client, credential);
    }

    public static User deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(User.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class UserActionEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public BigInteger action;

        public String cid;
    }

    public static class FileAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;
    }

    public static class FileAddFailedEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;
    }

    public static class FileDeletedEventResponse {
        public TransactionReceipt.Logs log;

        public String userAddress;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
