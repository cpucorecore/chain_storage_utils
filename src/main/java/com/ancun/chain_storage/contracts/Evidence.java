package com.ancun.chain_storage.contracts;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class Evidence extends Contract {
    public static final String[] BINARY_ARRAY = {
        "608060405234801561001057600080fd5b50610d4b806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806351f94ccd1161005b57806351f94ccd146101125780639f7624321461012e578063c23539181461014a578063c2adb9dd1461017a5761007d565b806329c059f31461008257806332e5b115146100b25780634db89c4c146100e2575b600080fd5b61009c60048036038101906100979190610842565b6101aa565b6040516100a99190610b43565b60405180910390f35b6100cc60048036038101906100c79190610842565b6102a6565b6040516100d99190610b43565b60405180910390f35b6100fc60048036038101906100f791906108ea565b6103a1565b6040516101099190610b65565b60405180910390f35b61012c6004803603810190610127919061086b565b6104b5565b005b61014860048036038101906101439190610926565b61055f565b005b610164600480360381019061015f9190610842565b6105ab565b6040516101719190610bc7565b60405180910390f35b610194600480360381019061018f91906108ea565b6105ca565b6040516101a19190610b65565b60405180910390f35b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561029b578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102875780601f1061025c57610100808354040283529160200191610287565b820191906000526020600020905b81548152906001019060200180831161026a57829003601f168201915b5050505050815260200190600101906101df565b505050509050919050565b6060600080838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610396578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103825780601f1061035757610100808354040283529160200191610382565b820191906000526020600020905b81548152906001019060200180831161036557829003601f168201915b5050505050815260200190600101906102da565b505050509050919050565b60606103ac836105ab565b82106103ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e490610ba7565b60405180910390fd5b600080848152602001908152602001600020828154811061040a57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b5050505050905092915050565b600080600085815260200190815260200160002090508083908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610505929190610734565b5060006001600086815260200190815260200160002090508083908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610557929190610734565b505050505050565b60008090506000809050600090505b848110156105a35761058981876106df90919063ffffffff16565b91506105968285856104b5565b808060010191505061056e565b505050505050565b6000806000838152602001908152602001600020805490509050919050565b60606105d5836105ab565b8210610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610ba7565b60405180910390fd5b60016000848152602001908152602001600020828154811061063457fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106d25780601f106106a7576101008083540402835291602001916106d2565b820191906000526020600020905b8154815290600101906020018083116106b557829003601f168201915b5050505050905092915050565b60008082840190508381101561072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072190610b87565b60405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061077557805160ff19168380011785556107a3565b828001600101855582156107a3579182015b828111156107a2578251825591602001919060010190610787565b5b5090506107b091906107b4565b5090565b6107d691905b808211156107d25760008160009055506001016107ba565b5090565b90565b600082601f8301126107ea57600080fd5b81356107fd6107f882610c0f565b610be2565b9150808252602083016020830185838301111561081957600080fd5b610824838284610cab565b50505092915050565b60008135905061083c81610cfe565b92915050565b60006020828403121561085457600080fd5b60006108628482850161082d565b91505092915050565b60008060006060848603121561088057600080fd5b600061088e8682870161082d565b935050602084013567ffffffffffffffff8111156108ab57600080fd5b6108b7868287016107d9565b925050604084013567ffffffffffffffff8111156108d457600080fd5b6108e0868287016107d9565b9150509250925092565b600080604083850312156108fd57600080fd5b600061090b8582860161082d565b925050602061091c8582860161082d565b9150509250929050565b6000806000806080858703121561093c57600080fd5b600061094a8782880161082d565b945050602061095b8782880161082d565b935050604085013567ffffffffffffffff81111561097857600080fd5b610984878288016107d9565b925050606085013567ffffffffffffffff8111156109a157600080fd5b6109ad878288016107d9565b91505092959194509250565b60006109c58383610a42565b905092915050565b60006109d882610c4b565b6109e28185610c6e565b9350836020820285016109f485610c3b565b8060005b85811015610a305784840389528151610a1185826109b9565b9450610a1c83610c61565b925060208a019950506001810190506109f8565b50829750879550505050505092915050565b6000610a4d82610c56565b610a578185610c7f565b9350610a67818560208601610cba565b610a7081610ced565b840191505092915050565b6000610a8682610c56565b610a908185610c90565b9350610aa0818560208601610cba565b610aa981610ced565b840191505092915050565b6000610ac1601b83610c90565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000610b01601283610c90565b91507f696e646578206f7574206f662072616e676500000000000000000000000000006000830152602082019050919050565b610b3d81610ca1565b82525050565b60006020820190508181036000830152610b5d81846109cd565b905092915050565b60006020820190508181036000830152610b7f8184610a7b565b905092915050565b60006020820190508181036000830152610ba081610ab4565b9050919050565b60006020820190508181036000830152610bc081610af4565b9050919050565b6000602082019050610bdc6000830184610b34565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610c0557600080fd5b8060405250919050565b600067ffffffffffffffff821115610c2657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610cd8578082015181840152602081019050610cbd565b83811115610ce7576000848401525b50505050565b6000601f19601f8301169050919050565b610d0781610ca1565b8114610d1257600080fd5b5056fea264697066735822122058b5476133c634e79e640ff3c54f4158c0cac4b09d9574a7962dfb80b832f1f464736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "608060405234801561001057600080fd5b50610d4b806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063673e75201161005b578063673e7520146100fe5780638166e5d11461012e5780639d42d7c81461015e578063a45bc28f1461018e5761007d565b80632c6180211461008257806341e5065b146100b2578063442732c5146100e2575b600080fd5b61009c600480360381019061009791906108ea565b6101aa565b6040516100a99190610b65565b60405180910390f35b6100cc60048036038101906100c79190610842565b6102be565b6040516100d99190610b43565b60405180910390f35b6100fc60048036038101906100f7919061086b565b6103ba565b005b61011860048036038101906101139190610842565b610464565b6040516101259190610b43565b60405180910390f35b610148600480360381019061014391906108ea565b61055f565b6040516101559190610b65565b60405180910390f35b61017860048036038101906101739190610842565b610674565b6040516101859190610bc7565b60405180910390f35b6101a860048036038101906101a39190610926565b610693565b005b60606101b583610674565b82106101f6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016101ed90610ba7565b60405180910390fd5b600080848152602001908152602001600020828154811061021357fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102b15780601f10610286576101008083540402835291602001916102b1565b820191906000526020600020905b81548152906001019060200180831161029457829003601f168201915b5050505050905092915050565b606060016000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156103af578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561039b5780601f106103705761010080835404028352916020019161039b565b820191906000526020600020905b81548152906001019060200180831161037e57829003601f168201915b5050505050815260200190600101906102f3565b505050509050919050565b60008060008581526020019081526020016000209050808390806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061040a929190610734565b506000600160008681526020019081526020016000209050808390806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061045c929190610734565b505050505050565b6060600080838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610554578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050505081526020019060010190610498565b505050509050919050565b606061056a83610674565b82106105ab576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016105a290610ba7565b60405180910390fd5b6001600084815260200190815260200160002082815481106105c957fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b5050505050905092915050565b6000806000838152602001908152602001600020805490509050919050565b60008090506000809050600090505b848110156106d7576106bd81876106df90919063ffffffff16565b91506106ca8285856103ba565b80806001019150506106a2565b505050505050565b60008082840190508381101561072a576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161072190610b87565b60405180910390fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061077557805160ff19168380011785556107a3565b828001600101855582156107a3579182015b828111156107a2578251825591602001919060010190610787565b5b5090506107b091906107b4565b5090565b6107d691905b808211156107d25760008160009055506001016107ba565b5090565b90565b600082601f8301126107ea57600080fd5b81356107fd6107f882610c0f565b610be2565b9150808252602083016020830185838301111561081957600080fd5b610824838284610cab565b50505092915050565b60008135905061083c81610cfe565b92915050565b60006020828403121561085457600080fd5b60006108628482850161082d565b91505092915050565b60008060006060848603121561088057600080fd5b600061088e8682870161082d565b935050602084013567ffffffffffffffff8111156108ab57600080fd5b6108b7868287016107d9565b925050604084013567ffffffffffffffff8111156108d457600080fd5b6108e0868287016107d9565b9150509250925092565b600080604083850312156108fd57600080fd5b600061090b8582860161082d565b925050602061091c8582860161082d565b9150509250929050565b6000806000806080858703121561093c57600080fd5b600061094a8782880161082d565b945050602061095b8782880161082d565b935050604085013567ffffffffffffffff81111561097857600080fd5b610984878288016107d9565b925050606085013567ffffffffffffffff8111156109a157600080fd5b6109ad878288016107d9565b91505092959194509250565b60006109c58383610a42565b905092915050565b60006109d882610c4b565b6109e28185610c6e565b9350836020820285016109f485610c3b565b8060005b85811015610a305784840389528151610a1185826109b9565b9450610a1c83610c61565b925060208a019950506001810190506109f8565b50829750879550505050505092915050565b6000610a4d82610c56565b610a578185610c7f565b9350610a67818560208601610cba565b610a7081610ced565b840191505092915050565b6000610a8682610c56565b610a908185610c90565b9350610aa0818560208601610cba565b610aa981610ced565b840191505092915050565b6000610ac1601b83610c90565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000610b01601283610c90565b91507f696e646578206f7574206f662072616e676500000000000000000000000000006000830152602082019050919050565b610b3d81610ca1565b82525050565b60006020820190508181036000830152610b5d81846109cd565b905092915050565b60006020820190508181036000830152610b7f8184610a7b565b905092915050565b60006020820190508181036000830152610ba081610ab4565b9050919050565b60006020820190508181036000830152610bc081610af4565b9050919050565b6000602082019050610bdc6000830184610b34565b92915050565b6000604051905081810181811067ffffffffffffffff82111715610c0557600080fd5b8060405250919050565b600067ffffffffffffffff821115610c2657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610cd8578082015181840152602081019050610cbd565b83811115610ce7576000848401525b50505050565b6000601f19601f8301169050919050565b610d0781610ca1565b8114610d1257600080fd5b5056fea2646970667358221220a1f21e1c987442aa16c517592517906a5269cb35ed6c1d39518e763b371bb80b64736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"batchSaveReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getExtByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getExts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTxIdByIndex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTxIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"saveReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BATCHSAVERECEIPT = "batchSaveReceipt";

    public static final String FUNC_GETCOUNT = "getCount";

    public static final String FUNC_GETEXTBYINDEX = "getExtByIndex";

    public static final String FUNC_GETEXTS = "getExts";

    public static final String FUNC_GETTXIDBYINDEX = "getTxIdByIndex";

    public static final String FUNC_GETTXIDS = "getTxIds";

    public static final String FUNC_SAVERECEIPT = "saveReceipt";

    protected Evidence(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt batchSaveReceipt(
            BigInteger startTokenId, BigInteger count, String txId, String ext) {
        final Function function =
                new Function(
                        FUNC_BATCHSAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(startTokenId),
                                new Uint256(count),
                                new Utf8String(txId),
                                new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] batchSaveReceipt(
            BigInteger startTokenId,
            BigInteger count,
            String txId,
            String ext,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_BATCHSAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(startTokenId),
                                new Uint256(count),
                                new Utf8String(txId),
                                new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBatchSaveReceipt(
            BigInteger startTokenId, BigInteger count, String txId, String ext) {
        final Function function =
                new Function(
                        FUNC_BATCHSAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(startTokenId),
                                new Uint256(count),
                                new Utf8String(txId),
                                new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, BigInteger, String, String> getBatchSaveReceiptInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_BATCHSAVERECEIPT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue());
    }

    public BigInteger getCount(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETCOUNT,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getExtByIndex(BigInteger tokenId, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETEXTBYINDEX,
                        Arrays.<Type>asList(new Uint256(tokenId), new Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getExts(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETEXTS,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String getTxIdByIndex(BigInteger tokenId, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETTXIDBYINDEX,
                        Arrays.<Type>asList(new Uint256(tokenId), new Uint256(index)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getTxIds(BigInteger tokenId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETTXIDS,
                        Arrays.<Type>asList(new Uint256(tokenId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt saveReceipt(BigInteger tokenId, String txId, String ext) {
        final Function function =
                new Function(
                        FUNC_SAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(tokenId), new Utf8String(txId), new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] saveReceipt(
            BigInteger tokenId, String txId, String ext, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(tokenId), new Utf8String(txId), new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSaveReceipt(BigInteger tokenId, String txId, String ext) {
        final Function function =
                new Function(
                        FUNC_SAVERECEIPT,
                        Arrays.<Type>asList(
                                new Uint256(tokenId), new Utf8String(txId), new Utf8String(ext)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getSaveReceiptInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SAVERECEIPT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public static Evidence load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Evidence(contractAddress, client, credential);
    }

    public static Evidence deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(Evidence.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
